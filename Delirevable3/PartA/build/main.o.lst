   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	testkey
  17              		.data
  18              		.align	2
  21              	testkey:
  22 0000 B5       		.byte	-75
  23 0001 AA       		.byte	-86
  24 0002 D9       		.byte	-39
  25 0003 9B       		.byte	-101
  26 0004 99       		.byte	-103
  27 0005 A5       		.byte	-91
  28 0006 32       		.byte	50
  29 0007 BE       		.byte	-66
  30 0008 EC       		.byte	-20
  31 0009 4D       		.byte	77
  32 000a CE       		.byte	-50
  33 000b 34       		.byte	52
  34 000c 06       		.byte	6
  35 000d 76       		.byte	118
  36 000e 8C       		.byte	-116
  37 000f 2C       		.byte	44
  38 0010 1A       		.byte	26
  39 0011 2F       		.byte	47
  40 0012 29       		.byte	41
  41 0013 0E       		.byte	14
  42 0014 CE       		.byte	-50
  43 0015 86       		.byte	-122
  44 0016 1B       		.byte	27
  45 0017 58       		.byte	88
  46 0018 99       		.byte	-103
  47 0019 B0       		.byte	-80
  48 001a 80       		.byte	-128
  49 001b D1       		.byte	-47
  50 001c 25       		.byte	37
  51 001d B5       		.byte	-75
  52 001e 6F       		.byte	111
  53 001f 56       		.byte	86
  54              		.global	testkey_len
  55              		.align	2
  58              	testkey_len:
  59 0020 20000000 		.word	32
  60              		.global	HEADER_TEXT_LENGTH
  61              		.section	.rodata
  62              		.align	2
  65              	HEADER_TEXT_LENGTH:
  66 0000 04000000 		.word	4
  67              		.global	HEADER_NONCE
  68              		.align	2
  71              	HEADER_NONCE:
  72 0004 20000000 		.word	32
  73              		.global	HEADER_TEXT_D_LENGTH
  74              		.align	2
  77              	HEADER_TEXT_D_LENGTH:
  78 0008 03000000 		.word	3
  79              		.global	HEADER_D_NONCE
  80              		.align	2
  83              	HEADER_D_NONCE:
  84 000c 18000000 		.word	24
  85              		.global	Bytes
  86              		.bss
  87              		.align	1
  90              	Bytes:
  91 0000 0000     		.space	2
  92              		.global	clock_config
  93              		.section	.rodata
  94              		.align	2
  97              	clock_config:
  98 0010 50       		.byte	80
  99 0011 02       		.byte	2
 100 0012 04       		.byte	4
 101 0013 01       		.byte	1
 102 0014 0000     		.short	0
 103 0016 01       		.byte	1
 104 0017 00       		.space	1
 105 0018 00       		.byte	0
 106 0019 000000   		.space	3
 107 001c 00000100 		.word	65536
 108 0020 01       		.byte	1
 109 0021 01       		.byte	1
 110 0022 01       		.byte	1
 111 0023 01       		.byte	1
 112              		.section	.text.SystemCoreClockSetup,"ax",%progbits
 113              		.align	1
 114              		.global	SystemCoreClockSetup
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	SystemCoreClockSetup:
 121              	.LFB191:
 122              		.file 1 "main.c"
   1:main.c        **** #include "VirtualSerial.h"
   2:main.c        **** #include "XMC4500.h"
   3:main.c        **** #include "sodium.h"
   4:main.c        **** #include "testkey.h"
   5:main.c        **** #include "base64.h"
   6:main.c        **** #include "stdbool.h"
   7:main.c        **** //#include "randombytes_dilbert.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** const int HEADER_TEXT_LENGTH=4;
  11:main.c        **** const int HEADER_NONCE=32;
  12:main.c        **** const int HEADER_TEXT_D_LENGTH=3;
  13:main.c        **** const int HEADER_D_NONCE=24;
  14:main.c        **** 
  15:main.c        **** int16_t Bytes = 0;
  16:main.c        **** 
  17:main.c        **** typedef struct received_packet{
  18:main.c        ****     
  19:main.c        ****     size_t encoded_text_length;
  20:main.c        ****     size_t decoded_text_length;
  21:main.c        ****     unsigned char* encoded_text;
  22:main.c        ****     unsigned char* decoded_text;
  23:main.c        ****     unsigned char header_length_e[4];
  24:main.c        ****     unsigned char header_nonce_e[32];
  25:main.c        ****     unsigned char header_length_d[3];
  26:main.c        ****     unsigned char header_nonce_d[24];
  27:main.c        **** 
  28:main.c        **** }received_packet;
  29:main.c        **** 
  30:main.c        **** 
  31:main.c        **** typedef struct encrypted_packet{
  32:main.c        **** 
  33:main.c        ****     size_t decoded_cipher_text_length;
  34:main.c        ****     size_t encoded_cipher_text_length;
  35:main.c        ****     unsigned char cipher_header_length_decoded[3];
  36:main.c        ****     unsigned char cipher_header_length_encoded[4];
  37:main.c        ****     unsigned char* encoded_cipher_text;
  38:main.c        ****     unsigned char* decoded_cipher_text;
  39:main.c        **** 	
  40:main.c        **** }encrypted_packet;
  41:main.c        **** 
  42:main.c        **** /* Clock configuration */
  43:main.c        **** XMC_SCU_CLOCK_CONFIG_t clock_config =
  44:main.c        **** {
  45:main.c        ****     .syspll_config.p_div = 2,
  46:main.c        ****     .syspll_config.n_div = 80,
  47:main.c        ****     .syspll_config.k_div = 4,
  48:main.c        ****     .syspll_config.mode = XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,
  49:main.c        ****     .syspll_config.clksrc = XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP,
  50:main.c        ****     .enable_oschp = true,
  51:main.c        ****     .calibration_mode = XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY,
  52:main.c        ****     .fsys_clksrc = XMC_SCU_CLOCK_SYSCLKSRC_PLL,
  53:main.c        ****     .fsys_clkdiv = 1,
  54:main.c        ****     .fcpu_clkdiv = 1,
  55:main.c        ****     .fccu_clkdiv = 1,
  56:main.c        ****     .fperipheral_clkdiv = 1
  57:main.c        **** };
  58:main.c        **** 
  59:main.c        **** 
  60:main.c        **** void SystemCoreClockSetup(void)
  61:main.c        **** {
 123              		.loc 1 61 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              	.LCFI0:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 00AF     		add	r7, sp, #0
 133              	.LCFI1:
 134              		.cfi_def_cfa_register 7
  62:main.c        ****     /* Setup settings for USB clock */
  63:main.c        ****     XMC_SCU_CLOCK_Init(&clock_config);
 135              		.loc 1 63 0
 136 0004 0A48     		ldr	r0, .L2
 137 0006 FFF7FEFF 		bl	XMC_SCU_CLOCK_Init
  64:main.c        **** 
  65:main.c        ****     XMC_SCU_CLOCK_EnableUsbPll();
 138              		.loc 1 65 0
 139 000a FFF7FEFF 		bl	XMC_SCU_CLOCK_EnableUsbPll
  66:main.c        ****     XMC_SCU_CLOCK_StartUsbPll(2, 64);
 140              		.loc 1 66 0
 141 000e 4021     		movs	r1, #64
 142 0010 0220     		movs	r0, #2
 143 0012 FFF7FEFF 		bl	XMC_SCU_CLOCK_StartUsbPll
  67:main.c        ****     XMC_SCU_CLOCK_SetUsbClockDivider(4);
 144              		.loc 1 67 0
 145 0016 0420     		movs	r0, #4
 146 0018 FFF7FEFF 		bl	XMC_SCU_CLOCK_SetUsbClockDivider
  68:main.c        ****     XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 147              		.loc 1 68 0
 148 001c 0020     		movs	r0, #0
 149 001e FFF7FEFF 		bl	XMC_SCU_CLOCK_SetUsbClockSource
  69:main.c        ****     XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 150              		.loc 1 69 0
 151 0022 0120     		movs	r0, #1
 152 0024 FFF7FEFF 		bl	XMC_SCU_CLOCK_EnableClock
  70:main.c        **** 
  71:main.c        ****     SystemCoreClockUpdate();
 153              		.loc 1 71 0
 154 0028 FFF7FEFF 		bl	SystemCoreClockUpdate
  72:main.c        **** }
 155              		.loc 1 72 0
 156 002c 00BF     		nop
 157 002e 80BD     		pop	{r7, pc}
 158              	.L3:
 159              		.align	2
 160              	.L2:
 161 0030 00000000 		.word	clock_config
 162              		.cfi_endproc
 163              	.LFE191:
 165              		.section	.text.write_text,"ax",%progbits
 166              		.align	1
 167              		.global	write_text
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	write_text:
 174              	.LFB192:
  73:main.c        **** 
  74:main.c        **** 
  75:main.c        **** bool write_text(unsigned char* buff, int len)
  76:main.c        **** {
 175              		.loc 1 76 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 16
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 90B5     		push	{r4, r7, lr}
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 12
 182              		.cfi_offset 4, -12
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 85B0     		sub	sp, sp, #20
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 32
 188 0004 00AF     		add	r7, sp, #0
 189              	.LCFI4:
 190              		.cfi_def_cfa_register 7
 191 0006 7860     		str	r0, [r7, #4]
 192 0008 3960     		str	r1, [r7]
 193              	.LBB2:
  77:main.c        ****     for(int i=0;i<len;i++)
 194              		.loc 1 77 0
 195 000a 0023     		movs	r3, #0
 196 000c FB60     		str	r3, [r7, #12]
 197 000e 29E0     		b	.L5
 198              	.L9:
  78:main.c        ****     {
  79:main.c        ****         buff[i] = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 199              		.loc 1 79 0
 200 0010 FB68     		ldr	r3, [r7, #12]
 201 0012 7A68     		ldr	r2, [r7, #4]
 202 0014 D418     		adds	r4, r2, r3
 203 0016 1848     		ldr	r0, .L10
 204 0018 FFF7FEFF 		bl	CDC_Device_ReceiveByte
 205 001c 0346     		mov	r3, r0
 206 001e DBB2     		uxtb	r3, r3
 207 0020 2370     		strb	r3, [r4]
  80:main.c        ****         --Bytes;
 208              		.loc 1 80 0
 209 0022 164B     		ldr	r3, .L10+4
 210 0024 B3F90030 		ldrsh	r3, [r3]
 211 0028 9BB2     		uxth	r3, r3
 212 002a 013B     		subs	r3, r3, #1
 213 002c 9BB2     		uxth	r3, r3
 214 002e 1AB2     		sxth	r2, r3
 215 0030 124B     		ldr	r3, .L10+4
 216 0032 1A80     		strh	r2, [r3]	@ movhi
  81:main.c        ****         if(buff[i] == 0x01 || !isbase64(buff[i]))
 217              		.loc 1 81 0
 218 0034 FB68     		ldr	r3, [r7, #12]
 219 0036 7A68     		ldr	r2, [r7, #4]
 220 0038 1344     		add	r3, r3, r2
 221 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 222 003c 012B     		cmp	r3, #1
 223 003e 0CD0     		beq	.L6
 224              		.loc 1 81 0 is_stmt 0 discriminator 1
 225 0040 FB68     		ldr	r3, [r7, #12]
 226 0042 7A68     		ldr	r2, [r7, #4]
 227 0044 1344     		add	r3, r3, r2
 228 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 229 0048 1846     		mov	r0, r3
 230 004a FFF7FEFF 		bl	isbase64
 231 004e 0346     		mov	r3, r0
 232 0050 83F00103 		eor	r3, r3, #1
 233 0054 DBB2     		uxtb	r3, r3
 234 0056 002B     		cmp	r3, #0
 235 0058 01D0     		beq	.L7
 236              	.L6:
  82:main.c        ****         {
  83:main.c        ****             return false;
 237              		.loc 1 83 0 is_stmt 1
 238 005a 0023     		movs	r3, #0
 239 005c 07E0     		b	.L8
 240              	.L7:
  77:main.c        ****     {
 241              		.loc 1 77 0 discriminator 2
 242 005e FB68     		ldr	r3, [r7, #12]
 243 0060 0133     		adds	r3, r3, #1
 244 0062 FB60     		str	r3, [r7, #12]
 245              	.L5:
  77:main.c        ****     {
 246              		.loc 1 77 0 is_stmt 0 discriminator 1
 247 0064 FA68     		ldr	r2, [r7, #12]
 248 0066 3B68     		ldr	r3, [r7]
 249 0068 9A42     		cmp	r2, r3
 250 006a D1DB     		blt	.L9
 251              	.LBE2:
  84:main.c        ****         }   
  85:main.c        ****     }    
  86:main.c        ****     return true;
 252              		.loc 1 86 0 is_stmt 1
 253 006c 0123     		movs	r3, #1
 254              	.L8:
  87:main.c        **** }
 255              		.loc 1 87 0
 256 006e 1846     		mov	r0, r3
 257 0070 1437     		adds	r7, r7, #20
 258              	.LCFI5:
 259              		.cfi_def_cfa_offset 12
 260 0072 BD46     		mov	sp, r7
 261              	.LCFI6:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0074 90BD     		pop	{r4, r7, pc}
 265              	.L11:
 266 0076 00BF     		.align	2
 267              	.L10:
 268 0078 00000000 		.word	VirtualSerial_CDC_Interface
 269 007c 00000000 		.word	Bytes
 270              		.cfi_endproc
 271              	.LFE192:
 273              		.section	.text.uchar_to_int,"ax",%progbits
 274              		.align	1
 275              		.global	uchar_to_int
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu fpv4-sp-d16
 281              	uchar_to_int:
 282              	.LFB193:
  88:main.c        **** 
  89:main.c        **** size_t uchar_to_int(unsigned char* h_d_length)
  90:main.c        **** {
 283              		.loc 1 90 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288 0000 80B4     		push	{r7}
 289              	.LCFI7:
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 7, -4
 292 0002 85B0     		sub	sp, sp, #20
 293              	.LCFI8:
 294              		.cfi_def_cfa_offset 24
 295 0004 00AF     		add	r7, sp, #0
 296              	.LCFI9:
 297              		.cfi_def_cfa_register 7
 298 0006 7860     		str	r0, [r7, #4]
  91:main.c        ****     size_t text_length;
  92:main.c        ****     text_length = h_d_length[2] << 16 | h_d_length[1] << 8 | h_d_length[0];
 299              		.loc 1 92 0
 300 0008 7B68     		ldr	r3, [r7, #4]
 301 000a 0233     		adds	r3, r3, #2
 302 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 303 000e 1A04     		lsls	r2, r3, #16
 304 0010 7B68     		ldr	r3, [r7, #4]
 305 0012 0133     		adds	r3, r3, #1
 306 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 307 0016 1B02     		lsls	r3, r3, #8
 308 0018 1343     		orrs	r3, r3, r2
 309 001a 7A68     		ldr	r2, [r7, #4]
 310 001c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 311 001e 1343     		orrs	r3, r3, r2
 312 0020 FB60     		str	r3, [r7, #12]
  93:main.c        ****     return text_length;
 313              		.loc 1 93 0
 314 0022 FB68     		ldr	r3, [r7, #12]
  94:main.c        **** }
 315              		.loc 1 94 0
 316 0024 1846     		mov	r0, r3
 317 0026 1437     		adds	r7, r7, #20
 318              	.LCFI10:
 319              		.cfi_def_cfa_offset 4
 320 0028 BD46     		mov	sp, r7
 321              	.LCFI11:
 322              		.cfi_def_cfa_register 13
 323              		@ sp needed
 324 002a 5DF8047B 		ldr	r7, [sp], #4
 325              	.LCFI12:
 326              		.cfi_restore 7
 327              		.cfi_def_cfa_offset 0
 328 002e 7047     		bx	lr
 329              		.cfi_endproc
 330              	.LFE193:
 332              		.global	key
 333              		.bss
 334 0002 0000     		.align	2
 337              	key:
 338 0004 00000000 		.space	32
 338      00000000 
 338      00000000 
 338      00000000 
 338      00000000 
 339              		.section	.text.get_chipid,"ax",%progbits
 340              		.align	1
 341              		.global	get_chipid
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu fpv4-sp-d16
 347              	get_chipid:
 348              	.LFB194:
  95:main.c        **** 
  96:main.c        **** 
  97:main.c        **** 
  98:main.c        **** unsigned char key[32] = {0};
  99:main.c        **** void get_chipid()
 100:main.c        **** {
 349              		.loc 1 100 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 80B4     		push	{r7}
 355              	.LCFI13:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 7, -4
 358 0002 83B0     		sub	sp, sp, #12
 359              	.LCFI14:
 360              		.cfi_def_cfa_offset 16
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI15:
 363              		.cfi_def_cfa_register 7
 364              	.LBB3:
 101:main.c        ****     for(int i = 0; i<16;i++)
 365              		.loc 1 101 0
 366 0006 0023     		movs	r3, #0
 367 0008 7B60     		str	r3, [r7, #4]
 368 000a 13E0     		b	.L15
 369              	.L16:
 102:main.c        ****     {
 103:main.c        ****         key[i] = g_chipid[i];
 370              		.loc 1 103 0 discriminator 3
 371 000c 0E4A     		ldr	r2, .L17
 372 000e 7B68     		ldr	r3, [r7, #4]
 373 0010 1344     		add	r3, r3, r2
 374 0012 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 375 0014 0D4A     		ldr	r2, .L17+4
 376 0016 7B68     		ldr	r3, [r7, #4]
 377 0018 1344     		add	r3, r3, r2
 378 001a 0A46     		mov	r2, r1
 379 001c 1A70     		strb	r2, [r3]
 104:main.c        ****         key[i+16] = g_chipid[i];
 380              		.loc 1 104 0 discriminator 3
 381 001e 7B68     		ldr	r3, [r7, #4]
 382 0020 1033     		adds	r3, r3, #16
 383 0022 0949     		ldr	r1, .L17
 384 0024 7A68     		ldr	r2, [r7, #4]
 385 0026 0A44     		add	r2, r2, r1
 386 0028 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 387 002a 084A     		ldr	r2, .L17+4
 388 002c D154     		strb	r1, [r2, r3]
 101:main.c        ****     for(int i = 0; i<16;i++)
 389              		.loc 1 101 0 discriminator 3
 390 002e 7B68     		ldr	r3, [r7, #4]
 391 0030 0133     		adds	r3, r3, #1
 392 0032 7B60     		str	r3, [r7, #4]
 393              	.L15:
 101:main.c        ****     for(int i = 0; i<16;i++)
 394              		.loc 1 101 0 is_stmt 0 discriminator 1
 395 0034 7B68     		ldr	r3, [r7, #4]
 396 0036 0F2B     		cmp	r3, #15
 397 0038 E8DD     		ble	.L16
 398              	.LBE3:
 105:main.c        ****     }
 106:main.c        **** }
 399              		.loc 1 106 0 is_stmt 1
 400 003a 00BF     		nop
 401 003c 0C37     		adds	r7, r7, #12
 402              	.LCFI16:
 403              		.cfi_def_cfa_offset 4
 404 003e BD46     		mov	sp, r7
 405              	.LCFI17:
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 0040 5DF8047B 		ldr	r7, [sp], #4
 409              	.LCFI18:
 410              		.cfi_restore 7
 411              		.cfi_def_cfa_offset 0
 412 0044 7047     		bx	lr
 413              	.L18:
 414 0046 00BF     		.align	2
 415              	.L17:
 416 0048 00000000 		.word	g_chipid
 417 004c 00000000 		.word	key
 418              		.cfi_endproc
 419              	.LFE194:
 421              		.section	.text.Clear_USB,"ax",%progbits
 422              		.align	1
 423              		.global	Clear_USB
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	Clear_USB:
 430              	.LFB195:
 107:main.c        **** 
 108:main.c        **** /*
 109:main.c        **** 
 110:main.c        **** void Send_Packet(unsigned char* c_header, unsigned char* c_text, unsigned int t_len)
 111:main.c        **** {
 112:main.c        ****     
 113:main.c        ****     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x01); //Header Flag
 114:main.c        ****     for(int i=0; i<HEADER_TEXT_LENGTH; i++)
 115:main.c        ****     {
 116:main.c        ****         CDC_Device_SendByte(&VirtualSerial_CDC_Interface, c_header[i]);
 117:main.c        ****     }
 118:main.c        ****     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x02);
 119:main.c        ****     for(int i=0; i<t_len; i++)
 120:main.c        ****     {
 121:main.c        ****         CDC_Device_SendByte(&VirtualSerial_CDC_Interface, c_text[i]);
 122:main.c        ****     }
 123:main.c        ****     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x03);
 124:main.c        ****     
 125:main.c        **** }
 126:main.c        **** 
 127:main.c        **** */
 128:main.c        **** void Clear_USB()
 129:main.c        **** {
 431              		.loc 1 129 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 8
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435 0000 80B5     		push	{r7, lr}
 436              	.LCFI19:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 7, -8
 439              		.cfi_offset 14, -4
 440 0002 82B0     		sub	sp, sp, #8
 441              	.LCFI20:
 442              		.cfi_def_cfa_offset 16
 443 0004 00AF     		add	r7, sp, #0
 444              	.LCFI21:
 445              		.cfi_def_cfa_register 7
 446              	.LBB4:
 130:main.c        ****     for(int i = 0; i<64; i++)
 447              		.loc 1 130 0
 448 0006 0023     		movs	r3, #0
 449 0008 7B60     		str	r3, [r7, #4]
 450 000a 05E0     		b	.L20
 451              	.L21:
 131:main.c        ****     {
 132:main.c        ****         CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 452              		.loc 1 132 0 discriminator 3
 453 000c 0648     		ldr	r0, .L22
 454 000e FFF7FEFF 		bl	CDC_Device_USBTask
 130:main.c        ****     for(int i = 0; i<64; i++)
 455              		.loc 1 130 0 discriminator 3
 456 0012 7B68     		ldr	r3, [r7, #4]
 457 0014 0133     		adds	r3, r3, #1
 458 0016 7B60     		str	r3, [r7, #4]
 459              	.L20:
 130:main.c        ****     for(int i = 0; i<64; i++)
 460              		.loc 1 130 0 is_stmt 0 discriminator 1
 461 0018 7B68     		ldr	r3, [r7, #4]
 462 001a 3F2B     		cmp	r3, #63
 463 001c F6DD     		ble	.L21
 464              	.LBE4:
 133:main.c        ****     }    
 134:main.c        **** }
 465              		.loc 1 134 0 is_stmt 1
 466 001e 00BF     		nop
 467 0020 0837     		adds	r7, r7, #8
 468              	.LCFI22:
 469              		.cfi_def_cfa_offset 8
 470 0022 BD46     		mov	sp, r7
 471              	.LCFI23:
 472              		.cfi_def_cfa_register 13
 473              		@ sp needed
 474 0024 80BD     		pop	{r7, pc}
 475              	.L23:
 476 0026 00BF     		.align	2
 477              	.L22:
 478 0028 00000000 		.word	VirtualSerial_CDC_Interface
 479              		.cfi_endproc
 480              	.LFE195:
 482              		.section	.text.Complete_Encrypted_Packet,"ax",%progbits
 483              		.align	1
 484              		.global	Complete_Encrypted_Packet
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv4-sp-d16
 490              	Complete_Encrypted_Packet:
 491              	.LFB196:
 135:main.c        **** 
 136:main.c        **** void Complete_Encrypted_Packet(encrypted_packet* a_Package)
 137:main.c        **** {
 492              		.loc 1 137 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 16
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              	.LCFI24:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 84B0     		sub	sp, sp, #16
 502              	.LCFI25:
 503              		.cfi_def_cfa_offset 24
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI26:
 506              		.cfi_def_cfa_register 7
 507 0006 7860     		str	r0, [r7, #4]
 138:main.c        ****     size_t  tmp = a_Package->encoded_cipher_text_length;
 508              		.loc 1 138 0
 509 0008 7B68     		ldr	r3, [r7, #4]
 510 000a 5B68     		ldr	r3, [r3, #4]
 511 000c FB60     		str	r3, [r7, #12]
 139:main.c        ****     
 140:main.c        ****     a_Package->cipher_header_length_decoded[2] = (tmp >> 16) & 0xFF;
 512              		.loc 1 140 0
 513 000e FB68     		ldr	r3, [r7, #12]
 514 0010 1B0C     		lsrs	r3, r3, #16
 515 0012 DAB2     		uxtb	r2, r3
 516 0014 7B68     		ldr	r3, [r7, #4]
 517 0016 9A72     		strb	r2, [r3, #10]
 141:main.c        ****     a_Package->cipher_header_length_decoded[1] = (tmp >>  8) & 0xFF;
 518              		.loc 1 141 0
 519 0018 FB68     		ldr	r3, [r7, #12]
 520 001a 1B0A     		lsrs	r3, r3, #8
 521 001c DAB2     		uxtb	r2, r3
 522 001e 7B68     		ldr	r3, [r7, #4]
 523 0020 5A72     		strb	r2, [r3, #9]
 142:main.c        ****     a_Package->cipher_header_length_decoded[0] = (tmp      ) & 0xFF;
 524              		.loc 1 142 0
 525 0022 FB68     		ldr	r3, [r7, #12]
 526 0024 DAB2     		uxtb	r2, r3
 527 0026 7B68     		ldr	r3, [r7, #4]
 528 0028 1A72     		strb	r2, [r3, #8]
 143:main.c        ****     
 144:main.c        **** 
 145:main.c        ****     base64_encode(a_Package->cipher_header_length_decoded, 3 , a_Package->cipher_header_length_enco
 529              		.loc 1 145 0
 530 002a 7B68     		ldr	r3, [r7, #4]
 531 002c 03F10800 		add	r0, r3, #8
 532 0030 7B68     		ldr	r3, [r7, #4]
 533 0032 03F10B02 		add	r2, r3, #11
 534 0036 0423     		movs	r3, #4
 535 0038 0321     		movs	r1, #3
 536 003a FFF7FEFF 		bl	base64_encode
 146:main.c        ****     
 147:main.c        ****     
 148:main.c        **** }
 537              		.loc 1 148 0
 538 003e 00BF     		nop
 539 0040 1037     		adds	r7, r7, #16
 540              	.LCFI27:
 541              		.cfi_def_cfa_offset 8
 542 0042 BD46     		mov	sp, r7
 543              	.LCFI28:
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 0044 80BD     		pop	{r7, pc}
 547              		.cfi_endproc
 548              	.LFE196:
 550              		.section	.text.Send_Package,"ax",%progbits
 551              		.align	1
 552              		.global	Send_Package
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 556              		.fpu fpv4-sp-d16
 558              	Send_Package:
 559              	.LFB197:
 149:main.c        **** 
 150:main.c        **** void Send_Package(encrypted_packet* a_package, unsigned char* buff)
 151:main.c        **** {
 560              		.loc 1 151 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 16
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564 0000 80B5     		push	{r7, lr}
 565              	.LCFI29:
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 84B0     		sub	sp, sp, #16
 570              	.LCFI30:
 571              		.cfi_def_cfa_offset 24
 572 0004 00AF     		add	r7, sp, #0
 573              	.LCFI31:
 574              		.cfi_def_cfa_register 7
 575 0006 7860     		str	r0, [r7, #4]
 576 0008 3960     		str	r1, [r7]
 152:main.c        ****     buff[0] = 0x01;
 577              		.loc 1 152 0
 578 000a 3B68     		ldr	r3, [r7]
 579 000c 0122     		movs	r2, #1
 580 000e 1A70     		strb	r2, [r3]
 581              	.LBB5:
 153:main.c        ****     for(int i = 1; i<5; i++)
 582              		.loc 1 153 0
 583 0010 0123     		movs	r3, #1
 584 0012 FB60     		str	r3, [r7, #12]
 585 0014 0BE0     		b	.L26
 586              	.L27:
 154:main.c        ****     {
 155:main.c        ****         buff[i] = a_package->cipher_header_length_encoded[i-1];
 587              		.loc 1 155 0 discriminator 3
 588 0016 FB68     		ldr	r3, [r7, #12]
 589 0018 3A68     		ldr	r2, [r7]
 590 001a 1344     		add	r3, r3, r2
 591 001c FA68     		ldr	r2, [r7, #12]
 592 001e 013A     		subs	r2, r2, #1
 593 0020 7968     		ldr	r1, [r7, #4]
 594 0022 0A44     		add	r2, r2, r1
 595 0024 D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 596 0026 1A70     		strb	r2, [r3]
 153:main.c        ****     for(int i = 1; i<5; i++)
 597              		.loc 1 153 0 discriminator 3
 598 0028 FB68     		ldr	r3, [r7, #12]
 599 002a 0133     		adds	r3, r3, #1
 600 002c FB60     		str	r3, [r7, #12]
 601              	.L26:
 153:main.c        ****     for(int i = 1; i<5; i++)
 602              		.loc 1 153 0 is_stmt 0 discriminator 1
 603 002e FB68     		ldr	r3, [r7, #12]
 604 0030 042B     		cmp	r3, #4
 605 0032 F0DD     		ble	.L27
 606              	.LBE5:
 156:main.c        ****     }
 157:main.c        ****     buff[5] = 0x02;
 607              		.loc 1 157 0 is_stmt 1
 608 0034 3B68     		ldr	r3, [r7]
 609 0036 0533     		adds	r3, r3, #5
 610 0038 0222     		movs	r2, #2
 611 003a 1A70     		strb	r2, [r3]
 612              	.LBB6:
 158:main.c        ****     for(int i = 6; i < a_package->encoded_cipher_text_length+6; i++)
 613              		.loc 1 158 0
 614 003c 0623     		movs	r3, #6
 615 003e BB60     		str	r3, [r7, #8]
 616 0040 0CE0     		b	.L28
 617              	.L29:
 159:main.c        ****     {
 160:main.c        ****         buff[i] = a_package->encoded_cipher_text[i-6];
 618              		.loc 1 160 0 discriminator 3
 619 0042 BB68     		ldr	r3, [r7, #8]
 620 0044 3A68     		ldr	r2, [r7]
 621 0046 1344     		add	r3, r3, r2
 622 0048 7A68     		ldr	r2, [r7, #4]
 623 004a 1169     		ldr	r1, [r2, #16]
 624 004c BA68     		ldr	r2, [r7, #8]
 625 004e 063A     		subs	r2, r2, #6
 626 0050 0A44     		add	r2, r2, r1
 627 0052 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 628 0054 1A70     		strb	r2, [r3]
 158:main.c        ****     for(int i = 6; i < a_package->encoded_cipher_text_length+6; i++)
 629              		.loc 1 158 0 discriminator 3
 630 0056 BB68     		ldr	r3, [r7, #8]
 631 0058 0133     		adds	r3, r3, #1
 632 005a BB60     		str	r3, [r7, #8]
 633              	.L28:
 158:main.c        ****     for(int i = 6; i < a_package->encoded_cipher_text_length+6; i++)
 634              		.loc 1 158 0 is_stmt 0 discriminator 1
 635 005c 7B68     		ldr	r3, [r7, #4]
 636 005e 5B68     		ldr	r3, [r3, #4]
 637 0060 9A1D     		adds	r2, r3, #6
 638 0062 BB68     		ldr	r3, [r7, #8]
 639 0064 9A42     		cmp	r2, r3
 640 0066 ECD8     		bhi	.L29
 641              	.LBE6:
 161:main.c        ****     }
 162:main.c        ****     buff[a_package->encoded_cipher_text_length+6] = 0x03;
 642              		.loc 1 162 0 is_stmt 1
 643 0068 7B68     		ldr	r3, [r7, #4]
 644 006a 5B68     		ldr	r3, [r3, #4]
 645 006c 0633     		adds	r3, r3, #6
 646 006e 3A68     		ldr	r2, [r7]
 647 0070 1344     		add	r3, r3, r2
 648 0072 0322     		movs	r2, #3
 649 0074 1A70     		strb	r2, [r3]
 163:main.c        ****     Clear_USB();
 650              		.loc 1 163 0
 651 0076 FFF7FEFF 		bl	Clear_USB
 164:main.c        ****     CDC_Device_SendData(&VirtualSerial_CDC_Interface, buff, a_package->encoded_cipher_text_length+7
 652              		.loc 1 164 0
 653 007a 7B68     		ldr	r3, [r7, #4]
 654 007c 5B68     		ldr	r3, [r3, #4]
 655 007e 9BB2     		uxth	r3, r3
 656 0080 0733     		adds	r3, r3, #7
 657 0082 9BB2     		uxth	r3, r3
 658 0084 1A46     		mov	r2, r3
 659 0086 3968     		ldr	r1, [r7]
 660 0088 0348     		ldr	r0, .L30
 661 008a FFF7FEFF 		bl	CDC_Device_SendData
 165:main.c        ****     
 166:main.c        **** }
 662              		.loc 1 166 0
 663 008e 00BF     		nop
 664 0090 1037     		adds	r7, r7, #16
 665              	.LCFI32:
 666              		.cfi_def_cfa_offset 8
 667 0092 BD46     		mov	sp, r7
 668              	.LCFI33:
 669              		.cfi_def_cfa_register 13
 670              		@ sp needed
 671 0094 80BD     		pop	{r7, pc}
 672              	.L31:
 673 0096 00BF     		.align	2
 674              	.L30:
 675 0098 00000000 		.word	VirtualSerial_CDC_Interface
 676              		.cfi_endproc
 677              	.LFE197:
 679              		.section	.text.Clear_Package,"ax",%progbits
 680              		.align	1
 681              		.global	Clear_Package
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu fpv4-sp-d16
 687              	Clear_Package:
 688              	.LFB198:
 167:main.c        **** void Clear_Package(received_packet* aPackage){
 689              		.loc 1 167 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 16
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693              		@ link register save eliminated.
 694 0000 80B4     		push	{r7}
 695              	.LCFI34:
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 7, -4
 698 0002 85B0     		sub	sp, sp, #20
 699              	.LCFI35:
 700              		.cfi_def_cfa_offset 24
 701 0004 00AF     		add	r7, sp, #0
 702              	.LCFI36:
 703              		.cfi_def_cfa_register 7
 704 0006 7860     		str	r0, [r7, #4]
 705              	.LBB7:
 168:main.c        ****     for(int i = 0; i < 32; i++) {
 706              		.loc 1 168 0
 707 0008 0023     		movs	r3, #0
 708 000a FB60     		str	r3, [r7, #12]
 709 000c 50E0     		b	.L33
 710              	.L38:
 169:main.c        ****         if(i < 3) {
 711              		.loc 1 169 0
 712 000e FB68     		ldr	r3, [r7, #12]
 713 0010 022B     		cmp	r3, #2
 714 0012 18DC     		bgt	.L34
 170:main.c        ****             aPackage->header_length_d[i] = 0x00;
 715              		.loc 1 170 0
 716 0014 7A68     		ldr	r2, [r7, #4]
 717 0016 FB68     		ldr	r3, [r7, #12]
 718 0018 1344     		add	r3, r3, r2
 719 001a 3433     		adds	r3, r3, #52
 720 001c 0022     		movs	r2, #0
 721 001e 1A70     		strb	r2, [r3]
 171:main.c        ****             aPackage->header_length_e[i] = 0x00;
 722              		.loc 1 171 0
 723 0020 7A68     		ldr	r2, [r7, #4]
 724 0022 FB68     		ldr	r3, [r7, #12]
 725 0024 1344     		add	r3, r3, r2
 726 0026 1033     		adds	r3, r3, #16
 727 0028 0022     		movs	r2, #0
 728 002a 1A70     		strb	r2, [r3]
 172:main.c        ****             aPackage->header_nonce_d[i] = 0x00;
 729              		.loc 1 172 0
 730 002c 7A68     		ldr	r2, [r7, #4]
 731 002e FB68     		ldr	r3, [r7, #12]
 732 0030 1344     		add	r3, r3, r2
 733 0032 3733     		adds	r3, r3, #55
 734 0034 0022     		movs	r2, #0
 735 0036 1A70     		strb	r2, [r3]
 173:main.c        ****             aPackage->header_nonce_e[i] = 0x00;
 736              		.loc 1 173 0
 737 0038 7A68     		ldr	r2, [r7, #4]
 738 003a FB68     		ldr	r3, [r7, #12]
 739 003c 1344     		add	r3, r3, r2
 740 003e 1433     		adds	r3, r3, #20
 741 0040 0022     		movs	r2, #0
 742 0042 1A70     		strb	r2, [r3]
 743 0044 31E0     		b	.L35
 744              	.L34:
 174:main.c        ****         }
 175:main.c        ****         else if (i >= 3 && i < 4){
 745              		.loc 1 175 0
 746 0046 FB68     		ldr	r3, [r7, #12]
 747 0048 022B     		cmp	r3, #2
 748 004a 15DD     		ble	.L36
 749              		.loc 1 175 0 is_stmt 0 discriminator 1
 750 004c FB68     		ldr	r3, [r7, #12]
 751 004e 032B     		cmp	r3, #3
 752 0050 12DC     		bgt	.L36
 176:main.c        ****             aPackage->header_length_e[i] = 0x00;
 753              		.loc 1 176 0 is_stmt 1
 754 0052 7A68     		ldr	r2, [r7, #4]
 755 0054 FB68     		ldr	r3, [r7, #12]
 756 0056 1344     		add	r3, r3, r2
 757 0058 1033     		adds	r3, r3, #16
 758 005a 0022     		movs	r2, #0
 759 005c 1A70     		strb	r2, [r3]
 177:main.c        ****             aPackage->header_nonce_d[i] = 0x00;
 760              		.loc 1 177 0
 761 005e 7A68     		ldr	r2, [r7, #4]
 762 0060 FB68     		ldr	r3, [r7, #12]
 763 0062 1344     		add	r3, r3, r2
 764 0064 3733     		adds	r3, r3, #55
 765 0066 0022     		movs	r2, #0
 766 0068 1A70     		strb	r2, [r3]
 178:main.c        ****             aPackage->header_nonce_e[i] = 0x00;
 767              		.loc 1 178 0
 768 006a 7A68     		ldr	r2, [r7, #4]
 769 006c FB68     		ldr	r3, [r7, #12]
 770 006e 1344     		add	r3, r3, r2
 771 0070 1433     		adds	r3, r3, #20
 772 0072 0022     		movs	r2, #0
 773 0074 1A70     		strb	r2, [r3]
 774 0076 18E0     		b	.L35
 775              	.L36:
 179:main.c        ****         }
 180:main.c        ****         else if (i >= 4 && i < 24){
 776              		.loc 1 180 0
 777 0078 FB68     		ldr	r3, [r7, #12]
 778 007a 032B     		cmp	r3, #3
 779 007c 0FDD     		ble	.L37
 780              		.loc 1 180 0 is_stmt 0 discriminator 1
 781 007e FB68     		ldr	r3, [r7, #12]
 782 0080 172B     		cmp	r3, #23
 783 0082 0CDC     		bgt	.L37
 181:main.c        ****             aPackage->header_nonce_d[i] = 0x00;
 784              		.loc 1 181 0 is_stmt 1
 785 0084 7A68     		ldr	r2, [r7, #4]
 786 0086 FB68     		ldr	r3, [r7, #12]
 787 0088 1344     		add	r3, r3, r2
 788 008a 3733     		adds	r3, r3, #55
 789 008c 0022     		movs	r2, #0
 790 008e 1A70     		strb	r2, [r3]
 182:main.c        ****             aPackage->header_nonce_e[i] = 0x00;
 791              		.loc 1 182 0
 792 0090 7A68     		ldr	r2, [r7, #4]
 793 0092 FB68     		ldr	r3, [r7, #12]
 794 0094 1344     		add	r3, r3, r2
 795 0096 1433     		adds	r3, r3, #20
 796 0098 0022     		movs	r2, #0
 797 009a 1A70     		strb	r2, [r3]
 798 009c 05E0     		b	.L35
 799              	.L37:
 183:main.c        ****         }
 184:main.c        ****         else{
 185:main.c        ****             aPackage->header_nonce_e[i] = 0x00;
 800              		.loc 1 185 0
 801 009e 7A68     		ldr	r2, [r7, #4]
 802 00a0 FB68     		ldr	r3, [r7, #12]
 803 00a2 1344     		add	r3, r3, r2
 804 00a4 1433     		adds	r3, r3, #20
 805 00a6 0022     		movs	r2, #0
 806 00a8 1A70     		strb	r2, [r3]
 807              	.L35:
 168:main.c        ****         if(i < 3) {
 808              		.loc 1 168 0 discriminator 2
 809 00aa FB68     		ldr	r3, [r7, #12]
 810 00ac 0133     		adds	r3, r3, #1
 811 00ae FB60     		str	r3, [r7, #12]
 812              	.L33:
 168:main.c        ****         if(i < 3) {
 813              		.loc 1 168 0 is_stmt 0 discriminator 1
 814 00b0 FB68     		ldr	r3, [r7, #12]
 815 00b2 1F2B     		cmp	r3, #31
 816 00b4 ABDD     		ble	.L38
 817              	.LBE7:
 186:main.c        ****         }
 187:main.c        ****     }
 188:main.c        ****     aPackage->encoded_text_length = 0;
 818              		.loc 1 188 0 is_stmt 1
 819 00b6 7B68     		ldr	r3, [r7, #4]
 820 00b8 0022     		movs	r2, #0
 821 00ba 1A60     		str	r2, [r3]
 189:main.c        ****     aPackage->decoded_text_length = 0;
 822              		.loc 1 189 0
 823 00bc 7B68     		ldr	r3, [r7, #4]
 824 00be 0022     		movs	r2, #0
 825 00c0 5A60     		str	r2, [r3, #4]
 190:main.c        **** }
 826              		.loc 1 190 0
 827 00c2 00BF     		nop
 828 00c4 1437     		adds	r7, r7, #20
 829              	.LCFI37:
 830              		.cfi_def_cfa_offset 4
 831 00c6 BD46     		mov	sp, r7
 832              	.LCFI38:
 833              		.cfi_def_cfa_register 13
 834              		@ sp needed
 835 00c8 5DF8047B 		ldr	r7, [sp], #4
 836              	.LCFI39:
 837              		.cfi_restore 7
 838              		.cfi_def_cfa_offset 0
 839 00cc 7047     		bx	lr
 840              		.cfi_endproc
 841              	.LFE198:
 843              		.section	.text.Clear_Crypto_Package,"ax",%progbits
 844              		.align	1
 845              		.global	Clear_Crypto_Package
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu fpv4-sp-d16
 851              	Clear_Crypto_Package:
 852              	.LFB199:
 191:main.c        **** 
 192:main.c        **** void Clear_Crypto_Package(encrypted_packet* aPackage){
 853              		.loc 1 192 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 16
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857              		@ link register save eliminated.
 858 0000 80B4     		push	{r7}
 859              	.LCFI40:
 860              		.cfi_def_cfa_offset 4
 861              		.cfi_offset 7, -4
 862 0002 85B0     		sub	sp, sp, #20
 863              	.LCFI41:
 864              		.cfi_def_cfa_offset 24
 865 0004 00AF     		add	r7, sp, #0
 866              	.LCFI42:
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
 869              	.LBB8:
 193:main.c        ****     for(int i = 0; i < 4; i++) {
 870              		.loc 1 193 0
 871 0008 0023     		movs	r3, #0
 872 000a FB60     		str	r3, [r7, #12]
 873 000c 18E0     		b	.L40
 874              	.L43:
 194:main.c        ****         if(i < 3) {
 875              		.loc 1 194 0
 876 000e FB68     		ldr	r3, [r7, #12]
 877 0010 022B     		cmp	r3, #2
 878 0012 0CDC     		bgt	.L41
 195:main.c        ****             aPackage->cipher_header_length_decoded[i] = 0x00;
 879              		.loc 1 195 0
 880 0014 7A68     		ldr	r2, [r7, #4]
 881 0016 FB68     		ldr	r3, [r7, #12]
 882 0018 1344     		add	r3, r3, r2
 883 001a 0833     		adds	r3, r3, #8
 884 001c 0022     		movs	r2, #0
 885 001e 1A70     		strb	r2, [r3]
 196:main.c        ****             aPackage->cipher_header_length_encoded[i] = 0x00;
 886              		.loc 1 196 0
 887 0020 7A68     		ldr	r2, [r7, #4]
 888 0022 FB68     		ldr	r3, [r7, #12]
 889 0024 1344     		add	r3, r3, r2
 890 0026 0B33     		adds	r3, r3, #11
 891 0028 0022     		movs	r2, #0
 892 002a 1A70     		strb	r2, [r3]
 893 002c 05E0     		b	.L42
 894              	.L41:
 197:main.c        ****         }
 198:main.c        ****         else{
 199:main.c        ****             aPackage->cipher_header_length_encoded[i] = 0x00;
 895              		.loc 1 199 0
 896 002e 7A68     		ldr	r2, [r7, #4]
 897 0030 FB68     		ldr	r3, [r7, #12]
 898 0032 1344     		add	r3, r3, r2
 899 0034 0B33     		adds	r3, r3, #11
 900 0036 0022     		movs	r2, #0
 901 0038 1A70     		strb	r2, [r3]
 902              	.L42:
 193:main.c        ****         if(i < 3) {
 903              		.loc 1 193 0 discriminator 2
 904 003a FB68     		ldr	r3, [r7, #12]
 905 003c 0133     		adds	r3, r3, #1
 906 003e FB60     		str	r3, [r7, #12]
 907              	.L40:
 193:main.c        ****         if(i < 3) {
 908              		.loc 1 193 0 is_stmt 0 discriminator 1
 909 0040 FB68     		ldr	r3, [r7, #12]
 910 0042 032B     		cmp	r3, #3
 911 0044 E3DD     		ble	.L43
 912              	.LBE8:
 200:main.c        ****         }
 201:main.c        ****     }
 202:main.c        ****     aPackage->decoded_cipher_text_length = 0;
 913              		.loc 1 202 0 is_stmt 1
 914 0046 7B68     		ldr	r3, [r7, #4]
 915 0048 0022     		movs	r2, #0
 916 004a 1A60     		str	r2, [r3]
 203:main.c        ****     aPackage->encoded_cipher_text_length = 0;
 917              		.loc 1 203 0
 918 004c 7B68     		ldr	r3, [r7, #4]
 919 004e 0022     		movs	r2, #0
 920 0050 5A60     		str	r2, [r3, #4]
 204:main.c        **** }
 921              		.loc 1 204 0
 922 0052 00BF     		nop
 923 0054 1437     		adds	r7, r7, #20
 924              	.LCFI43:
 925              		.cfi_def_cfa_offset 4
 926 0056 BD46     		mov	sp, r7
 927              	.LCFI44:
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 0058 5DF8047B 		ldr	r7, [sp], #4
 931              	.LCFI45:
 932              		.cfi_restore 7
 933              		.cfi_def_cfa_offset 0
 934 005c 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE199:
 938              		.section	.text.main,"ax",%progbits
 939              		.align	1
 940              		.global	main
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	main:
 947              	.LFB200:
 205:main.c        **** 
 206:main.c        **** 
 207:main.c        **** int main(void)
 208:main.c        **** {
 948              		.loc 1 208 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 128
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952 0000 90B5     		push	{r4, r7, lr}
 953              	.LCFI46:
 954              		.cfi_def_cfa_offset 12
 955              		.cfi_offset 4, -12
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 A3B0     		sub	sp, sp, #140
 959              	.LCFI47:
 960              		.cfi_def_cfa_offset 152
 961 0004 02AF     		add	r7, sp, #8
 962              	.LCFI48:
 963              		.cfi_def_cfa 7, 144
 209:main.c        ****  
 210:main.c        **** 
 211:main.c        ****     
 212:main.c        ****     received_packet r_packet;
 213:main.c        ****     encrypted_packet e_packet;
 214:main.c        ****     
 215:main.c        ****     USB_Init();
 964              		.loc 1 215 0
 965 0006 FFF7FEFF 		bl	USB_Init
 216:main.c        ****     /*
 217:main.c        ****     randombytes_set_implementation(&randombytes_dilbert_implementation);
 218:main.c        ****     
 219:main.c        ****     if(sodium_init()<0)
 220:main.c        ****     
 221:main.c        ****     {
 222:main.c        ****     }
 223:main.c        ****     */
 224:main.c        ****     get_chipid();
 966              		.loc 1 224 0
 967 000a FFF7FEFF 		bl	get_chipid
 968              	.L59:
 225:main.c        ****     
 226:main.c        ****     while (1)
 227:main.c        ****     {        
 228:main.c        ****         // Check if data received 
 229:main.c        ****         Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 969              		.loc 1 229 0
 970 000e AF48     		ldr	r0, .L62
 971 0010 FFF7FEFF 		bl	CDC_Device_BytesReceived
 972 0014 0346     		mov	r3, r0
 973 0016 1AB2     		sxth	r2, r3
 974 0018 AD4B     		ldr	r3, .L62+4
 975 001a 1A80     		strh	r2, [r3]	@ movhi
 230:main.c        ****         
 231:main.c        ****         if(Bytes>0)
 976              		.loc 1 231 0
 977 001c AC4B     		ldr	r3, .L62+4
 978 001e B3F90030 		ldrsh	r3, [r3]
 979 0022 002B     		cmp	r3, #0
 980 0024 40F34E81 		ble	.L45
 232:main.c        ****         {
 233:main.c        ****             if(CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface)==0x01) // Check for the first H
 981              		.loc 1 233 0
 982 0028 A848     		ldr	r0, .L62
 983 002a FFF7FEFF 		bl	CDC_Device_ReceiveByte
 984 002e 0346     		mov	r3, r0
 985 0030 012B     		cmp	r3, #1
 986 0032 40F04781 		bne	.L45
 987              	.L46:
 234:main.c        ****             {
 235:main.c        ****                 ABORT:
 236:main.c        ****                 --Bytes;
 988              		.loc 1 236 0
 989 0036 A64B     		ldr	r3, .L62+4
 990 0038 B3F90030 		ldrsh	r3, [r3]
 991 003c 9BB2     		uxth	r3, r3
 992 003e 013B     		subs	r3, r3, #1
 993 0040 9BB2     		uxth	r3, r3
 994 0042 1AB2     		sxth	r2, r3
 995 0044 A24B     		ldr	r3, .L62+4
 996 0046 1A80     		strh	r2, [r3]	@ movhi
 237:main.c        ****                 write_text(r_packet.header_length_e, HEADER_TEXT_LENGTH);
 997              		.loc 1 237 0
 998 0048 0422     		movs	r2, #4
 999 004a 07F12403 		add	r3, r7, #36
 1000 004e 1033     		adds	r3, r3, #16
 1001 0050 1146     		mov	r1, r2
 1002 0052 1846     		mov	r0, r3
 1003 0054 FFF7FEFF 		bl	write_text
 238:main.c        ****                 if(!write_text(r_packet.header_nonce_e, HEADER_NONCE))
 1004              		.loc 1 238 0
 1005 0058 2022     		movs	r2, #32
 1006 005a 07F12403 		add	r3, r7, #36
 1007 005e 1433     		adds	r3, r3, #20
 1008 0060 1146     		mov	r1, r2
 1009 0062 1846     		mov	r0, r3
 1010 0064 FFF7FEFF 		bl	write_text
 1011 0068 0346     		mov	r3, r0
 1012 006a 83F00103 		eor	r3, r3, #1
 1013 006e DBB2     		uxtb	r3, r3
 1014 0070 002B     		cmp	r3, #0
 1015 0072 00D0     		beq	.L47
 239:main.c        ****                 {
 240:main.c        ****                     goto ABORT;
 1016              		.loc 1 240 0
 1017 0074 DFE7     		b	.L46
 1018              	.L47:
 241:main.c        ****                 }
 242:main.c        ****                     Bytes = Bytes-36;
 1019              		.loc 1 242 0
 1020 0076 964B     		ldr	r3, .L62+4
 1021 0078 B3F90030 		ldrsh	r3, [r3]
 1022 007c 9BB2     		uxth	r3, r3
 1023 007e 243B     		subs	r3, r3, #36
 1024 0080 9BB2     		uxth	r3, r3
 1025 0082 1AB2     		sxth	r2, r3
 1026 0084 924B     		ldr	r3, .L62+4
 1027 0086 1A80     		strh	r2, [r3]	@ movhi
 243:main.c        ****                     if(CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface)==0x02) //Check for the 
 1028              		.loc 1 243 0
 1029 0088 9048     		ldr	r0, .L62
 1030 008a FFF7FEFF 		bl	CDC_Device_ReceiveByte
 1031 008e 0346     		mov	r3, r0
 1032 0090 022B     		cmp	r3, #2
 1033 0092 40F01281 		bne	.L48
 1034              	.LBB9:
 244:main.c        ****                     {
 245:main.c        ****                         --Bytes;
 1035              		.loc 1 245 0
 1036 0096 8E4B     		ldr	r3, .L62+4
 1037 0098 B3F90030 		ldrsh	r3, [r3]
 1038 009c 9BB2     		uxth	r3, r3
 1039 009e 013B     		subs	r3, r3, #1
 1040 00a0 9BB2     		uxth	r3, r3
 1041 00a2 1AB2     		sxth	r2, r3
 1042 00a4 8A4B     		ldr	r3, .L62+4
 1043 00a6 1A80     		strh	r2, [r3]	@ movhi
 246:main.c        ****                         size_t tmp_d = HEADER_TEXT_D_LENGTH;
 1044              		.loc 1 246 0
 1045 00a8 0323     		movs	r3, #3
 1046 00aa BB60     		str	r3, [r7, #8]
 247:main.c        ****                         size_t tmp_n = HEADER_D_NONCE;
 1047              		.loc 1 247 0
 1048 00ac 1823     		movs	r3, #24
 1049 00ae 7B60     		str	r3, [r7, #4]
 248:main.c        ****                         base64_decode(r_packet.header_length_e, HEADER_TEXT_LENGTH, r_packet.header
 1050              		.loc 1 248 0
 1051 00b0 0423     		movs	r3, #4
 1052 00b2 1C46     		mov	r4, r3
 1053 00b4 07F10801 		add	r1, r7, #8
 1054 00b8 07F12403 		add	r3, r7, #36
 1055 00bc 03F13402 		add	r2, r3, #52
 1056 00c0 07F12403 		add	r3, r7, #36
 1057 00c4 03F11000 		add	r0, r3, #16
 1058 00c8 0B46     		mov	r3, r1
 1059 00ca 2146     		mov	r1, r4
 1060 00cc FFF7FEFF 		bl	base64_decode
 249:main.c        ****                         base64_decode(r_packet.header_nonce_e, HEADER_NONCE, r_packet.header_nonce_
 1061              		.loc 1 249 0
 1062 00d0 2023     		movs	r3, #32
 1063 00d2 1C46     		mov	r4, r3
 1064 00d4 391D     		adds	r1, r7, #4
 1065 00d6 07F12403 		add	r3, r7, #36
 1066 00da 03F13702 		add	r2, r3, #55
 1067 00de 07F12403 		add	r3, r7, #36
 1068 00e2 03F11400 		add	r0, r3, #20
 1069 00e6 0B46     		mov	r3, r1
 1070 00e8 2146     		mov	r1, r4
 1071 00ea FFF7FEFF 		bl	base64_decode
 250:main.c        ****                         r_packet.encoded_text_length = uchar_to_int(r_packet.header_length_d);
 1072              		.loc 1 250 0
 1073 00ee 07F12403 		add	r3, r7, #36
 1074 00f2 3433     		adds	r3, r3, #52
 1075 00f4 1846     		mov	r0, r3
 1076 00f6 FFF7FEFF 		bl	uchar_to_int
 1077 00fa 0346     		mov	r3, r0
 1078 00fc 7B62     		str	r3, [r7, #36]
 251:main.c        ****                         if(r_packet.encoded_text_length>2048)
 1079              		.loc 1 251 0
 1080 00fe 7B6A     		ldr	r3, [r7, #36]
 1081 0100 B3F5006F 		cmp	r3, #2048
 1082 0104 00F2D280 		bhi	.L60
 252:main.c        ****                         {
 253:main.c        ****                             goto INVALID1;
 254:main.c        ****                         }
 255:main.c        ****                         r_packet.encoded_text = (unsigned char*)calloc(r_packet.encoded_text_length
 1083              		.loc 1 255 0
 1084 0108 7B6A     		ldr	r3, [r7, #36]
 1085 010a 0121     		movs	r1, #1
 1086 010c 1846     		mov	r0, r3
 1087 010e FFF7FEFF 		bl	calloc
 1088 0112 0346     		mov	r3, r0
 1089 0114 FB62     		str	r3, [r7, #44]
 1090              	.LBB10:
 256:main.c        ****                         for(int i = 0; i<r_packet.encoded_text_length ; i++) // Because of the last
 1091              		.loc 1 256 0
 1092 0116 0023     		movs	r3, #0
 1093 0118 FB67     		str	r3, [r7, #124]
 1094 011a 30E0     		b	.L51
 1095              	.L55:
 257:main.c        ****                         {
 258:main.c        ****                             if(Bytes<=0)
 1096              		.loc 1 258 0
 1097 011c 6C4B     		ldr	r3, .L62+4
 1098 011e B3F90030 		ldrsh	r3, [r3]
 1099 0122 002B     		cmp	r3, #0
 1100 0124 08DC     		bgt	.L52
 259:main.c        ****                             {   
 260:main.c        ****                                 Clear_USB();
 1101              		.loc 1 260 0
 1102 0126 FFF7FEFF 		bl	Clear_USB
 261:main.c        ****                                 Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 1103              		.loc 1 261 0
 1104 012a 6848     		ldr	r0, .L62
 1105 012c FFF7FEFF 		bl	CDC_Device_BytesReceived
 1106 0130 0346     		mov	r3, r0
 1107 0132 1AB2     		sxth	r2, r3
 1108 0134 664B     		ldr	r3, .L62+4
 1109 0136 1A80     		strh	r2, [r3]	@ movhi
 1110              	.L52:
 262:main.c        ****                             }
 263:main.c        ****                             r_packet.encoded_text[i] = CDC_Device_ReceiveByte(&VirtualSerial_CDC_In
 1111              		.loc 1 263 0
 1112 0138 FA6A     		ldr	r2, [r7, #44]
 1113 013a FB6F     		ldr	r3, [r7, #124]
 1114 013c D418     		adds	r4, r2, r3
 1115 013e 6348     		ldr	r0, .L62
 1116 0140 FFF7FEFF 		bl	CDC_Device_ReceiveByte
 1117 0144 0346     		mov	r3, r0
 1118 0146 DBB2     		uxtb	r3, r3
 1119 0148 2370     		strb	r3, [r4]
 264:main.c        ****                             --Bytes;
 1120              		.loc 1 264 0
 1121 014a 614B     		ldr	r3, .L62+4
 1122 014c B3F90030 		ldrsh	r3, [r3]
 1123 0150 9BB2     		uxth	r3, r3
 1124 0152 013B     		subs	r3, r3, #1
 1125 0154 9BB2     		uxth	r3, r3
 1126 0156 1AB2     		sxth	r2, r3
 1127 0158 5D4B     		ldr	r3, .L62+4
 1128 015a 1A80     		strh	r2, [r3]	@ movhi
 265:main.c        ****                             if(!isbase64(r_packet.encoded_text[i])) 
 1129              		.loc 1 265 0
 1130 015c FA6A     		ldr	r2, [r7, #44]
 1131 015e FB6F     		ldr	r3, [r7, #124]
 1132 0160 1344     		add	r3, r3, r2
 1133 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1134 0164 1846     		mov	r0, r3
 1135 0166 FFF7FEFF 		bl	isbase64
 1136 016a 0346     		mov	r3, r0
 1137 016c 83F00103 		eor	r3, r3, #1
 1138 0170 DBB2     		uxtb	r3, r3
 1139 0172 002B     		cmp	r3, #0
 1140 0174 40F09480 		bne	.L61
 256:main.c        ****                         {
 1141              		.loc 1 256 0 discriminator 2
 1142 0178 FB6F     		ldr	r3, [r7, #124]
 1143 017a 0133     		adds	r3, r3, #1
 1144 017c FB67     		str	r3, [r7, #124]
 1145              	.L51:
 256:main.c        ****                         {
 1146              		.loc 1 256 0 is_stmt 0 discriminator 1
 1147 017e 7A6A     		ldr	r2, [r7, #36]
 1148 0180 FB6F     		ldr	r3, [r7, #124]
 1149 0182 9A42     		cmp	r2, r3
 1150 0184 CAD8     		bhi	.L55
 1151              	.LBE10:
 266:main.c        ****                             {
 267:main.c        ****                                 goto INVALID;
 268:main.c        ****                             }
 269:main.c        ****                             
 270:main.c        ****                         }
 271:main.c        ****                         if(Bytes<=0)
 1152              		.loc 1 271 0 is_stmt 1
 1153 0186 524B     		ldr	r3, .L62+4
 1154 0188 B3F90030 		ldrsh	r3, [r3]
 1155 018c 002B     		cmp	r3, #0
 1156 018e 01DC     		bgt	.L56
 272:main.c        ****                         {
 273:main.c        ****                             Clear_USB();
 1157              		.loc 1 273 0
 1158 0190 FFF7FEFF 		bl	Clear_USB
 1159              	.L56:
 274:main.c        ****                         }
 275:main.c        ****                         if(CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface)==0x03)
 1160              		.loc 1 275 0
 1161 0194 4D48     		ldr	r0, .L62
 1162 0196 FFF7FEFF 		bl	CDC_Device_ReceiveByte
 1163 019a 0346     		mov	r3, r0
 1164 019c 032B     		cmp	r3, #3
 1165 019e 7AD1     		bne	.L57
 1166              	.LBB11:
 276:main.c        ****                         {
 277:main.c        ****                             
 278:main.c        ****                             size_t* tmp_size = NULL;
 1167              		.loc 1 278 0
 1168 01a0 0023     		movs	r3, #0
 1169 01a2 BB67     		str	r3, [r7, #120]
 279:main.c        ****                             size_t tmp = b64d_size(r_packet.encoded_text_length);
 1170              		.loc 1 279 0
 1171 01a4 7B6A     		ldr	r3, [r7, #36]
 1172 01a6 1846     		mov	r0, r3
 1173 01a8 FFF7FEFF 		bl	b64d_size
 1174 01ac 0346     		mov	r3, r0
 1175 01ae 3B60     		str	r3, [r7]
 280:main.c        ****                             tmp_size = &tmp;
 1176              		.loc 1 280 0
 1177 01b0 3B46     		mov	r3, r7
 1178 01b2 BB67     		str	r3, [r7, #120]
 281:main.c        ****                             r_packet.decoded_text_length = *tmp_size;
 1179              		.loc 1 281 0
 1180 01b4 BB6F     		ldr	r3, [r7, #120]
 1181 01b6 1B68     		ldr	r3, [r3]
 1182 01b8 BB62     		str	r3, [r7, #40]
 282:main.c        ****                             r_packet.decoded_text = (unsigned char*)calloc(r_packet.decoded_text_le
 1183              		.loc 1 282 0
 1184 01ba BB6A     		ldr	r3, [r7, #40]
 1185 01bc 0121     		movs	r1, #1
 1186 01be 1846     		mov	r0, r3
 1187 01c0 FFF7FEFF 		bl	calloc
 1188 01c4 0346     		mov	r3, r0
 1189 01c6 3B63     		str	r3, [r7, #48]
 283:main.c        ****                             
 284:main.c        ****                             //unsigned char p_d_Text[t_d_size];
 285:main.c        ****                             base64_decode(r_packet.encoded_text, r_packet.encoded_text_length, r_pa
 1190              		.loc 1 285 0
 1191 01c8 F86A     		ldr	r0, [r7, #44]
 1192 01ca 796A     		ldr	r1, [r7, #36]
 1193 01cc 3A6B     		ldr	r2, [r7, #48]
 1194 01ce BB6F     		ldr	r3, [r7, #120]
 1195 01d0 FFF7FEFF 		bl	base64_decode
 286:main.c        ****                             
 287:main.c        ****                             e_packet.decoded_cipher_text_length = crypto_secretbox_MACBYTES + r_pac
 1196              		.loc 1 287 0
 1197 01d4 BB6A     		ldr	r3, [r7, #40]
 1198 01d6 1033     		adds	r3, r3, #16
 1199 01d8 FB60     		str	r3, [r7, #12]
 288:main.c        ****                             e_packet.encoded_cipher_text_length = b64e_size(e_packet.decoded_cipher
 1200              		.loc 1 288 0
 1201 01da FB68     		ldr	r3, [r7, #12]
 1202 01dc 1846     		mov	r0, r3
 1203 01de FFF7FEFF 		bl	b64e_size
 1204 01e2 0346     		mov	r3, r0
 1205 01e4 3B61     		str	r3, [r7, #16]
 289:main.c        ****                             e_packet.decoded_cipher_text = (unsigned char*)calloc(e_packet.decoded_
 1206              		.loc 1 289 0
 1207 01e6 FB68     		ldr	r3, [r7, #12]
 1208 01e8 0421     		movs	r1, #4
 1209 01ea 1846     		mov	r0, r3
 1210 01ec FFF7FEFF 		bl	calloc
 1211 01f0 0346     		mov	r3, r0
 1212 01f2 3B62     		str	r3, [r7, #32]
 290:main.c        ****                             e_packet.encoded_cipher_text = (unsigned char*)calloc(e_packet.encoded_
 1213              		.loc 1 290 0
 1214 01f4 3B69     		ldr	r3, [r7, #16]
 1215 01f6 0421     		movs	r1, #4
 1216 01f8 1846     		mov	r0, r3
 1217 01fa FFF7FEFF 		bl	calloc
 1218 01fe 0346     		mov	r3, r0
 1219 0200 FB61     		str	r3, [r7, #28]
 291:main.c        ****                             
 292:main.c        ****                             crypto_secretbox_easy(e_packet.decoded_cipher_text, r_packet.decoded_te
 1220              		.loc 1 292 0
 1221 0202 386A     		ldr	r0, [r7, #32]
 1222 0204 396B     		ldr	r1, [r7, #48]
 1223 0206 BB6A     		ldr	r3, [r7, #40]
 1224 0208 4FF00004 		mov	r4, #0
 1225 020c 314A     		ldr	r2, .L62+8
 1226 020e 0192     		str	r2, [sp, #4]
 1227 0210 07F12402 		add	r2, r7, #36
 1228 0214 3732     		adds	r2, r2, #55
 1229 0216 0092     		str	r2, [sp]
 1230 0218 1A46     		mov	r2, r3
 1231 021a 2346     		mov	r3, r4
 1232 021c FFF7FEFF 		bl	crypto_secretbox_easy
 293:main.c        ****                                                     
 294:main.c        ****                             *tmp_size = e_packet.encoded_cipher_text_length;
 1233              		.loc 1 294 0
 1234 0220 3A69     		ldr	r2, [r7, #16]
 1235 0222 BB6F     		ldr	r3, [r7, #120]
 1236 0224 1A60     		str	r2, [r3]
 295:main.c        ****                             base64_encode(e_packet.decoded_cipher_text, e_packet.decoded_cipher_tex
 1237              		.loc 1 295 0
 1238 0226 386A     		ldr	r0, [r7, #32]
 1239 0228 F968     		ldr	r1, [r7, #12]
 1240 022a FA69     		ldr	r2, [r7, #28]
 1241 022c BB6F     		ldr	r3, [r7, #120]
 1242 022e 1B68     		ldr	r3, [r3]
 1243 0230 FFF7FEFF 		bl	base64_encode
 296:main.c        ****                             
 297:main.c        ****                             Complete_Encrypted_Packet(&e_packet);
 1244              		.loc 1 297 0
 1245 0234 07F10C03 		add	r3, r7, #12
 1246 0238 1846     		mov	r0, r3
 1247 023a FFF7FEFF 		bl	Complete_Encrypted_Packet
 298:main.c        ****                             
 299:main.c        ****                             unsigned char* send_buffer = (unsigned char*)calloc(3 + 4 + e_packet.en
 1248              		.loc 1 299 0
 1249 023e 3B69     		ldr	r3, [r7, #16]
 1250 0240 0733     		adds	r3, r3, #7
 1251 0242 0121     		movs	r1, #1
 1252 0244 1846     		mov	r0, r3
 1253 0246 FFF7FEFF 		bl	calloc
 1254 024a 0346     		mov	r3, r0
 1255 024c 7B67     		str	r3, [r7, #116]
 300:main.c        ****                             
 301:main.c        ****                             Send_Package(&e_packet, send_buffer);
 1256              		.loc 1 301 0
 1257 024e 07F10C03 		add	r3, r7, #12
 1258 0252 796F     		ldr	r1, [r7, #116]
 1259 0254 1846     		mov	r0, r3
 1260 0256 FFF7FEFF 		bl	Send_Package
 302:main.c        ****                             
 303:main.c        ****                             
 304:main.c        ****                             /***** EXIT POLICY ******/
 305:main.c        ****                             Clear_Package(&r_packet);
 1261              		.loc 1 305 0
 1262 025a 07F12403 		add	r3, r7, #36
 1263 025e 1846     		mov	r0, r3
 1264 0260 FFF7FEFF 		bl	Clear_Package
 306:main.c        ****                             Clear_Crypto_Package(&e_packet);
 1265              		.loc 1 306 0
 1266 0264 07F10C03 		add	r3, r7, #12
 1267 0268 1846     		mov	r0, r3
 1268 026a FFF7FEFF 		bl	Clear_Crypto_Package
 307:main.c        ****                             
 308:main.c        ****                             free(r_packet.encoded_text);
 1269              		.loc 1 308 0
 1270 026e FB6A     		ldr	r3, [r7, #44]
 1271 0270 1846     		mov	r0, r3
 1272 0272 FFF7FEFF 		bl	free
 309:main.c        ****                             free(r_packet.decoded_text);
 1273              		.loc 1 309 0
 1274 0276 3B6B     		ldr	r3, [r7, #48]
 1275 0278 1846     		mov	r0, r3
 1276 027a FFF7FEFF 		bl	free
 310:main.c        ****                             free(e_packet.encoded_cipher_text);
 1277              		.loc 1 310 0
 1278 027e FB69     		ldr	r3, [r7, #28]
 1279 0280 1846     		mov	r0, r3
 1280 0282 FFF7FEFF 		bl	free
 311:main.c        ****                             free(e_packet.decoded_cipher_text);
 1281              		.loc 1 311 0
 1282 0286 3B6A     		ldr	r3, [r7, #32]
 1283 0288 1846     		mov	r0, r3
 1284 028a FFF7FEFF 		bl	free
 312:main.c        ****                             free(send_buffer); 
 1285              		.loc 1 312 0
 1286 028e 786F     		ldr	r0, [r7, #116]
 1287 0290 FFF7FEFF 		bl	free
 1288              	.LBE11:
 1289 0294 16E0     		b	.L45
 1290              	.L57:
 313:main.c        ****                         }
 314:main.c        ****                         else
 315:main.c        ****                         {
 316:main.c        ****                             /***** EXIT POLICY ******/
 317:main.c        ****                             free(r_packet.decoded_text);
 1291              		.loc 1 317 0
 1292 0296 3B6B     		ldr	r3, [r7, #48]
 1293 0298 1846     		mov	r0, r3
 1294 029a FFF7FEFF 		bl	free
 1295 029e 00E0     		b	.L54
 1296              	.L61:
 1297              	.LBB12:
 267:main.c        ****                             }
 1298              		.loc 1 267 0
 1299 02a0 00BF     		nop
 1300              	.L54:
 1301              	.LBE12:
 318:main.c        ****                             INVALID:
 319:main.c        ****                             free(r_packet.encoded_text);
 1302              		.loc 1 319 0
 1303 02a2 FB6A     		ldr	r3, [r7, #44]
 1304 02a4 1846     		mov	r0, r3
 1305 02a6 FFF7FEFF 		bl	free
 1306 02aa 00E0     		b	.L50
 1307              	.L60:
 253:main.c        ****                         }
 1308              		.loc 1 253 0
 1309 02ac 00BF     		nop
 1310              	.L50:
 320:main.c        ****                             INVALID1:                            
 321:main.c        ****                             Clear_Package(&r_packet);
 1311              		.loc 1 321 0
 1312 02ae 07F12403 		add	r3, r7, #36
 1313 02b2 1846     		mov	r0, r3
 1314 02b4 FFF7FEFF 		bl	Clear_Package
 1315 02b8 04E0     		b	.L45
 1316              	.L48:
 1317              	.LBE9:
 322:main.c        ****                         }
 323:main.c        ****                         
 324:main.c        ****                     }
 325:main.c        ****                 
 326:main.c        ****                     else
 327:main.c        ****                     {
 328:main.c        ****                         /***** EXIT POLICY ******/
 329:main.c        ****                         Clear_Package(&r_packet);
 1318              		.loc 1 329 0
 1319 02ba 07F12403 		add	r3, r7, #36
 1320 02be 1846     		mov	r0, r3
 1321 02c0 FFF7FEFF 		bl	Clear_Package
 1322              	.L45:
 330:main.c        ****                     }
 331:main.c        ****                 
 332:main.c        **** 
 333:main.c        ****             
 334:main.c        ****             }
 335:main.c        ****             
 336:main.c        ****         }
 337:main.c        ****         Clear_USB();
 1323              		.loc 1 337 0
 1324 02c4 FFF7FEFF 		bl	Clear_USB
 229:main.c        ****         
 1325              		.loc 1 229 0
 1326 02c8 A1E6     		b	.L59
 1327              	.L63:
 1328 02ca 00BF     		.align	2
 1329              	.L62:
 1330 02cc 00000000 		.word	VirtualSerial_CDC_Interface
 1331 02d0 00000000 		.word	Bytes
 1332 02d4 00000000 		.word	key
 1333              		.cfi_endproc
 1334              	.LFE200:
 1336              		.text
 1337              	.Letext0:
 1338              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1339              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1340              		.file 4 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1341              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 1342              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 1343              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 1344              		.file 8 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Include/core_cm4.h"
 1345              		.file 9 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/system_X
 1346              		.file 10 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/XMC4500
 1347              		.file 11 "/usr/arm-none-eabi/include/stdlib.h"
 1348              		.file 12 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd_regs.h"
 1349              		.file 13 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc4_scu.h"
 1350              		.file 14 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd.h"
 1351              		.file 15 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/U
 1352              		.file 16 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 1353              		.file 17 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 1354              		.file 18 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 1355              		.file 19 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/USBTask.h
 1356              		.file 20 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Class/Device/.
 1357              		.file 21 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Class/Device/C
 1358              		.file 22 "VirtualSerial.h"
 1359              		.file 23 "../../sodium/include/sodium/randombytes.h"
 1360              		.file 24 "../../sodium/include/sodium/randombytes_salsa20_random.h"
 1361              		.file 25 "../../sodium/include/sodium/randombytes_sysrandom.h"
 1362              		.file 26 "testkey.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccJtUpre.s:21     .data:0000000000000000 testkey
     /tmp/ccJtUpre.s:18     .data:0000000000000000 $d
     /tmp/ccJtUpre.s:58     .data:0000000000000020 testkey_len
     /tmp/ccJtUpre.s:65     .rodata:0000000000000000 HEADER_TEXT_LENGTH
     /tmp/ccJtUpre.s:62     .rodata:0000000000000000 $d
     /tmp/ccJtUpre.s:71     .rodata:0000000000000004 HEADER_NONCE
     /tmp/ccJtUpre.s:77     .rodata:0000000000000008 HEADER_TEXT_D_LENGTH
     /tmp/ccJtUpre.s:83     .rodata:000000000000000c HEADER_D_NONCE
     /tmp/ccJtUpre.s:90     .bss:0000000000000000 Bytes
     /tmp/ccJtUpre.s:87     .bss:0000000000000000 $d
     /tmp/ccJtUpre.s:97     .rodata:0000000000000010 clock_config
     /tmp/ccJtUpre.s:113    .text.SystemCoreClockSetup:0000000000000000 $t
     /tmp/ccJtUpre.s:120    .text.SystemCoreClockSetup:0000000000000000 SystemCoreClockSetup
     /tmp/ccJtUpre.s:161    .text.SystemCoreClockSetup:0000000000000030 $d
     /tmp/ccJtUpre.s:166    .text.write_text:0000000000000000 $t
     /tmp/ccJtUpre.s:173    .text.write_text:0000000000000000 write_text
     /tmp/ccJtUpre.s:268    .text.write_text:0000000000000078 $d
     /tmp/ccJtUpre.s:274    .text.uchar_to_int:0000000000000000 $t
     /tmp/ccJtUpre.s:281    .text.uchar_to_int:0000000000000000 uchar_to_int
     /tmp/ccJtUpre.s:337    .bss:0000000000000004 key
     /tmp/ccJtUpre.s:340    .text.get_chipid:0000000000000000 $t
     /tmp/ccJtUpre.s:347    .text.get_chipid:0000000000000000 get_chipid
     /tmp/ccJtUpre.s:416    .text.get_chipid:0000000000000048 $d
     /tmp/ccJtUpre.s:422    .text.Clear_USB:0000000000000000 $t
     /tmp/ccJtUpre.s:429    .text.Clear_USB:0000000000000000 Clear_USB
     /tmp/ccJtUpre.s:478    .text.Clear_USB:0000000000000028 $d
     /tmp/ccJtUpre.s:483    .text.Complete_Encrypted_Packet:0000000000000000 $t
     /tmp/ccJtUpre.s:490    .text.Complete_Encrypted_Packet:0000000000000000 Complete_Encrypted_Packet
     /tmp/ccJtUpre.s:551    .text.Send_Package:0000000000000000 $t
     /tmp/ccJtUpre.s:558    .text.Send_Package:0000000000000000 Send_Package
     /tmp/ccJtUpre.s:675    .text.Send_Package:0000000000000098 $d
     /tmp/ccJtUpre.s:680    .text.Clear_Package:0000000000000000 $t
     /tmp/ccJtUpre.s:687    .text.Clear_Package:0000000000000000 Clear_Package
     /tmp/ccJtUpre.s:844    .text.Clear_Crypto_Package:0000000000000000 $t
     /tmp/ccJtUpre.s:851    .text.Clear_Crypto_Package:0000000000000000 Clear_Crypto_Package
     /tmp/ccJtUpre.s:939    .text.main:0000000000000000 $t
     /tmp/ccJtUpre.s:946    .text.main:0000000000000000 main
     /tmp/ccJtUpre.s:1330   .text.main:00000000000002cc $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.5590a0387b3547da4048f1dea7982a7f
                           .group:0000000000000000 wm4.USB.h.376.cfdb9ecb25c70fec676f585dede264a7
                           .group:0000000000000000 wm4.Common.h.60.c2f00e237f5994003db83c2422602b22
                           .group:0000000000000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:0000000000000000 wm4.features.h.33.863f3be0b2e521e624fcc7d6fa31d2ca
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:0000000000000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:0000000000000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:0000000000000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.BoardTypes.h.52.ca64813ccee737bcc2115eab5e075fdb
                           .group:0000000000000000 wm4.CompilerSpecific.h.55.4a5e5ff77cd35e49c89cf2115251aee0
                           .group:0000000000000000 wm4.Attributes.h.56.73b3ee26b0836c2dec569a5fa6f1b355
                           .group:0000000000000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:0000000000000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:0000000000000000 wm4.core_cm4.h.32.6c6eb1c8daeca23ce7ba79c8e8120d52
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.91b63349961c35637933e4fba51b867b
                           .group:0000000000000000 wm4.core_cm4.h.172.fdd5a388a160bb6ff767b7d7ee212268
                           .group:0000000000000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:0000000000000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:0000000000000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:0000000000000000 wm4.xmc_common.h.92.3f4336a80569affab05a81145b87c2fc
                           .group:0000000000000000 wm4.Endianness.h.57.3ac00c5468f4b91b806a0e6dba047e9c
                           .group:0000000000000000 wm4.Common.h.105.4b937a9cc9dcdb26c3f07541b0b763a8
                           .group:0000000000000000 wm4.USBController.h.49.cbfc73805155b6fff6267400af3f4eec
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.xmc_usbd_regs.h.80.57c6c85fa0ecbc9f8327ce445aebb9bc
                           .group:0000000000000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51
                           .group:0000000000000000 wm4.xmc_usbd.h.122.ce57a9e6a9da48ee33ece02813c49593
                           .group:0000000000000000 wm4.USBController_XMC4000.h.71.902f2653e09cb8b25245faa82cc6b907
                           .group:0000000000000000 wm4.StdDescriptors.h.73.7d17e8be7a73b855fc0f8827303b7597
                           .group:0000000000000000 wm4.Endpoint.h.73.3734de3e84ab23fb43d81f41fba620ec
                           .group:0000000000000000 wm4.Device_XMC4000.h.86.6803bdd99d84e764a570256c87a24d0a
                           .group:0000000000000000 wm4.StdRequestType.h.50.461dce94a3ee1fa9ff31ec5f28bd9699
                           .group:0000000000000000 wm4.ConfigDescriptors.h.51.0d67ebf453774188abf5a503ba8f6735
                           .group:0000000000000000 wm4.CDCClass.h.61.0d41ba255f7ce6f076fd610d8396dd1f
                           .group:0000000000000000 wm4.CDCClassCommon.h.72.14ca578d8547e19a8a0c0d2d328483bd
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:0000000000000000 wm4.HIDClass.h.62.6bb32c59177b21a83b8e65c5a1b0a615
                           .group:0000000000000000 wm4.HIDReportData.h.47.f13f4956396e0bec70835fe634fcc24d
                           .group:0000000000000000 wm4.HIDParser.h.88.4b86fe94cb8d01713592cdd0391b606b
                           .group:0000000000000000 wm4.HIDClassCommon.h.71.a60cdf9d7cd69289f43dde215b509193
                           .group:0000000000000000 wm4.MassStorageClass.h.61.e9235f3bd090b77f36343f082ef93107
                           .group:0000000000000000 wm4.MassStorageClassCommon.h.51.6aefecf288eb3c3c6c9bde61e26dd765
                           .group:0000000000000000 wm4.Descriptors.h.44.84a4fd312957d0d42fb6aaa001850ba4
                           .group:0000000000000000 wm4.export.h.3.069642e50a739d7e8bd572e0f5b91055
                           .group:0000000000000000 wm4.version.h.7.67bf2b3b67cf03da91c1caf057b82007
                           .group:0000000000000000 wm4.crypto_aead_aes256gcm.h.37.f06c3a2a9916b28d25ce521d8b6d30e4
                           .group:0000000000000000 wm4.crypto_aead_chacha20poly1305.h.16.67f32ece6ebd6cc049f0715e6b0e69ad
                           .group:0000000000000000 wm4.crypto_aead_xchacha20poly1305.h.14.207cc4aaabdc929ff2099eb0d69ab920
                           .group:0000000000000000 wm4.crypto_auth_hmacsha512.h.15.eff7eeeca3f76c97d40891c6c26e8d71
                           .group:0000000000000000 wm4.crypto_auth_hmacsha512256.h.15.b6821f43a6086964daa3251b570bc8c2
                           .group:0000000000000000 wm4.crypto_auth.h.16.9400a02c736a8b1e08e491366cd27257
                           .group:0000000000000000 wm4.crypto_auth_hmacsha256.h.15.0077d2e439598abd38aec2ace6d6cdd5
                           .group:0000000000000000 wm4.crypto_stream_xsalsa20.h.23.33c3ee5c33e5737b167c543228736927
                           .group:0000000000000000 wm4.crypto_box_curve25519xsalsa20poly1305.h.15.47fdbfcdf23b14f859f1ab73a31d81d2
                           .group:0000000000000000 wm4.crypto_box.h.23.36db1a3020b3ecbf502815296470a53b
                           .group:0000000000000000 wm4.crypto_core_hsalsa20.h.11.6f5bd4777af7294e0d853efc87225dec
                           .group:0000000000000000 wm4.crypto_core_hchacha20.h.11.2c628b8667ba9d0d71939f1e8d47caaa
                           .group:0000000000000000 wm4.crypto_core_salsa20.h.11.7ce30578633b77708df2486e23cf2d41
                           .group:0000000000000000 wm4.crypto_core_salsa2012.h.11.c0d7428a1384f8b0cbb03fb392196513
                           .group:0000000000000000 wm4.crypto_core_salsa208.h.11.2c518617446b00e93a2e8c0c6a2cb17d
                           .group:0000000000000000 wm4.crypto_generichash_blake2b.h.38.4b6d675038c455959c90c43a75693d35
                           .group:0000000000000000 wm4.crypto_generichash.h.16.771391b6badc9219de7753c54a91592a
                           .group:0000000000000000 wm4.crypto_hash.h.23.c22d9cbc719debf3450c41dc1cb030f6
                           .group:0000000000000000 wm4.crypto_kdf_blake2b.h.17.2fdb3afa142f0f4e2d520a0f2ed3aac9
                           .group:0000000000000000 wm4.crypto_kdf.h.17.5c8c60d3d3b88115f88aea210415241a
                           .group:0000000000000000 wm4.crypto_kx.h.15.b446ee9d39f22111a7b84c74adc80539
                           .group:0000000000000000 wm4.crypto_onetimeauth_poly1305.h.2.97bcf3b0ea5506ed126bc3828081b2c6
                           .group:0000000000000000 wm4.crypto_onetimeauth.h.21.dab310d1ac5639131792e5f80761f399
                           .group:0000000000000000 wm4.limits.h.2.a76e572559edc4d4305b1cf624158ea8
                           .group:0000000000000000 wm4.limits.h.60.56a1ae353e2028a24298ec6463b8b593
                           .group:0000000000000000 wm4.crypto_pwhash_argon2i.h.17.7efc8566fd80d0aa25a92905ba299d17
                           .group:0000000000000000 wm4.crypto_pwhash_argon2id.h.17.3776a3d43da07ec2a2ce4f641491ac5c
                           .group:0000000000000000 wm4.crypto_pwhash.h.17.e54c9eb9913f339a6ab67545d97d3cb6
                           .group:0000000000000000 wm4.crypto_scalarmult_curve25519.h.12.a04608b0d5b783eeaeea57e826f42071
                           .group:0000000000000000 wm4.crypto_scalarmult.h.13.4b20e331e974ed3d97708f65e3d09ff7
                           .group:0000000000000000 wm4.crypto_secretbox_xsalsa20poly1305.h.15.c9d857dc1ea465bb2950509a5d6827a2
                           .group:0000000000000000 wm4.crypto_secretbox.h.16.74468d3816cf4274cae7e8825a2ac49f
                           .group:0000000000000000 wm4.crypto_stream_chacha20.h.23.7f39f7dfc92696b60601f2c683245511
                           .group:0000000000000000 wm4.crypto_secretstream_xchacha20poly1305.h.17.979cddb9e5bdd495ebbc5568661cf9c5
                           .group:0000000000000000 wm4.crypto_shorthash_siphash24.h.16.818ac93010098b15c9530c60724e71cf
                           .group:0000000000000000 wm4.crypto_shorthash.h.16.cf5f829a6555012edb52b2ee5653a691
                           .group:0000000000000000 wm4.crypto_sign_ed25519.h.22.07782bf1d908046d9a70e5cf10af901c
                           .group:0000000000000000 wm4.crypto_sign.h.28.a3247a8a761034c27bfcc3699825dc31
                           .group:0000000000000000 wm4.crypto_stream.h.24.5deb85fa59e80e8dc0f5f7ac9213cae8
                           .group:0000000000000000 wm4.crypto_stream_salsa20.h.23.fc01df25aec77276d8dd631cf7c6b2db
                           .group:0000000000000000 wm4.randombytes.h.28.d92c4e5a57bf52557a9782c27b663a62
                           .group:0000000000000000 wm4.utils.h.17.31ca9da2b3c3d17cb1ce98c0f528b530
                           .group:0000000000000000 wm4.crypto_stream_xchacha20.h.23.1c98e48d07b332b3e5362ddf35d6f170
                           .group:0000000000000000 wm4.crypto_box_curve25519xchacha20poly1305.h.16.c730b274b2e8e0087c78faa13784b0ca
                           .group:0000000000000000 wm4.crypto_secretbox_xchacha20poly1305.h.15.79de7bec24244041b03221fe64a1405a
                           .group:0000000000000000 wm4.crypto_pwhash_scryptsalsa208sha256.h.17.3af592158e8339e18e48fc8487319250
                           .group:0000000000000000 wm4.crypto_stream_salsa2012.h.22.08bdb7be901746f92b3b3e7fcdc77e17
                           .group:0000000000000000 wm4.crypto_stream_salsa208.h.22.9a5ceb273178e4c72d667eeaa8da7b04

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_Init
XMC_SCU_CLOCK_EnableUsbPll
XMC_SCU_CLOCK_StartUsbPll
XMC_SCU_CLOCK_SetUsbClockDivider
XMC_SCU_CLOCK_SetUsbClockSource
XMC_SCU_CLOCK_EnableClock
SystemCoreClockUpdate
CDC_Device_ReceiveByte
isbase64
VirtualSerial_CDC_Interface
g_chipid
CDC_Device_USBTask
base64_encode
CDC_Device_SendData
USB_Init
CDC_Device_BytesReceived
base64_decode
calloc
b64d_size
b64e_size
crypto_secretbox_easy
free
