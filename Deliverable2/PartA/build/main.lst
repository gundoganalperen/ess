
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073a0  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  5 .data         00000870  20000000  0c0073a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000738  20000870  0c007c10  00020870  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020870  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c007c10  00030000  2**2
                  ALLOC
 10 .debug_aranges 000008c0  00000000  00000000  00020870  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001dc1b  00000000  00000000  00021130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002971  00000000  00000000  0003ed4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009cf2  00000000  00000000  000416bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027a4  00000000  00000000  0004b3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0007eb36  00000000  00000000  0004db54  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004842  00000000  00000000  000cc68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007d8  00000000  00000000  000d0ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000065b  00000000  00000000  000d16a4  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001bd00  00000000  00000000  000d1cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	e9 05 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0073a0 	.word	0x0c0073a0
 800024c:	20000000 	.word	0x20000000
 8000250:	00000870 	.word	0x00000870
 8000254:	0c007c10 	.word	0x0c007c10
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0073a0 	.word	0x0c0073a0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0073a0 	.word	0x0c0073a0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000870 	.word	0x20000870
 800027c:	00000738 	.word	0x00000738
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800
    .thumb
 8000294:	08005d29 	.word	0x08005d29
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080061a1 	.word	0x080061a1
    ldr  r0, =main
 80002ac:	080003e5 	.word	0x080003e5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <append>:
#include "VirtualSerial.h"

uint8_t *append(uint8_t **old, size_t *oldLen, uint8_t *new, size_t newLen) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
 80002be:	603b      	str	r3, [r7, #0]
  uint8_t *buf = realloc(*old, (*oldLen) + newLen);
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	4619      	mov	r1, r3
 80002ce:	f006 fbf7 	bl	8006ac0 <realloc>
 80002d2:	6178      	str	r0, [r7, #20]
  if(buf) {
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d012      	beq.n	8000300 <append+0x4e>
    *old = buf;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	601a      	str	r2, [r3, #0]
    memcpy((*old) + (*oldLen), new, newLen);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f006 fa8e 	bl	8006810 <memcpy>
    *oldLen += newLen;
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	601a      	str	r2, [r3, #0]
  }
  return buf;
 8000300:	697b      	ldr	r3, [r7, #20]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <ReceiveData>:

int ReceiveData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, uint8_t **buf, size_t *len) {
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
  int16_t rec = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	82bb      	strh	r3, [r7, #20]

  *len = (size_t) CDC_Device_BytesReceived(CDCInterfaceInfo);
 800031a:	68f8      	ldr	r0, [r7, #12]
 800031c:	f003 f880 	bl	8003420 <CDC_Device_BytesReceived>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	601a      	str	r2, [r3, #0]
  if(*len == 0) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <ReceiveData+0x2a>
    return 1;
 8000330:	2301      	movs	r3, #1
 8000332:	e032      	b.n	800039a <ReceiveData+0x90>
  }

  *buf = (uint8_t *) calloc(*len, sizeof(uint8_t));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f005 fef2 	bl	8006124 <calloc>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	601a      	str	r2, [r3, #0]
  if(*buf == NULL) {
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d101      	bne.n	8000354 <ReceiveData+0x4a>
    return 2;
 8000350:	2302      	movs	r3, #2
 8000352:	e022      	b.n	800039a <ReceiveData+0x90>
  }

  for(uint16_t i=0; i < *len; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	82fb      	strh	r3, [r7, #22]
 8000358:	e019      	b.n	800038e <ReceiveData+0x84>
    rec = CDC_Device_ReceiveByte(CDCInterfaceInfo);
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f003 f8da 	bl	8003514 <CDC_Device_ReceiveByte>
 8000360:	4603      	mov	r3, r0
 8000362:	82bb      	strh	r3, [r7, #20]
    if(rec >= 0) {
 8000364:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000368:	2b00      	cmp	r3, #0
 800036a:	db07      	blt.n	800037c <ReceiveData+0x72>
      (*buf)[i] = rec & 0xFF;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	8afb      	ldrh	r3, [r7, #22]
 8000372:	4413      	add	r3, r2
 8000374:	8aba      	ldrh	r2, [r7, #20]
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e005      	b.n	8000388 <ReceiveData+0x7e>
    } else {
      *len = i+1;
 800037c:	8afb      	ldrh	r3, [r7, #22]
 800037e:	3301      	adds	r3, #1
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
      break;
 8000386:	e007      	b.n	8000398 <ReceiveData+0x8e>
  for(uint16_t i=0; i < *len; i++) {
 8000388:	8afb      	ldrh	r3, [r7, #22]
 800038a:	3301      	adds	r3, #1
 800038c:	82fb      	strh	r3, [r7, #22]
 800038e:	8afa      	ldrh	r2, [r7, #22]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d3e0      	bcc.n	800035a <ReceiveData+0x50>
    }
  }
  return 0;
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <SendData>:

int SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, uint8_t *buf, size_t len) {
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b08e      	sub	sp, #56	; 0x38
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  uint8_t buff[40] = { 0 };
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f006 fb28 	bl	8006a0c <memset>
  memcpy(buff, buf, len);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	68b9      	ldr	r1, [r7, #8]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f006 fa23 	bl	8006810 <memcpy>
  return CDC_Device_SendData(CDCInterfaceInfo, buff, len);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	f002 ff49 	bl	800326c <CDC_Device_SendData>
 80003da:	4603      	mov	r3, r0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3738      	adds	r7, #56	; 0x38
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <main>:

int main(void) {
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b08b      	sub	sp, #44	; 0x2c
 80003e8:	af00      	add	r7, sp, #0
  char teststring[] = "Hello World!";
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <main+0xb0>)
 80003ec:	f107 0410 	add.w	r4, r7, #16
 80003f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003f2:	c407      	stmia	r4!, {r0, r1, r2}
 80003f4:	7023      	strb	r3, [r4, #0]
  uint8_t *data = NULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  size_t dataLen = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]

  USB_Init();
 80003fe:	f000 f8fd 	bl	80005fc <USB_Init>

  while (1) {
    if(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) > 0) {
 8000402:	4825      	ldr	r0, [pc, #148]	; (8000498 <main+0xb4>)
 8000404:	f003 f80c 	bl	8003420 <CDC_Device_BytesReceived>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d018      	beq.n	8000440 <main+0x5c>
      uint8_t *new = NULL;
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
      size_t newLen = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
      if(ReceiveData(&VirtualSerial_CDC_Interface, &new, &newLen) == 0) {
 8000416:	463a      	mov	r2, r7
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	481e      	ldr	r0, [pc, #120]	; (8000498 <main+0xb4>)
 800041e:	f7ff ff74 	bl	800030a <ReceiveData>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d107      	bne.n	8000438 <main+0x54>
        append(&data, &dataLen, new, newLen);
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	f107 0108 	add.w	r1, r7, #8
 8000430:	f107 000c 	add.w	r0, r7, #12
 8000434:	f7ff ff3d 	bl	80002b2 <append>
      }
      free(new);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	f005 fee0 	bl	8006200 <free>
    }
    if(dataLen > 0) {
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d021      	beq.n	800048a <main+0xa6>
      uint8_t *lf = memchr(data, '\n', dataLen);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	210a      	movs	r1, #10
 800044c:	4618      	mov	r0, r3
 800044e:	f006 f98f 	bl	8006770 <memchr>
 8000452:	6278      	str	r0, [r7, #36]	; 0x24
      if(lf) {
 8000454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000456:	2b00      	cmp	r3, #0
 8000458:	d017      	beq.n	800048a <main+0xa6>
        size_t lineLen = lf - data + 1; //+1 to copy the \n with the line
 800045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	3301      	adds	r3, #1
 8000462:	623b      	str	r3, [r7, #32]
        SendData(&VirtualSerial_CDC_Interface, data, lineLen);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	6a3a      	ldr	r2, [r7, #32]
 8000468:	4619      	mov	r1, r3
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <main+0xb4>)
 800046c:	f7ff ff99 	bl	80003a2 <SendData>
        memmove(data, lf + 1, dataLen - lineLen);
 8000470:	68f8      	ldr	r0, [r7, #12]
 8000472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000474:	1c59      	adds	r1, r3, #1
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	461a      	mov	r2, r3
 800047e:	f006 fa61 	bl	8006944 <memmove>
        dataLen -= lineLen;
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	6a3b      	ldr	r3, [r7, #32]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	60bb      	str	r3, [r7, #8]
      }
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <main+0xb4>)
 800048c:	f002 fe6e 	bl	800316c <CDC_Device_USBTask>
    if(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) > 0) {
 8000490:	e7b7      	b.n	8000402 <main+0x1e>
 8000492:	bf00      	nop
 8000494:	08007254 	.word	0x08007254
 8000498:	20000000 	.word	0x20000000

0800049c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <__NVIC_GetPriorityGrouping+0x18>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	f003 0307 	and.w	r3, r3, #7
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db0b      	blt.n	80004e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004ca:	4909      	ldr	r1, [pc, #36]	; (80004f0 <__NVIC_EnableIRQ+0x38>)
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	095b      	lsrs	r3, r3, #5
 80004d2:	79fa      	ldrb	r2, [r7, #7]
 80004d4:	f002 021f 	and.w	r2, r2, #31
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db0c      	blt.n	8000520 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000506:	4909      	ldr	r1, [pc, #36]	; (800052c <__NVIC_ClearPendingIRQ+0x38>)
 8000508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050c:	095b      	lsrs	r3, r3, #5
 800050e:	79fa      	ldrb	r2, [r7, #7]
 8000510:	f002 021f 	and.w	r2, r2, #31
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	3360      	adds	r3, #96	; 0x60
 800051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000e100 	.word	0xe000e100

08000530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0a      	blt.n	800055a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	490d      	ldr	r1, [pc, #52]	; (800057c <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	440b      	add	r3, r1
 8000554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000558:	e00a      	b.n	8000570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	4909      	ldr	r1, [pc, #36]	; (8000580 <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	440b      	add	r3, r1
 800056e:	761a      	strb	r2, [r3, #24]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000e100 	.word	0xe000e100
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	f1c3 0307 	rsb	r3, r3, #7
 800059e:	2b06      	cmp	r3, #6
 80005a0:	bf28      	it	cs
 80005a2:	2306      	movcs	r3, #6
 80005a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3306      	adds	r3, #6
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d902      	bls.n	80005b4 <NVIC_EncodePriority+0x30>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	e000      	b.n	80005b6 <NVIC_EncodePriority+0x32>
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	2201      	movs	r2, #1
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	401a      	ands	r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	2101      	movs	r1, #1
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	1e59      	subs	r1, r3, #1
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	; 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&USB_runtime);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <USB0_0_IRQHandler+0x10>)
 80005ee:	f001 fcc3 	bl	8001f78 <XMC_USBD_IRQHandler>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000020 	.word	0x20000020

080005fc <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  USBD_Initialize(&USB_runtime);
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <USB_Init+0x4c>)
 8000602:	f000 fdb7 	bl	8001174 <USBD_Initialize>
	
  /* Interrupts configuration*/
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
 8000606:	f7ff ff49 	bl	800049c <__NVIC_GetPriorityGrouping>
 800060a:	4603      	mov	r3, r0
 800060c:	2200      	movs	r2, #0
 800060e:	213f      	movs	r1, #63	; 0x3f
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffb7 	bl	8000584 <NVIC_EncodePriority>
 8000616:	4603      	mov	r3, r0
 8000618:	4619      	mov	r1, r3
 800061a:	206b      	movs	r0, #107	; 0x6b
 800061c:	f7ff ff88 	bl	8000530 <__NVIC_SetPriority>
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8000620:	206b      	movs	r0, #107	; 0x6b
 8000622:	f7ff ff67 	bl	80004f4 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8000626:	206b      	movs	r0, #107	; 0x6b
 8000628:	f7ff ff46 	bl	80004b8 <__NVIC_EnableIRQ>

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <USB_Init+0x50>)
 800062e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000632:	619a      	str	r2, [r3, #24]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <USB_Init+0x50>)
 8000636:	2208      	movs	r2, #8
 8000638:	779a      	strb	r2, [r3, #30]
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <USB_Init+0x54>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000020 	.word	0x20000020
 800064c:	20000000 	.word	0x20000000
 8000650:	20000ba8 	.word	0x20000ba8

08000654 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  if(device.IsConfigured)
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <EVENT_USB_Device_Reset+0x2c>)
 8000676:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <EVENT_USB_Device_Reset+0x26>
  {
    USB_Init();
 8000684:	f7ff ffba 	bl	80005fc <USB_Init>
    device.IsConfigured=0;
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <EVENT_USB_Device_Reset+0x2c>)
 800068a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800068e:	f36f 0300 	bfc	r3, #0, #1
 8000692:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
  }
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000ba8 	.word	0x20000ba8

080006a0 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 80006a4:	2240      	movs	r2, #64	; 0x40
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 80006a8:	2081      	movs	r0, #129	; 0x81
 80006aa:	f000 fdd9 	bl	8001260 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	490b      	ldr	r1, [pc, #44]	; (80006e0 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 80006b2:	2082      	movs	r0, #130	; 0x82
 80006b4:	f000 fdd4 	bl	8001260 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	490a      	ldr	r1, [pc, #40]	; (80006e4 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 fdcf 	bl	8001260 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 80006c4:	f002 fd0e 	bl	80030e4 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 80006ca:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000928 	.word	0x20000928
 80006e0:	20000968 	.word	0x20000968
 80006e4:	200008e8 	.word	0x200008e8
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000ba8 	.word	0x20000ba8

080006f0 <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <EVENT_USB_Device_ControlRequest+0x10>)
 80006f6:	f002 fbf5 	bl	8002ee4 <CDC_Device_ProcessControlRequest>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	603a      	str	r2, [r7, #0]
 800073a:	80fb      	strh	r3, [r7, #6]
 800073c:	460b      	mov	r3, r1
 800073e:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8000750:	2300      	movs	r3, #0
 8000752:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType)
 8000754:	7a7b      	ldrb	r3, [r7, #9]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d008      	beq.n	800076c <CALLBACK_USB_GetDescriptor+0x3c>
 800075a:	2b03      	cmp	r3, #3
 800075c:	d00b      	beq.n	8000776 <CALLBACK_USB_GetDescriptor+0x46>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d121      	bne.n	80007a6 <CALLBACK_USB_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <CALLBACK_USB_GetDescriptor+0x8c>)
 8000764:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000766:	2312      	movs	r3, #18
 8000768:	817b      	strh	r3, [r7, #10]
			break;
 800076a:	e01c      	b.n	80007a6 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <CALLBACK_USB_GetDescriptor+0x90>)
 800076e:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000770:	233e      	movs	r3, #62	; 0x3e
 8000772:	817b      	strh	r3, [r7, #10]
			break;
 8000774:	e017      	b.n	80007a6 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_String:
			switch (DescriptorNumber)
 8000776:	7a3b      	ldrb	r3, [r7, #8]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d009      	beq.n	8000790 <CALLBACK_USB_GetDescriptor+0x60>
 800077c:	2b02      	cmp	r3, #2
 800077e:	d00c      	beq.n	800079a <CALLBACK_USB_GetDescriptor+0x6a>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d000      	beq.n	8000786 <CALLBACK_USB_GetDescriptor+0x56>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000784:	e00e      	b.n	80007a4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &LanguageString;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <CALLBACK_USB_GetDescriptor+0x94>)
 8000788:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 800078a:	2304      	movs	r3, #4
 800078c:	817b      	strh	r3, [r7, #10]
					break;
 800078e:	e009      	b.n	80007a4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ManufacturerString;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <CALLBACK_USB_GetDescriptor+0x98>)
 8000792:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000794:	2358      	movs	r3, #88	; 0x58
 8000796:	817b      	strh	r3, [r7, #10]
					break;
 8000798:	e004      	b.n	80007a4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ProductString;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <CALLBACK_USB_GetDescriptor+0x9c>)
 800079c:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 800079e:	2320      	movs	r3, #32
 80007a0:	817b      	strh	r3, [r7, #10]
					break;
 80007a2:	bf00      	nop
			break;
 80007a4:	bf00      	nop
	}

	*DescriptorAddress = Address;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	601a      	str	r2, [r3, #0]
	return Size;
 80007ac:	897b      	ldrh	r3, [r7, #10]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	08007264 	.word	0x08007264
 80007c0:	08007278 	.word	0x08007278
 80007c4:	080072b8 	.word	0x080072b8
 80007c8:	080072c0 	.word	0x080072c0
 80007cc:	0800731c 	.word	0x0800731c

080007d0 <SystemCoreClockSetup>:
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
};

void SystemCoreClockSetup(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <SystemCoreClockSetup+0x3c>)
 80007d6:	f003 fd61 	bl	800429c <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 80007da:	f004 fa25 	bl	8004c28 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	2002      	movs	r0, #2
 80007e2:	f004 fa45 	bl	8004c70 <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80007e6:	2004      	movs	r0, #4
 80007e8:	f004 f95c 	bl	8004aa4 <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f004 f861 	bl	80048b4 <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f004 f9b0 	bl	8004b58 <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
 80007f8:	f005 fbe4 	bl	8005fc4 <SystemCoreClockUpdate>

    /* add some other stuff here to stealthy execute it without leaving trace in the main.c */

    /* Pull P2.10 low to allow the ESS control board to recognize if a system reset was initiated. */
    *((uint32_t *) (0x48028200+0x18)) |= 0x18<<19; /* set P2.10 as open-drain output */
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <SystemCoreClockSetup+0x40>)
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SystemCoreClockSetup+0x40>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08007340 	.word	0x08007340
 8000810:	48028218 	.word	0x48028218

08000814 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <USBD_HandleEP0_Stall+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	2101      	movs	r1, #1
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	4798      	blx	r3
	device.EP0_State = IDLE;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <USBD_HandleEP0_Stall+0x28>)
 8000826:	2201      	movs	r2, #1
 8000828:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <USBD_HandleEP0_Stall+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	2118      	movs	r1, #24
 8000834:	2000      	movs	r0, #0
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000ba8 	.word	0x20000ba8

08000840 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	817b      	strh	r3, [r7, #10]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 800084e:	4bab      	ldr	r3, [pc, #684]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000850:	885b      	ldrh	r3, [r3, #2]
 8000852:	b29b      	uxth	r3, r3
 8000854:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8000856:	f7ff ff4b 	bl	80006f0 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 800085a:	4ba9      	ldr	r3, [pc, #676]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 800085c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000860:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 81fd 	beq.w	8000c66 <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 800086c:	4ba3      	ldr	r3, [pc, #652]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b0c      	cmp	r3, #12
 8000872:	f200 81ea 	bhi.w	8000c4a <USB_Device_ProcessControlRequest+0x40a>
 8000876:	a201      	add	r2, pc, #4	; (adr r2, 800087c <USB_Device_ProcessControlRequest+0x3c>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	080009f3 	.word	0x080009f3
 8000880:	080008b1 	.word	0x080008b1
 8000884:	08000c4b 	.word	0x08000c4b
 8000888:	08000b7f 	.word	0x08000b7f
 800088c:	08000c4b 	.word	0x08000c4b
 8000890:	08000ad7 	.word	0x08000ad7
 8000894:	08000957 	.word	0x08000957
 8000898:	08000b45 	.word	0x08000b45
 800089c:	08000947 	.word	0x08000947
 80008a0:	08000b0d 	.word	0x08000b0d
 80008a4:	080009bb 	.word	0x080009bb
 80008a8:	08000b4b 	.word	0x08000b4b
 80008ac:	08000c45 	.word	0x08000c45
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80008b0:	4b92      	ldr	r3, [pc, #584]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d133      	bne.n	8000924 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 80008bc:	4b8f      	ldr	r3, [pc, #572]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	823b      	strh	r3, [r7, #16]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80008c8:	4b8e      	ldr	r3, [pc, #568]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d004      	beq.n	80008dc <USB_Device_ProcessControlRequest+0x9c>
 80008d2:	4b8a      	ldr	r3, [pc, #552]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 80008d4:	889b      	ldrh	r3, [r3, #4]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d120      	bne.n	800091e <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 80008dc:	8a3b      	ldrh	r3, [r7, #16]
 80008de:	4a88      	ldr	r2, [pc, #544]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80008e0:	212c      	movs	r1, #44	; 0x2c
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	7a1b      	ldrb	r3, [r3, #8]
 80008ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ee:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d114      	bne.n	800091e <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 80008f4:	8a3b      	ldrh	r3, [r7, #16]
 80008f6:	4a82      	ldr	r2, [pc, #520]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80008f8:	212c      	movs	r1, #44	; 0x2c
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	441a      	add	r2, r3
 8000900:	7a13      	ldrb	r3, [r2, #8]
 8000902:	f36f 0382 	bfc	r3, #2, #1
 8000906:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000908:	4b7d      	ldr	r3, [pc, #500]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	4a7b      	ldr	r2, [pc, #492]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000910:	8892      	ldrh	r2, [r2, #4]
 8000912:	b292      	uxth	r2, r2
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	2100      	movs	r1, #0
 8000918:	4610      	mov	r0, r2
 800091a:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 800091c:	e19b      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 800091e:	f7ff ff79 	bl	8000814 <USBD_HandleEP0_Stall>
			break;
 8000922:	e198      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000924:	4b75      	ldr	r3, [pc, #468]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8000930:	4a73      	ldr	r2, [pc, #460]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000932:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000936:	f36f 0382 	bfc	r3, #2, #1
 800093a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 800093e:	e18a      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 8000940:	f7ff ff68 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000944:	e187      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000946:	4b6e      	ldr	r3, [pc, #440]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	2201      	movs	r2, #1
 800094e:	496e      	ldr	r1, [pc, #440]	; (8000b08 <USB_Device_ProcessControlRequest+0x2c8>)
 8000950:	2000      	movs	r0, #0
 8000952:	4798      	blx	r3
		break;
 8000954:	e17f      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000958:	885b      	ldrh	r3, [r3, #2]
 800095a:	b298      	uxth	r0, r3
 800095c:	4b67      	ldr	r3, [pc, #412]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	b29b      	uxth	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	1d3a      	adds	r2, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff fee2 	bl	8000730 <CALLBACK_USB_GetDescriptor>
 800096c:	4603      	mov	r3, r0
 800096e:	617b      	str	r3, [r7, #20]
		if (length==0)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 8000976:	f7ff ff4d 	bl	8000814 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 800097a:	e16c      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
					length : USB_ControlRequest.wLength;
 800097c:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 800097e:	88db      	ldrh	r3, [r3, #6]
 8000980:	b29b      	uxth	r3, r3
 8000982:	461a      	mov	r2, r3
			length = length < USB_ControlRequest.wLength ?
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	4293      	cmp	r3, r2
 8000988:	bf28      	it	cs
 800098a:	4613      	movcs	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800098e:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	2000      	movs	r0, #0
 800099a:	4798      	blx	r3
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	4a56      	ldr	r2, [pc, #344]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80009a8:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b52      	ldr	r3, [pc, #328]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80009b8:	e14d      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80009ba:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d10d      	bne.n	80009e0 <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 80009cc:	8892      	ldrh	r2, [r2, #4]
 80009ce:	b292      	uxth	r2, r2
 80009d0:	f502 729c 	add.w	r2, r2, #312	; 0x138
 80009d4:	494a      	ldr	r1, [pc, #296]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 80009d6:	4411      	add	r1, r2
 80009d8:	2201      	movs	r2, #1
 80009da:	2000      	movs	r0, #0
 80009dc:	4798      	blx	r3
			break;
 80009de:	e13a      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	f040 8132 	bne.w	8000c50 <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 80009ec:	f7ff ff12 	bl	8000814 <USBD_HandleEP0_Stall>
			break;
 80009f0:	e131      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d11b      	bne.n	8000a36 <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 80009fe:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000a00:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000a04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000a10:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000a14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	817b      	strh	r3, [r7, #10]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f107 010a 	add.w	r1, r7, #10
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2000      	movs	r0, #0
 8000a32:	4798      	blx	r3
			break;
 8000a34:	e10f      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d10f      	bne.n	8000a62 <USB_Device_ProcessControlRequest+0x222>
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d10a      	bne.n	8000a62 <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	817b      	strh	r3, [r7, #10]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f107 010a 	add.w	r1, r7, #10
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4798      	blx	r3
			break;
 8000a60:	e0f9      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d130      	bne.n	8000ad0 <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	823b      	strh	r3, [r7, #16]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d004      	beq.n	8000a8e <USB_Device_ProcessControlRequest+0x24e>
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <USB_Device_ProcessControlRequest+0x2bc>)
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d120      	bne.n	8000ad0 <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 8000a8e:	8a3b      	ldrh	r3, [r7, #16]
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000a92:	212c      	movs	r1, #44	; 0x2c
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	7a1b      	ldrb	r3, [r3, #8]
 8000a9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000aa0:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d114      	bne.n	8000ad0 <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 8000aa6:	8a3b      	ldrh	r3, [r7, #16]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000aaa:	212c      	movs	r1, #44	; 0x2c
 8000aac:	fb01 f303 	mul.w	r3, r1, r3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	7a1b      	ldrb	r3, [r3, #8]
 8000ab4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	817b      	strh	r3, [r7, #10]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f107 010a 	add.w	r1, r7, #10
 8000ac8:	2202      	movs	r2, #2
 8000aca:	2000      	movs	r0, #0
 8000acc:	4798      	blx	r3
				break;
 8000ace:	e0c2      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8000ad0:	f7ff fea0 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000ad4:	e0bf      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8000ad6:	7cfb      	ldrb	r3, [r7, #19]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d103      	bne.n	8000ae4 <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e002      	b.n	8000aea <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <USB_Device_ProcessControlRequest+0x2c4>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <USB_Device_ProcessControlRequest+0x2c0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	7cfa      	ldrb	r2, [r7, #19]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4610      	mov	r0, r2
 8000af6:	4798      	blx	r3
		break;
 8000af8:	e0ad      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
 8000afa:	bf00      	nop
 8000afc:	20000ef8 	.word	0x20000ef8
 8000b00:	20000ba8 	.word	0x20000ba8
 8000b04:	20000ef5 	.word	0x20000ef5
 8000b08:	20000ce1 	.word	0x20000ce1

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8000b0c:	4a58      	ldr	r2, [pc, #352]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000b0e:	7cfb      	ldrb	r3, [r7, #19]
 8000b10:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000b14:	f7ff fdc4 	bl	80006a0 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8000b18:	7cfb      	ldrb	r3, [r7, #19]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000b1e:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000b20:	2203      	movs	r2, #3
 8000b22:	701a      	strb	r2, [r3, #0]
			break;
 8000b24:	e097      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 8000b26:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000b28:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 8000b36:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 8000b3c:	e08b      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 8000b3e:	f7ff fe69 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000b42:	e088      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 8000b44:	f7ff fe66 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000b48:	e085      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000b4a:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d10c      	bne.n	8000b6e <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000b54:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000b56:	889b      	ldrh	r3, [r3, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000b5e:	885b      	ldrh	r3, [r3, #2]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8000b6c:	e073      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d16d      	bne.n	8000c54 <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 8000b78:	f7ff fe4c 	bl	8000814 <USBD_HandleEP0_Stall>
			break;
 8000b7c:	e06b      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 8000b7e:	7cfb      	ldrb	r3, [r7, #19]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d102      	bne.n	8000b8a <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 8000b84:	f7ff fe46 	bl	8000814 <USBD_HandleEP0_Stall>
			break;
 8000b88:	e065      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000b8a:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d138      	bne.n	8000c06 <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00a      	beq.n	8000bb0 <USB_Device_ProcessControlRequest+0x370>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d000      	beq.n	8000ba0 <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 8000b9e:	e05a      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 8000ba0:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000ba2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8000bae:	e029      	b.n	8000c04 <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000bb2:	889b      	ldrh	r3, [r3, #4]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	823b      	strh	r3, [r7, #16]
				if (device.Endpoints[Index].IsConfigured == 0)
 8000bbc:	8a3b      	ldrh	r3, [r7, #16]
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000bc0:	212c      	movs	r1, #44	; 0x2c
 8000bc2:	fb01 f303 	mul.w	r3, r1, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	7a1b      	ldrb	r3, [r3, #8]
 8000bca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 8000bd4:	f7ff fe1e 	bl	8000814 <USBD_HandleEP0_Stall>
				break;
 8000bd8:	e013      	b.n	8000c02 <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8000bda:	8a3b      	ldrh	r3, [r7, #16]
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000bde:	212c      	movs	r1, #44	; 0x2c
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	441a      	add	r2, r3
 8000be6:	7a13      	ldrb	r3, [r2, #8]
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000bf6:	8892      	ldrh	r2, [r2, #4]
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4798      	blx	r3
				break;
 8000c02:	bf00      	nop
			break;
 8000c04:	e027      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <USB_Device_ProcessControlRequest+0x434>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d116      	bne.n	8000c3e <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000c10:	7cfb      	ldrb	r3, [r7, #19]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d113      	bne.n	8000c3e <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d10d      	bne.n	8000c3e <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <USB_Device_ProcessControlRequest+0x438>)
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d107      	bne.n	8000c3e <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000c30:	7a13      	ldrb	r3, [r2, #8]
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8000c38:	f7ff fdec 	bl	8000814 <USBD_HandleEP0_Stall>
				break;
 8000c3c:	e00b      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 8000c3e:	f7ff fde9 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000c42:	e008      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 8000c44:	f7ff fde6 	bl	8000814 <USBD_HandleEP0_Stall>
		break;
 8000c48:	e005      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 8000c4a:	f7ff fde3 	bl	8000814 <USBD_HandleEP0_Stall>
 8000c4e:	e002      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		break;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <USB_Device_ProcessControlRequest+0x416>
		break;
 8000c54:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 8000c56:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <USB_Device_ProcessControlRequest+0x430>)
 8000c58:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000c5c:	f36f 0341 	bfc	r3, #1, #1
 8000c60:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8000c64:	e000      	b.n	8000c68 <USB_Device_ProcessControlRequest+0x428>
		return;
 8000c66:	bf00      	nop
}
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000ba8 	.word	0x20000ba8
 8000c74:	20000ef5 	.word	0x20000ef5
 8000c78:	20000ef8 	.word	0x20000ef8

08000c7c <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000c82:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d109      	bne.n	8000c9e <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	2000      	movs	r0, #0
 8000c94:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000c98:	2205      	movs	r2, #5
 8000c9a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000ca0:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d10b      	bne.n	8000cc0 <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000cb0:	7912      	ldrb	r2, [r2, #4]
 8000cb2:	2118      	movs	r1, #24
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <USBD_HandleEP0_IN+0x48>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000ba8 	.word	0x20000ba8

08000cc8 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000cce:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d10c      	bne.n	8000cf0 <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 8000cd6:	f7ff fdb3 	bl	8000840 <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000cea:	2203      	movs	r2, #3
 8000cec:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000cf2:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d10b      	bne.n	8000d12 <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000d02:	7912      	ldrb	r2, [r2, #4]
 8000d04:	2118      	movs	r1, #24
 8000d06:	4610      	mov	r0, r2
 8000d08:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <USBD_HandleEP0_OUT+0x50>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000ba8 	.word	0x20000ba8

08000d1c <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2208      	movs	r2, #8
 8000d2a:	4920      	ldr	r1, [pc, #128]	; (8000dac <USBD_HandleEP0_SETUP+0x90>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4798      	blx	r3
 8000d30:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8000d32:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d34:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d12c      	bne.n	8000da0 <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <USBD_HandleEP0_SETUP+0x90>)
 8000d48:	88db      	ldrh	r3, [r3, #6]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10d      	bne.n	8000d6c <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8000d58:	f7ff fd72 	bl	8000840 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2000      	movs	r0, #0
 8000d68:	4798      	blx	r3
 8000d6a:	e01a      	b.n	8000da2 <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <USBD_HandleEP0_SETUP+0x90>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da06      	bge.n	8000d84 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8000d7e:	f7ff fd5f 	bl	8000840 <USB_Device_ProcessControlRequest>
 8000d82:	e00e      	b.n	8000da2 <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <USBD_HandleEP0_SETUP+0x8c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	4a06      	ldr	r2, [pc, #24]	; (8000dac <USBD_HandleEP0_SETUP+0x90>)
 8000d94:	88d2      	ldrh	r2, [r2, #6]
 8000d96:	b292      	uxth	r2, r2
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	4798      	blx	r3
 8000d9e:	e000      	b.n	8000da2 <USBD_HandleEP0_SETUP+0x86>
		return;
 8000da0:	bf00      	nop
		}
	}
}
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000ba8 	.word	0x20000ba8
 8000dac:	20000ef8 	.word	0x20000ef8

08000db0 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b09      	cmp	r3, #9
 8000dbe:	f200 80fd 	bhi.w	8000fbc <USBD_SignalDeviceEventHandler+0x20c>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <USBD_SignalDeviceEventHandler+0x18>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000f1f 	.word	0x08000f1f
 8000dcc:	08000f0d 	.word	0x08000f0d
 8000dd0:	08000efb 	.word	0x08000efb
 8000dd4:	08000f01 	.word	0x08000f01
 8000dd8:	08000df1 	.word	0x08000df1
 8000ddc:	08000fbd 	.word	0x08000fbd
 8000de0:	08000fa5 	.word	0x08000fa5
 8000de4:	08000f95 	.word	0x08000f95
 8000de8:	08000fbd 	.word	0x08000fbd
 8000dec:	08000ef5 	.word	0x08000ef5
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8000df0:	4b74      	ldr	r3, [pc, #464]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8000df6:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8000dfe:	4a72      	ldr	r2, [pc, #456]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e00:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000e04:	f36f 0382 	bfc	r3, #2, #1
 8000e08:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e050      	b.n	8000eb4 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 8000e12:	4a6d      	ldr	r2, [pc, #436]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	212c      	movs	r1, #44	; 0x2c
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	441a      	add	r2, r3
 8000e1e:	8913      	ldrh	r3, [r2, #8]
 8000e20:	f36f 1304 	bfc	r3, #4, #1
 8000e24:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 8000e26:	4a68      	ldr	r2, [pc, #416]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	212c      	movs	r1, #44	; 0x2c
 8000e2c:	fb01 f303 	mul.w	r3, r1, r3
 8000e30:	441a      	add	r2, r3
 8000e32:	8913      	ldrh	r3, [r2, #8]
 8000e34:	f36f 03c3 	bfc	r3, #3, #1
 8000e38:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 8000e3a:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	212c      	movs	r1, #44	; 0x2c
 8000e40:	fb01 f303 	mul.w	r3, r1, r3
 8000e44:	441a      	add	r2, r3
 8000e46:	7a13      	ldrb	r3, [r2, #8]
 8000e48:	f36f 0382 	bfc	r3, #2, #1
 8000e4c:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d02c      	beq.n	8000eae <USBD_SignalDeviceEventHandler+0xfe>
 8000e54:	4a5c      	ldr	r2, [pc, #368]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	212c      	movs	r1, #44	; 0x2c
 8000e5a:	fb01 f303 	mul.w	r3, r1, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d020      	beq.n	8000eae <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4955      	ldr	r1, [pc, #340]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	fb00 f202 	mul.w	r2, r0, r2
 8000e7c:	440a      	add	r2, r1
 8000e7e:	3204      	adds	r2, #4
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	4610      	mov	r0, r2
 8000e84:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8000e86:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	212c      	movs	r1, #44	; 0x2c
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	441a      	add	r2, r3
 8000e92:	7a13      	ldrb	r3, [r2, #8]
 8000e94:	f36f 0300 	bfc	r3, #0, #1
 8000e98:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8000e9a:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	212c      	movs	r1, #44	; 0x2c
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	441a      	add	r2, r3
 8000ea6:	7a13      	ldrb	r3, [r2, #8]
 8000ea8:	f36f 0341 	bfc	r3, #1, #1
 8000eac:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	ddab      	ble.n	8000e12 <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e009      	b.n	8000edc <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8000ec8:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	ddf2      	ble.n	8000ec8 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000eea:	7912      	ldrb	r2, [r2, #4]
 8000eec:	2118      	movs	r1, #24
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4798      	blx	r3
		break;
 8000ef2:	e064      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8000ef4:	f7ff fc06 	bl	8000704 <EVENT_USB_Device_StartOfFrame>
		break;
 8000ef8:	e061      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8000efa:	f7ff fbab 	bl	8000654 <EVENT_USB_Device_Connect>
		break;
 8000efe:	e05e      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8000f06:	f7ff fbac 	bl	8000662 <EVENT_USB_Device_Disconnect>
		break;
 8000f0a:	e058      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4798      	blx	r3
		 break;
 8000f1c:	e04f      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8000f24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f2c:	f005 fd6e 	bl	8006a0c <memset>
		 device.Driver = &Driver_USBD0;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <USBD_SignalDeviceEventHandler+0x21c>)
 8000f34:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f40:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <USBD_SignalDeviceEventHandler+0x220>)
 8000f42:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <USBD_SignalDeviceEventHandler+0x224>)
 8000f50:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f5c:	7913      	ldrb	r3, [r2, #4]
 8000f5e:	f36f 13c7 	bfc	r3, #7, #1
 8000f62:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f66:	7a13      	ldrb	r3, [r2, #8]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f70:	7a13      	ldrb	r3, [r2, #8]
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f7a:	8913      	ldrh	r3, [r2, #8]
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	f361 138c 	bfi	r3, r1, #6, #7
 8000f82:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	2240      	movs	r2, #64	; 0x40
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 8000f92:	e014      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000f96:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000f9c:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8000f9e:	f7ff fbb8 	bl	8000712 <EVENT_USB_Device_WakeUp>
		break;
 8000fa2:	e00c      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <USBD_SignalDeviceEventHandler+0x218>)
 8000fac:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <USBD_SignalDeviceEventHandler+0x214>)
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8000fb6:	f7ff fbb3 	bl	8000720 <EVENT_USB_Device_Suspend>
		break;
 8000fba:	e000      	b.n	8000fbe <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8000fbc:	bf00      	nop
	}
}
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000ef5 	.word	0x20000ef5
 8000fc8:	20000ba8 	.word	0x20000ba8
 8000fcc:	08007354 	.word	0x08007354
 8000fd0:	200009a8 	.word	0x200009a8
 8000fd4:	20000aa8 	.word	0x20000aa8

08000fd8 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	222c      	movs	r2, #44	; 0x2c
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a5d      	ldr	r2, [pc, #372]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8000ffc:	4b5b      	ldr	r3, [pc, #364]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8000ffe:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001002:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 8001004:	4b59      	ldr	r3, [pc, #356]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001006:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800100a:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b55      	ldr	r3, [pc, #340]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001016:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b52      	ldr	r3, [pc, #328]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001024:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d013      	beq.n	8001056 <USBD_SignalEndpointEvent_Handler+0x7e>
 800102e:	2b02      	cmp	r3, #2
 8001030:	d03a      	beq.n	80010a8 <USBD_SignalEndpointEvent_Handler+0xd0>
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 808e 	bne.w	8001154 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	8893      	ldrh	r3, [r2, #4]
 800103c:	f36f 03c3 	bfc	r3, #3, #1
 8001040:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001042:	4b4a      	ldr	r3, [pc, #296]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001044:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001048:	2b00      	cmp	r3, #0
 800104a:	d000      	beq.n	800104e <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 800104c:	e002      	b.n	8001054 <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 800104e:	f7ff fe65 	bl	8000d1c <USBD_HandleEP0_SETUP>
			break;
 8001052:	bf00      	nop
		}
		break;
 8001054:	e07e      	b.n	8001154 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	8893      	ldrh	r3, [r2, #4]
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d110      	bne.n	800108a <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	7810      	ldrb	r0, [r2, #0]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	6911      	ldr	r1, [r2, #16]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	6952      	ldr	r2, [r2, #20]
 8001080:	4798      	blx	r3
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	8893      	ldrh	r3, [r2, #4]
 800108e:	f36f 03c3 	bfc	r3, #3, #1
 8001092:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001096:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800109a:	2b00      	cmp	r3, #0
 800109c:	d000      	beq.n	80010a0 <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 800109e:	e002      	b.n	80010a6 <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 80010a0:	f7ff fe12 	bl	8000cc8 <USBD_HandleEP0_OUT>
			break;
 80010a4:	bf00      	nop
		}
		break;
 80010a6:	e055      	b.n	8001154 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	7810      	ldrb	r0, [r2, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010c2:	4798      	blx	r3
 80010c4:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	441a      	add	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 80010de:	e041      	b.n	8001164 <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d120      	bne.n	8001130 <USBD_SignalEndpointEvent_Handler+0x158>
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01c      	beq.n	8001130 <USBD_SignalEndpointEvent_Handler+0x158>
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <USBD_SignalEndpointEvent_Handler+0x198>)
 80010fc:	88d2      	ldrh	r2, [r2, #6]
 80010fe:	b292      	uxth	r2, r2
 8001100:	4293      	cmp	r3, r2
 8001102:	d015      	beq.n	8001130 <USBD_SignalEndpointEvent_Handler+0x158>
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	8892      	ldrh	r2, [r2, #4]
 800110c:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	fbb3 f1f2 	udiv	r1, r3, r2
 8001116:	fb02 f201 	mul.w	r2, r2, r1
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	7810      	ldrb	r0, [r2, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	8893      	ldrh	r3, [r2, #4]
 800113a:	f36f 1304 	bfc	r3, #4, #1
 800113e:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001142:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001146:	2b00      	cmp	r3, #0
 8001148:	d000      	beq.n	800114c <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 800114a:	e002      	b.n	8001152 <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 800114c:	f7ff fd96 	bl	8000c7c <USBD_HandleEP0_IN>
			break;
 8001150:	bf00      	nop
		}
		break;
 8001152:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <USBD_SignalEndpointEvent_Handler+0x194>)
 800115e:	7cbb      	ldrb	r3, [r7, #18]
 8001160:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000ba8 	.word	0x20000ba8
 8001170:	20000ef8 	.word	0x20000ef8

08001174 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	2100      	movs	r1, #0
 8001186:	4829      	ldr	r0, [pc, #164]	; (800122c <USBD_Initialize+0xb8>)
 8001188:	f005 fc40 	bl	8006a0c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <USBD_Initialize+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <USBD_Initialize+0xb8>)
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <USBD_Initialize+0xc0>)
 8001196:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <USBD_Initialize+0xb8>)
 800119a:	2201      	movs	r2, #1
 800119c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <USBD_Initialize+0xb8>)
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <USBD_Initialize+0xc4>)
 80011a4:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <USBD_Initialize+0xb8>)
 80011a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <USBD_Initialize+0xb8>)
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <USBD_Initialize+0xc8>)
 80011b2:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <USBD_Initialize+0xb8>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <USBD_Initialize+0xb8>)
 80011be:	7913      	ldrb	r3, [r2, #4]
 80011c0:	f36f 13c7 	bfc	r3, #7, #1
 80011c4:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <USBD_Initialize+0xb8>)
 80011c8:	7a13      	ldrb	r3, [r2, #8]
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 80011d0:	4a16      	ldr	r2, [pc, #88]	; (800122c <USBD_Initialize+0xb8>)
 80011d2:	7a13      	ldrb	r3, [r2, #8]
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <USBD_Initialize+0xb8>)
 80011dc:	8913      	ldrh	r3, [r2, #8]
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	f361 138c 	bfi	r3, r1, #6, #7
 80011e4:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <USBD_Initialize+0xb8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <USBD_Initialize+0x8c>
		return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fe:	e011      	b.n	8001224 <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <USBD_Initialize+0xb8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <USBD_Initialize+0xb8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4798      	blx	r3
		return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001220:	e000      	b.n	8001224 <USBD_Initialize+0xb0>
	}

	return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000ba8 	.word	0x20000ba8
 8001230:	20000ef5 	.word	0x20000ef5
 8001234:	08007354 	.word	0x08007354
 8001238:	200009a8 	.word	0x200009a8
 800123c:	20000aa8 	.word	0x20000aa8

08001240 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <USB_IsEnumDone+0x1c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <USB_IsEnumDone+0x16>
		return 1;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <USB_IsEnumDone+0x18>
	else
		return 0;
 8001256:	2300      	movs	r3, #0
 }
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000ba8 	.word	0x20000ba8

08001260 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	da12      	bge.n	80012a6 <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <USBD_SetEndpointBuffer+0x78>)
 8001284:	212c      	movs	r1, #44	; 0x2c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3320      	adds	r3, #32
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	4910      	ldr	r1, [pc, #64]	; (80012d8 <USBD_SetEndpointBuffer+0x78>)
 8001298:	202c      	movs	r0, #44	; 0x2c
 800129a:	fb00 f303 	mul.w	r3, r0, r3
 800129e:	440b      	add	r3, r1
 80012a0:	3324      	adds	r3, #36	; 0x24
 80012a2:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 80012a4:	e011      	b.n	80012ca <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <USBD_SetEndpointBuffer+0x78>)
 80012aa:	212c      	movs	r1, #44	; 0x2c
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	3314      	adds	r3, #20
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	88ba      	ldrh	r2, [r7, #4]
 80012bc:	4906      	ldr	r1, [pc, #24]	; (80012d8 <USBD_SetEndpointBuffer+0x78>)
 80012be:	202c      	movs	r0, #44	; 0x2c
 80012c0:	fb00 f303 	mul.w	r3, r0, r3
 80012c4:	440b      	add	r3, r1
 80012c6:	3318      	adds	r3, #24
 80012c8:	601a      	str	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000ba8 	.word	0x20000ba8

080012dc <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e01c      	b.n	8001328 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <XMC_USBD_lDeviceActive+0x64>)
 80012f2:	2134      	movs	r1, #52	; 0x34
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <XMC_USBD_lDeviceActive+0x42>
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <XMC_USBD_lDeviceActive+0x64>)
 800130a:	2134      	movs	r1, #52	; 0x34
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	4413      	add	r3, r2
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 800131e:	2301      	movs	r3, #1
 8001320:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3301      	adds	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b1b      	ldrb	r3, [r3, #12]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3dd      	bcc.n	80012ee <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 8001332:	7bbb      	ldrb	r3, [r7, #14]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000cec 	.word	0x20000cec

08001344 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8001344:	b480      	push	{r7}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2234      	movs	r2, #52	; 0x34
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 8001358:	4413      	add	r3, r2
 800135a:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 800135e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001364:	4a30      	ldr	r2, [pc, #192]	; (8001428 <XMC_USBD_lReadFifo+0xe4>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3370      	adds	r3, #112	; 0x70
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d047      	beq.n	800141c <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	2b00      	cmp	r3, #0
 8001392:	d043      	beq.n	800141c <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	e00a      	b.n	80013b0 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3f0      	bcc.n	800139a <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d021      	beq.n	8001404 <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e015      	b.n	80013f8 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	0099      	lsls	r1, r3, #2
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	440b      	add	r3, r1
 80013d8:	4413      	add	r3, r2
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	21ff      	movs	r1, #255	; 0xff
 80013e0:	4091      	lsls	r1, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4011      	ands	r1, r2
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	fa21 f202 	lsr.w	r2, r1, r2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	441a      	add	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e3      	bcc.n	80013cc <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	441a      	add	r2, r3
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	441a      	add	r2, r3
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800141c:	bf00      	nop
 800141e:	372c      	adds	r7, #44	; 0x2c
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20000cec 	.word	0x20000cec

0800142c <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <XMC_USBD_lWriteFifo+0xa0>)
 8001440:	3378      	adds	r3, #120	; 0x78
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <XMC_USBD_lWriteFifo+0xa0>)
 8001454:	336a      	adds	r3, #106	; 0x6a
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e023      	b.n	80014be <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3303      	adds	r3, #3
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	429a      	cmp	r2, r3
 8001486:	d204      	bcs.n	8001492 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e00c      	b.n	80014b2 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
      i++;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	3301      	adds	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	1d1a      	adds	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3ee      	bcc.n	8001498 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	617b      	str	r3, [r7, #20]
  }
  return result;
 80014be:	697b      	ldr	r3, [r7, #20]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3724      	adds	r7, #36	; 0x24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000cec 	.word	0x20000cec

080014d0 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f362 138a 	bfi	r3, r2, #6, #5
 80014f4:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <XMC_USBD_lFlushTXFifo+0x78>)
 80014f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e002      	b.n	800150c <XMC_USBD_lFlushTXFifo+0x3c>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3301      	adds	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001512:	d3f8      	bcc.n	8001506 <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <XMC_USBD_lFlushTXFifo+0x78>)
 8001516:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f4      	bne.n	8001514 <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 800152e:	bf00      	nop
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60fa      	str	r2, [r7, #12]
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153a:	d3f9      	bcc.n	8001530 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20000cec 	.word	0x20000cec

0800154c <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <XMC_USBD_lFlushRXFifo+0x64>)
 8001560:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	e002      	b.n	8001574 <XMC_USBD_lFlushRXFifo+0x28>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3301      	adds	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800157a:	d3f8      	bcc.n	800156e <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <XMC_USBD_lFlushRXFifo+0x64>)
 800157e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ea      	bne.n	8001568 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8001596:	bf00      	nop
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a2:	d3f9      	bcc.n	8001598 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000cec 	.word	0x20000cec

080015b4 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80015ba:	2301      	movs	r3, #1
 80015bc:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80015c6:	e005      	b.n	80015d4 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	80fb      	strh	r3, [r7, #6]
    i++;
 80015ce:	797b      	ldrb	r3, [r7, #5]
 80015d0:	3301      	adds	r3, #1
 80015d2:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80015d4:	797b      	ldrb	r3, [r7, #5]
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d807      	bhi.n	80015ea <XMC_USBD_lAssignTXFifo+0x36>
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <XMC_USBD_lAssignTXFifo+0x6c>)
 80015dc:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4013      	ands	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ee      	bne.n	80015c8 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <XMC_USBD_lAssignTXFifo+0x6c>)
 80015ec:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4013      	ands	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10a      	bne.n	8001610 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <XMC_USBD_lAssignTXFifo+0x6c>)
 80015fc:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	4313      	orrs	r3, r2
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001608:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 800160c:	797b      	ldrb	r3, [r7, #5]
 800160e:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001610:	793b      	ldrb	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000cec 	.word	0x20000cec

08001624 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <XMC_USBD_lUnassignFifo+0x34>)
 8001630:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	b29b      	uxth	r3, r3
 8001642:	4013      	ands	r3, r2
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <XMC_USBD_lUnassignFifo+0x34>)
 8001648:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000cec 	.word	0x20000cec

0800165c <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6892      	ldr	r2, [r2, #8]
 8001676:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800167a:	4293      	cmp	r3, r2
 800167c:	d909      	bls.n	8001692 <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6892      	ldr	r2, [r2, #8]
 8001686:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800168a:	441a      	add	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
 8001690:	e003      	b.n	800169a <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d119      	bne.n	80016dc <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	7893      	ldrb	r3, [r2, #2]
 80016b2:	2101      	movs	r1, #1
 80016b4:	f361 03c4 	bfi	r3, r1, #3, #2
 80016b8:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	78d3      	ldrb	r3, [r2, #3]
 80016be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016c2:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	7813      	ldrb	r3, [r2, #0]
 80016d4:	f361 0306 	bfi	r3, r1, #0, #7
 80016d8:	7013      	strb	r3, [r2, #0]
 80016da:	e033      	b.n	8001744 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f36f 0312 	bfc	r3, #0, #19
 80016ea:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 80016ec:	8a7b      	ldrh	r3, [r7, #18]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f362 03cc 	bfi	r3, r2, #3, #10
 80016f4:	827b      	strh	r3, [r7, #18]
 80016f6:	e025      	b.n	8001744 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6852      	ldr	r2, [r2, #4]
 8001706:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	4413      	add	r3, r2
 800170e:	3b01      	subs	r3, #1
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6852      	ldr	r2, [r2, #4]
 8001714:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	fbb3 f3f2 	udiv	r3, r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001724:	b29a      	uxth	r2, r3
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	f362 03cc 	bfi	r3, r2, #3, #10
 800172c:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f362 0312 	bfi	r3, r2, #0, #19
 8001742:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <XMC_USBD_lStartReadXfer+0x170>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	7b5b      	ldrb	r3, [r3, #13]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <XMC_USBD_lStartReadXfer+0x174>)
 800175a:	3370      	adds	r3, #112	; 0x70
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001766:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <XMC_USBD_lStartReadXfer+0x174>)
 8001774:	3370      	adds	r3, #112	; 0x70
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <XMC_USBD_lStartReadXfer+0x174>)
 800178c:	3370      	adds	r3, #112	; 0x70
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a6:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <XMC_USBD_lStartReadXfer+0x174>)
 80017b4:	3370      	adds	r3, #112	; 0x70
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000ce8 	.word	0x20000ce8
 80017d0:	20000cec 	.word	0x20000cec

080017d4 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 80017ec:	336a      	adds	r3, #106	; 0x6a
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6892      	ldr	r2, [r2, #8]
 8001804:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001808:	4293      	cmp	r3, r2
 800180a:	d204      	bcs.n	8001816 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
 8001814:	e008      	b.n	8001828 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6892      	ldr	r2, [r2, #8]
 800181e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001822:	441a      	add	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f36f 0312 	bfc	r3, #0, #19
 8001836:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	2201      	movs	r2, #1
 800183c:	f362 03cc 	bfi	r3, r2, #3, #10
 8001840:	81fb      	strh	r3, [r7, #14]
 8001842:	e06a      	b.n	800191a <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d110      	bne.n	8001874 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	2201      	movs	r2, #1
 8001856:	f362 03cc 	bfi	r3, r2, #3, #10
 800185a:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f362 0312 	bfi	r3, r2, #0, #19
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e02b      	b.n	80018cc <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f362 0312 	bfi	r3, r2, #0, #19
 8001888:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	b29b      	uxth	r3, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6852      	ldr	r2, [r2, #4]
 80018b2:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80018b6:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80018b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	f362 03cc 	bfi	r3, r2, #3, #10
 80018ca:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <XMC_USBD_lStartWriteXfer+0x194>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	7b5b      	ldrb	r3, [r3, #13]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10b      	bne.n	80018ee <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4a20      	ldr	r2, [pc, #128]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 80018e2:	336a      	adds	r3, #106	; 0x6a
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ec:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <XMC_USBD_lStartWriteXfer+0x194>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	7b5b      	ldrb	r3, [r3, #13]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d110      	bne.n	800191a <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 80018fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 8001900:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001904:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	4610      	mov	r0, r2
 8001912:	2201      	movs	r2, #1
 8001914:	4082      	lsls	r2, r0
 8001916:	430a      	orrs	r2, r1
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 8001926:	336a      	adds	r3, #106	; 0x6a
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001936:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <XMC_USBD_lStartWriteXfer+0x190>)
 800194c:	336a      	adds	r3, #106	; 0x6a
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000cec 	.word	0x20000cec
 8001968:	20000ce8 	.word	0x20000ce8

0800196c <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001976:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 800197e:	7d3b      	ldrb	r3, [r7, #20]
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001988:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e01a      	b.n	80019cc <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001996:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3370      	adds	r3, #112	; 0x70
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 80019a6:	7efb      	ldrb	r3, [r7, #27]
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 80019ae:	7ebb      	ldrb	r3, [r7, #26]
 80019b0:	f36f 1345 	bfc	r3, #5, #1
 80019b4:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80019b6:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3370      	adds	r3, #112	; 0x70
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d9e1      	bls.n	8001996 <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 80019d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 80019e0:	2310      	movs	r3, #16
 80019e2:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 80019ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80019f2:	2301      	movs	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e011      	b.n	8001a1c <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 80019fa:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	3204      	adds	r2, #4
 8001a06:	0192      	lsls	r2, r2, #6
 8001a08:	0892      	lsrs	r2, r2, #2
 8001a0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a0e:	3340      	adds	r3, #64	; 0x40
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d9ea      	bls.n	80019f8 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001a22:	2010      	movs	r0, #16
 8001a24:	f7ff fd54 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fd51 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001a2e:	f7ff fd8d 	bl	800154c <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8001a36:	7b3b      	ldrb	r3, [r7, #12]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a48:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001a50:	200f      	movs	r0, #15
 8001a52:	f000 fbfd 	bl	8002250 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001a56:	200f      	movs	r0, #15
 8001a58:	f000 fc12 	bl	8002280 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a5e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8001a66:	893b      	ldrh	r3, [r7, #8]
 8001a68:	f36f 130a 	bfc	r3, #4, #7
 8001a6c:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a70:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7b5b      	ldrb	r3, [r3, #13]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d104      	bne.n	8001a8a <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a82:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a86:	2200      	movs	r2, #0
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a8c:	6853      	ldr	r3, [r2, #4]
 8001a8e:	f36f 1304 	bfc	r3, #4, #1
 8001a92:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001a96:	6853      	ldr	r3, [r2, #4]
 8001a98:	f36f 03c3 	bfc	r3, #3, #1
 8001a9c:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001aa8:	2004      	movs	r0, #4
 8001aaa:	f000 fb25 	bl	80020f8 <XMC_USBD_ClearEvent>
}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000cec 	.word	0x20000cec

08001abc <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ac4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8001acc:	793b      	ldrb	r3, [r7, #4]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ada:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001ade:	f36f 0382 	bfc	r3, #2, #1
 8001ae2:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aec:	2001      	movs	r0, #1
 8001aee:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fb66 	bl	80021c4 <XMC_USBD_lClearEventOTG>

}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000cec 	.word	0x20000cec

08001b04 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b0c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	f36f 030a 	bfc	r3, #0, #11
 8001b1a:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b1e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b28:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b36:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b48:	2002      	movs	r0, #2
 8001b4a:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001b56:	787b      	ldrb	r3, [r7, #1]
 8001b58:	2209      	movs	r2, #9
 8001b5a:	f362 0385 	bfi	r3, r2, #2, #4
 8001b5e:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <XMC_USBD_lHandleEnumDone+0x74>)
 8001b62:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001b6a:	200b      	movs	r0, #11
 8001b6c:	f000 fac4 	bl	80020f8 <XMC_USBD_ClearEvent>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000cec 	.word	0x20000cec

08001b7c <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001b86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001b8e:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001b90:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001b9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8001ba2:	8bfa      	ldrh	r2, [r7, #30]
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8001bb4:	e0ae      	b.n	8001d14 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8001bb6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bbc:	fa42 f303 	asr.w	r3, r2, r3
 8001bc0:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8001bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8001bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 809c 	beq.w	8001d0a <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8001bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bd6:	2234      	movs	r2, #52	; 0x34
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001bde:	4413      	add	r3, r2
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001be6:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001be8:	3370      	adds	r3, #112	; 0x70
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b5b      	ldrb	r3, [r3, #13]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c04:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001c06:	3370      	adds	r3, #112	; 0x70
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8001c12:	7c3b      	ldrb	r3, [r7, #16]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d033      	beq.n	8001c86 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	7913      	ldrb	r3, [r2, #4]
 8001c22:	f36f 1345 	bfc	r3, #5, #1
 8001c26:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b5b      	ldrb	r3, [r3, #13]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	78db      	ldrb	r3, [r3, #3]
 8001c36:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8001c3e:	4613      	mov	r3, r2
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	f103 0218 	add.w	r2, r3, #24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b5b      	ldrb	r3, [r3, #13]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	441a      	add	r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	6853      	ldr	r3, [r2, #4]
 8001c68:	f36f 1304 	bfc	r3, #4, #1
 8001c6c:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001c70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c74:	2100      	movs	r1, #0
 8001c76:	2000      	movs	r0, #0
 8001c78:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 8001c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2008      	movs	r0, #8
 8001c82:	f000 facd 	bl	8002220 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8001c86:	7c3b      	ldrb	r3, [r7, #16]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d034      	beq.n	8001cfc <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b5b      	ldrb	r3, [r3, #13]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d111      	bne.n	8001cf6 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	6853      	ldr	r3, [r2, #4]
 8001cde:	f36f 1304 	bfc	r3, #4, #1
 8001ce2:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8001ce6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4798      	blx	r3
 8001cf4:	e002      	b.n	8001cfc <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8001cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cf8:	f7ff fcb0 	bl	800165c <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fa8b 	bl	8002220 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8001d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8001d14:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d1a:	fa42 f303 	asr.w	r3, r2, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f47f af49 	bne.w	8001bb6 <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8001d24:	200d      	movs	r0, #13
 8001d26:	f000 f9e7 	bl	80020f8 <XMC_USBD_ClearEvent>
}
 8001d2a:	bf00      	nop
 8001d2c:	3730      	adds	r7, #48	; 0x30
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000cec 	.word	0x20000cec

08001d38 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001d42:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001d4a:	4b69      	ldr	r3, [pc, #420]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001d4c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8001d58:	8abb      	ldrh	r3, [r7, #20]
 8001d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8001d62:	e0b6      	b.n	8001ed2 <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8001d64:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6a:	fa42 f303 	asr.w	r3, r2, r3
 8001d6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8001d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8001d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a4 	beq.w	8001ec8 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 8001d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d84:	2234      	movs	r2, #52	; 0x34
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001d96:	336a      	adds	r3, #106	; 0x6a
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001da2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001db4:	01db      	lsls	r3, r3, #7
 8001db6:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b5b      	ldrb	r3, [r3, #13]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dd0:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001dd2:	336a      	adds	r3, #106	; 0x6a
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7b5b      	ldrb	r3, [r3, #13]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d115      	bne.n	8001e10 <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 8001de4:	7b3b      	ldrb	r3, [r7, #12]
 8001de6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00f      	beq.n	8001e10 <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8001df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001df2:	f7ff fb1b 	bl	800142c <XMC_USBD_lWriteFifo>
 8001df6:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	441a      	add	r2, r3
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d04e      	beq.n	8001eba <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7b5b      	ldrb	r3, [r3, #13]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11d      	bne.n	8001e60 <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001e24:	897a      	ldrh	r2, [r7, #10]
 8001e26:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <XMC_USBD_lHandleIEPInt+0x128>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	441a      	add	r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d123      	bne.n	8001eb4 <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	6853      	ldr	r3, [r2, #4]
 8001e70:	f36f 03c3 	bfc	r3, #3, #1
 8001e74:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7b5b      	ldrb	r3, [r3, #13]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10e      	bne.n	8001e9c <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001e80:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001e84:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001e86:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001e8a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001e8c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	43d2      	mvns	r2, r2
 8001e98:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8001e9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ea2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	2102      	movs	r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4798      	blx	r3
 8001eb2:	e002      	b.n	8001eba <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8001eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eb6:	f7ff fc8d 	bl	80017d4 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f994 	bl	80021f0 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8001ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8001ed2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ed8:	fa42 f303 	asr.w	r3, r2, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f af41 	bne.w	8001d64 <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8001ee2:	200e      	movs	r0, #14
 8001ee4:	f000 f908 	bl	80020f8 <XMC_USBD_ClearEvent>
}
 8001ee8:	bf00      	nop
 8001eea:	3730      	adds	r7, #48	; 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000cec 	.word	0x20000cec

08001ef4 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <XMC_USBD_lHandleRxFLvl+0x80>)
 8001efc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d82a      	bhi.n	8001f68 <XMC_USBD_lHandleRxFLvl+0x74>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <XMC_USBD_lHandleRxFLvl+0x24>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f31 	.word	0x08001f31
 8001f20:	08001f69 	.word	0x08001f69
 8001f24:	08001f69 	.word	0x08001f69
 8001f28:	08001f69 	.word	0x08001f69
 8001f2c:	08001f4d 	.word	0x08001f4d
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7ff f9fd 	bl	8001344 <XMC_USBD_lReadFifo>
      break;
 8001f4a:	e00e      	b.n	8001f6a <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f4c:	793b      	ldrb	r3, [r7, #4]
 8001f4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	88bb      	ldrh	r3, [r7, #4]
 8001f58:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7ff f9ef 	bl	8001344 <XMC_USBD_lReadFifo>
      break;
 8001f66:	e000      	b.n	8001f6a <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8001f68:	bf00      	nop
	}
  /* no need to clear */
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000cec 	.word	0x20000cec

08001f78 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8001f82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8001f8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8001f98:	7a3b      	ldrb	r3, [r7, #8]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8001fa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001faa:	2009      	movs	r0, #9
 8001fac:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001fae:	2009      	movs	r0, #9
 8001fb0:	f000 f8a2 	bl	80020f8 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7b5b      	ldrb	r3, [r3, #13]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d119      	bne.n	8001ff0 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8001fbc:	7a3b      	ldrb	r3, [r7, #8]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	f36f 1304 	bfc	r3, #4, #1
 8001fce:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8001fd2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8001fda:	f7ff ff8b 	bl	8001ef4 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8001fde:	7b3b      	ldrb	r3, [r7, #12]
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8001fe8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8001ff0:	7a7b      	ldrb	r3, [r7, #9]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	f000 f87b 	bl	80020f8 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8002002:	7a7b      	ldrb	r3, [r7, #9]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8002010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002014:	2006      	movs	r0, #6
 8002016:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8002018:	2006      	movs	r0, #6
 800201a:	f000 f86d 	bl	80020f8 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 800202c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002030:	2008      	movs	r0, #8
 8002032:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002034:	2008      	movs	r0, #8
 8002036:	f000 f85f 	bl	80020f8 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8002048:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <XMC_USBD_IRQHandler+0x14c>)
 8002056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800205a:	2000      	movs	r0, #0
 800205c:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f84a 	bl	80020f8 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8002064:	7a7b      	ldrb	r3, [r7, #9]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fc7b 	bl	800196c <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8002076:	7a7b      	ldrb	r3, [r7, #9]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8002082:	f7ff fd3f 	bl	8001b04 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8002086:	7abb      	ldrb	r3, [r7, #10]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe50 	bl	8001d38 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8002098:	7abb      	ldrb	r3, [r7, #10]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fd69 	bl	8001b7c <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 80020aa:	7a3b      	ldrb	r3, [r7, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 80020b6:	f7ff fd01 	bl	8001abc <XMC_USBD_lHandleOTGInt>
  }

}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000cec 	.word	0x20000cec

080020c8 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <XMC_USBD_Enable+0x14>)
 80020ce:	f002 fa59 	bl	8004584 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80020d2:	f002 fe3d 	bl	8004d50 <XMC_SCU_POWER_EnableUsb>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000080 	.word	0x20000080

080020e0 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <XMC_USBD_Disable+0x14>)
 80020e6:	f002 fa2f 	bl	8004548 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 80020ea:	f002 fe3f 	bl	8004d6c <XMC_SCU_POWER_DisableUsb>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000080 	.word	0x20000080

080020f8 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  switch(event)
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b0d      	cmp	r3, #13
 800210a:	d84c      	bhi.n	80021a6 <XMC_USBD_ClearEvent+0xae>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <XMC_USBD_ClearEvent+0x1c>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	0800214d 	.word	0x0800214d
 8002118:	080021a7 	.word	0x080021a7
 800211c:	080021a7 	.word	0x080021a7
 8002120:	080021a7 	.word	0x080021a7
 8002124:	08002157 	.word	0x08002157
 8002128:	080021a7 	.word	0x080021a7
 800212c:	08002161 	.word	0x08002161
 8002130:	0800216b 	.word	0x0800216b
 8002134:	08002175 	.word	0x08002175
 8002138:	0800217f 	.word	0x0800217f
 800213c:	08002189 	.word	0x08002189
 8002140:	08002193 	.word	0x08002193
 8002144:	080021a7 	.word	0x080021a7
 8002148:	0800219d 	.word	0x0800219d
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002152:	73fb      	strb	r3, [r7, #15]
	  break;
 8002154:	e028      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8002156:	7b7b      	ldrb	r3, [r7, #13]
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	737b      	strb	r3, [r7, #13]
	  break;
 800215e:	e023      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8002160:	7b7b      	ldrb	r3, [r7, #13]
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	737b      	strb	r3, [r7, #13]
	  break;
 8002168:	e01e      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	73fb      	strb	r3, [r7, #15]
	  break;
 8002172:	e019      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217a:	73fb      	strb	r3, [r7, #15]
	  break;
 800217c:	e014      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 800217e:	7b3b      	ldrb	r3, [r7, #12]
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	733b      	strb	r3, [r7, #12]
	  break;
 8002186:	e00f      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8002188:	7b7b      	ldrb	r3, [r7, #13]
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	737b      	strb	r3, [r7, #13]
	  break;
 8002190:	e00a      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8002192:	7b7b      	ldrb	r3, [r7, #13]
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	737b      	strb	r3, [r7, #13]
	  break;
 800219a:	e005      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	73bb      	strb	r3, [r7, #14]
	  break;
 80021a4:	e000      	b.n	80021a8 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 80021a6:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <XMC_USBD_ClearEvent+0xc8>)
 80021aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	615a      	str	r2, [r3, #20]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000cec 	.word	0x20000cec

080021c4 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <XMC_USBD_lClearEventOTG+0x28>)
 80021d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	605a      	str	r2, [r3, #4]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000cec 	.word	0x20000cec

080021f0 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	4a06      	ldr	r2, [pc, #24]	; (800221c <XMC_USBD_ClearEventINEP+0x2c>)
 8002204:	336a      	adds	r3, #106	; 0x6a
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	609a      	str	r2, [r3, #8]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000cec 	.word	0x20000cec

08002220 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <XMC_USBD_ClearEventOUTEP+0x2c>)
 8002234:	3370      	adds	r3, #112	; 0x70
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	20000cec 	.word	0x20000cec

08002250 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <XMC_USBD_EnableEventOUTEP+0x2c>)
 800225e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002264:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002268:	6951      	ldr	r1, [r2, #20]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	430a      	orrs	r2, r1
 800226e:	615a      	str	r2, [r3, #20]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000cec 	.word	0x20000cec

08002280 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <XMC_USBD_EnableEventINEP+0x2c>)
 800228e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002292:	4a06      	ldr	r2, [pc, #24]	; (80022ac <XMC_USBD_EnableEventINEP+0x2c>)
 8002294:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002298:	6911      	ldr	r1, [r2, #16]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	430a      	orrs	r2, r1
 800229e:	611a      	str	r2, [r3, #16]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000cec 	.word	0x20000cec

080022b0 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 80022ba:	793b      	ldrb	r3, [r7, #4]
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 80022c2:	793b      	ldrb	r3, [r7, #4]
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 80022ca:	793b      	ldrb	r3, [r7, #4]
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 80022d2:	793b      	ldrb	r3, [r7, #4]
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 80022da:	793b      	ldrb	r3, [r7, #4]
 80022dc:	f36f 1345 	bfc	r3, #5, #1
 80022e0:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80022e2:	797b      	ldrb	r3, [r7, #5]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 80022ea:	793b      	ldrb	r3, [r7, #4]
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 80022f2:	793b      	ldrb	r3, [r7, #4]
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 80022fa:	793b      	ldrb	r3, [r7, #4]
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f36f 235f 	bfc	r3, #9, #23
 8002308:	607b      	str	r3, [r7, #4]
  return cap;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8002320:	f7ff fed2 	bl	80020c8 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8002324:	4a87      	ldr	r2, [pc, #540]	; (8002544 <XMC_USBD_Init+0x22c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	e00c      	b.n	800234a <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8002330:	4a85      	ldr	r2, [pc, #532]	; (8002548 <XMC_USBD_Init+0x230>)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 800233a:	4a84      	ldr	r2, [pc, #528]	; (800254c <XMC_USBD_Init+0x234>)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3301      	adds	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	2b06      	cmp	r3, #6
 800234e:	d9ef      	bls.n	8002330 <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8002350:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002354:	2100      	movs	r1, #0
 8002356:	487e      	ldr	r0, [pc, #504]	; (8002550 <XMC_USBD_Init+0x238>)
 8002358:	f004 fb58 	bl	8006a0c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <XMC_USBD_Init+0x238>)
 8002362:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4a79      	ldr	r2, [pc, #484]	; (8002550 <XMC_USBD_Init+0x238>)
 800236c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <XMC_USBD_Init+0x238>)
 800237c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <XMC_USBD_Init+0x238>)
 8002388:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	e00c      	b.n	80023ac <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	3348      	adds	r3, #72	; 0x48
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	6a3a      	ldr	r2, [r7, #32]
 800239a:	441a      	add	r2, r3
 800239c:	496c      	ldr	r1, [pc, #432]	; (8002550 <XMC_USBD_Init+0x238>)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	336a      	adds	r3, #106	; 0x6a
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d9ef      	bls.n	8002392 <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	e00d      	b.n	80023d4 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3358      	adds	r3, #88	; 0x58
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80023c2:	4963      	ldr	r1, [pc, #396]	; (8002550 <XMC_USBD_Init+0x238>)
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3370      	adds	r3, #112	; 0x70
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d9ee      	bls.n	80023b8 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	e00c      	b.n	80023fa <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	3301      	adds	r3, #1
 80023e4:	031b      	lsls	r3, r3, #12
 80023e6:	6a3a      	ldr	r2, [r7, #32]
 80023e8:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80023ea:	4959      	ldr	r1, [pc, #356]	; (8002550 <XMC_USBD_Init+0x238>)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	3378      	adds	r3, #120	; 0x78
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	2b06      	cmp	r3, #6
 80023fe:	d9ef      	bls.n	80023e0 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <XMC_USBD_Init+0x238>)
 8002402:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 800240a:	7f3b      	ldrb	r3, [r7, #28]
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8002412:	7f3b      	ldrb	r3, [r7, #28]
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7b5b      	ldrb	r3, [r3, #13]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8002422:	7f3b      	ldrb	r3, [r7, #28]
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	773b      	strb	r3, [r7, #28]
 800242a:	e003      	b.n	8002434 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 800242c:	7f3b      	ldrb	r3, [r7, #28]
 800242e:	f36f 1345 	bfc	r3, #5, #1
 8002432:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <XMC_USBD_Init+0x238>)
 8002436:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <XMC_USBD_Init+0x238>)
 8002440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002448:	7efb      	ldrb	r3, [r7, #27]
 800244a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244e:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8002450:	7e7b      	ldrb	r3, [r7, #25]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002458:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <XMC_USBD_Init+0x238>)
 800245a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <XMC_USBD_Init+0x238>)
 8002464:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 800246c:	7d3b      	ldrb	r3, [r7, #20]
 800246e:	f043 0303 	orr.w	r3, r3, #3
 8002472:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	f36f 13c7 	bfc	r3, #7, #1
 800247a:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <XMC_USBD_Init+0x238>)
 800247e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <XMC_USBD_Init+0x238>)
 8002488:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8002490:	7c3b      	ldrb	r3, [r7, #16]
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <XMC_USBD_Init+0x238>)
 800249a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 80024a2:	2010      	movs	r0, #16
 80024a4:	f7ff f814 	bl	80014d0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80024a8:	f7ff f850 	bl	800154c <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <XMC_USBD_Init+0x238>)
 80024ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <XMC_USBD_Init+0x238>)
 80024b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 80024ce:	7b3b      	ldrb	r3, [r7, #12]
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024dc:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80024e6:	7b7b      	ldrb	r3, [r7, #13]
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 80024ee:	7b7b      	ldrb	r3, [r7, #13]
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 80024f6:	7b7b      	ldrb	r3, [r7, #13]
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7b5b      	ldrb	r3, [r3, #13]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d103      	bne.n	800251e <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8002516:	7b3b      	ldrb	r3, [r7, #12]
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8002526:	7bbb      	ldrb	r3, [r7, #14]
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <XMC_USBD_Init+0x238>)
 8002530:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000ce8 	.word	0x20000ce8
 8002548:	20000870 	.word	0x20000870
 800254c:	2000088c 	.word	0x2000088c
 8002550:	20000cec 	.word	0x20000cec

08002554 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <XMC_USBD_Uninitialize+0x38>)
 800255c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002564:	793b      	ldrb	r3, [r7, #4]
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <XMC_USBD_Uninitialize+0x38>)
 800256e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002576:	f44f 7202 	mov.w	r2, #520	; 0x208
 800257a:	2100      	movs	r1, #0
 800257c:	4803      	ldr	r0, [pc, #12]	; (800258c <XMC_USBD_Uninitialize+0x38>)
 800257e:	f004 fa45 	bl	8006a0c <memset>
  return XMC_USBD_STATUS_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000cec 	.word	0x20000cec

08002590 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <XMC_USBD_DeviceConnect+0x30>)
 8002598:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 80025a0:	793b      	ldrb	r3, [r7, #4]
 80025a2:	f36f 0341 	bfc	r3, #1, #1
 80025a6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <XMC_USBD_DeviceConnect+0x30>)
 80025aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000cec 	.word	0x20000cec

080025c4 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <XMC_USBD_DeviceDisconnect+0x30>)
 80025cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80025d4:	793b      	ldrb	r3, [r7, #4]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <XMC_USBD_DeviceDisconnect+0x30>)
 80025de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20000cec 	.word	0x20000cec

080025f8 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8002604:	7b3b      	ldrb	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f362 03c4 	bfi	r3, r2, #3, #2
 800260c:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <XMC_USBD_DeviceGetState+0x60>)
 8002610:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002614:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	7b3b      	ldrb	r3, [r7, #12]
 800261c:	f362 0341 	bfi	r3, r2, #1, #1
 8002620:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fe5a 	bl	80012dc <XMC_USBD_lDeviceActive>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	7b3b      	ldrb	r3, [r7, #12]
 8002632:	f362 0382 	bfi	r3, r2, #2, #1
 8002636:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <XMC_USBD_DeviceGetState+0x60>)
 800263a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800263e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	7b3b      	ldrb	r3, [r7, #12]
 8002646:	f362 0300 	bfi	r3, r2, #0, #1
 800264a:	733b      	strb	r3, [r7, #12]
  return state;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000cec 	.word	0x20000cec

0800265c <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	2234      	movs	r2, #52	; 0x34
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <XMC_USBD_EndpointReadStart+0x84>)
 8002676:	4413      	add	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <XMC_USBD_EndpointReadStart+0x3a>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e01c      	b.n	80026d6 <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d202      	bcs.n	80026ac <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	f7fe ffc5 	bl	800165c <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000cec 	.word	0x20000cec

080026e4 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2234      	movs	r2, #52	; 0x34
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <XMC_USBD_EndpointRead+0x74>)
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d202      	bcs.n	8002710 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4413      	add	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	68b8      	ldr	r0, [r7, #8]
 8002720:	f004 f876 	bl	8006810 <memcpy>
  ep->outBytesAvailable -= length;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	441a      	add	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	e002      	b.n	800274c <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000cec 	.word	0x20000cec

0800275c <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	2234      	movs	r2, #52	; 0x34
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <XMC_USBD_EndpointWrite+0xa0>)
 8002778:	4413      	add	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e030      	b.n	80027f2 <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e026      	b.n	80027f2 <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d202      	bcs.n	80027b4 <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 f827 	bl	8006810 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2200      	movs	r2, #0
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	6853      	ldr	r3, [r2, #4]
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 80027e6:	6938      	ldr	r0, [r7, #16]
 80027e8:	f7fe fff4 	bl	80017d4 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	617b      	str	r3, [r7, #20]
  }
  return result;
 80027f2:	697b      	ldr	r3, [r7, #20]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000cec 	.word	0x20000cec

08002800 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	460a      	mov	r2, r1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	4613      	mov	r3, r2
 800280e:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <XMC_USBD_DeviceSetAddress+0x48>)
 8002812:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10c      	bne.n	800283a <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002826:	b2da      	uxtb	r2, r3
 8002828:	89bb      	ldrh	r3, [r7, #12]
 800282a:	f362 130a 	bfi	r3, r2, #4, #7
 800282e:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <XMC_USBD_DeviceSetAddress+0x48>)
 8002832:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20000cec 	.word	0x20000cec

0800284c <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	460a      	mov	r2, r1
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	4613      	mov	r3, r2
 800285a:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	2234      	movs	r2, #52	; 0x34
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  if (stall)
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d040      	beq.n	80028f6 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da1a      	bge.n	80028b2 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4a43      	ldr	r2, [pc, #268]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 8002888:	336a      	adds	r3, #106	; 0x6a
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002892:	7abb      	ldrb	r3, [r7, #10]
 8002894:	f043 0320 	orr.w	r3, r3, #32
 8002898:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4a3b      	ldr	r2, [pc, #236]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 80028a6:	336a      	adds	r3, #106	; 0x6a
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e01b      	b.n	80028ea <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 80028be:	3370      	adds	r3, #112	; 0x70
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80028ca:	7abb      	ldrb	r3, [r7, #10]
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 80028de:	3370      	adds	r3, #112	; 0x70
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	7913      	ldrb	r3, [r2, #4]
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	7113      	strb	r3, [r2, #4]
 80028f4:	e047      	b.n	8002986 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	da1e      	bge.n	800293c <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 800290a:	336a      	adds	r3, #106	; 0x6a
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002914:	7abb      	ldrb	r3, [r7, #10]
 8002916:	f36f 1345 	bfc	r3, #5, #1
 800291a:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4a19      	ldr	r2, [pc, #100]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 8002930:	336a      	adds	r3, #106	; 0x6a
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e01f      	b.n	800297c <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 8002948:	3370      	adds	r3, #112	; 0x70
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002954:	7abb      	ldrb	r3, [r7, #10]
 8002956:	f36f 1345 	bfc	r3, #5, #1
 800295a:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 800295c:	7afb      	ldrb	r3, [r7, #11]
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <XMC_USBD_EndpointStall+0x148>)
 8002970:	3370      	adds	r3, #112	; 0x70
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	7913      	ldrb	r3, [r2, #4]
 8002980:	f36f 1345 	bfc	r3, #5, #1
 8002984:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000cec 	.word	0x20000cec

08002998 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	2234      	movs	r2, #52	; 0x34
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <XMC_USBD_EndpointAbort+0x84>)
 80029b0:	4413      	add	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6853      	ldr	r3, [r2, #4]
 80029c6:	f36f 03c3 	bfc	r3, #3, #1
 80029ca:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	6853      	ldr	r3, [r2, #4]
 80029de:	f36f 1304 	bfc	r3, #4, #1
 80029e2:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	7913      	ldrb	r3, [r2, #4]
 80029e8:	f36f 1345 	bfc	r3, #5, #1
 80029ec:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000cec 	.word	0x20000cec

08002a20 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	71bb      	strb	r3, [r7, #6]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002a32:	4b97      	ldr	r3, [pc, #604]	; (8002c90 <XMC_USBD_EndpointConfigure+0x270>)
 8002a34:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	2234      	movs	r2, #52	; 0x34
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	4a91      	ldr	r2, [pc, #580]	; (8002c90 <XMC_USBD_EndpointConfigure+0x270>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8002a4e:	2234      	movs	r2, #52	; 0x34
 8002a50:	2100      	movs	r1, #0
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f003 ffda 	bl	8006a0c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	7913      	ldrb	r3, [r2, #4]
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a70:	b2d9      	uxtb	r1, r3
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	6853      	ldr	r3, [r2, #4]
 8002a76:	f361 23d1 	bfi	r3, r1, #11, #7
 8002a7a:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6893      	ldr	r3, [r2, #8]
 8002a88:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8002a8c:	f361 0312 	bfi	r3, r1, #0, #19
 8002a90:	6093      	str	r3, [r2, #8]
 8002a92:	e005      	b.n	8002aa0 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6893      	ldr	r3, [r2, #8]
 8002a98:	2140      	movs	r1, #64	; 0x40
 8002a9a:	f361 0312 	bfi	r3, r1, #0, #19
 8002a9e:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <XMC_USBD_EndpointConfigure+0x274>)
 8002aae:	441a      	add	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4a75      	ldr	r2, [pc, #468]	; (8002c98 <XMC_USBD_EndpointConfigure+0x278>)
 8002ac2:	441a      	add	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b71      	ldr	r3, [pc, #452]	; (8002c9c <XMC_USBD_EndpointConfigure+0x27c>)
 8002ad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <XMC_USBD_EndpointConfigure+0x280>)
 8002aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <XMC_USBD_EndpointConfigure+0xe8>
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d179      	bne.n	8002bfc <XMC_USBD_EndpointConfigure+0x1dc>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4a5f      	ldr	r2, [pc, #380]	; (8002c90 <XMC_USBD_EndpointConfigure+0x270>)
 8002b14:	336a      	adds	r3, #106	; 0x6a
 8002b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002b1e:	7b7b      	ldrb	r3, [r7, #13]
 8002b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b24:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	f362 0383 	bfi	r3, r2, #2, #2
 8002b34:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <XMC_USBD_EndpointConfigure+0x164>
    {
			switch(ep_max_packet_size)
 8002b3c:	88bb      	ldrh	r3, [r7, #4]
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d014      	beq.n	8002b6c <XMC_USBD_EndpointConfigure+0x14c>
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	dc02      	bgt.n	8002b4c <XMC_USBD_EndpointConfigure+0x12c>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d016      	beq.n	8002b78 <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002b4a:	e023      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
			switch(ep_max_packet_size)
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d007      	beq.n	8002b60 <XMC_USBD_EndpointConfigure+0x140>
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d000      	beq.n	8002b56 <XMC_USBD_EndpointConfigure+0x136>
				break;
 8002b54:	e01e      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x0U;
 8002b56:	89bb      	ldrh	r3, [r7, #12]
 8002b58:	f36f 030a 	bfc	r3, #0, #11
 8002b5c:	81bb      	strh	r3, [r7, #12]
				break;
 8002b5e:	e019      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x1U;
 8002b60:	89bb      	ldrh	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f362 030a 	bfi	r3, r2, #0, #11
 8002b68:	81bb      	strh	r3, [r7, #12]
				break;
 8002b6a:	e013      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x2U;
 8002b6c:	89bb      	ldrh	r3, [r7, #12]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f362 030a 	bfi	r3, r2, #0, #11
 8002b74:	81bb      	strh	r3, [r7, #12]
				break;
 8002b76:	e00d      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x3U;
 8002b78:	89bb      	ldrh	r3, [r7, #12]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	f362 030a 	bfi	r3, r2, #0, #11
 8002b80:	81bb      	strh	r3, [r7, #12]
				break;
 8002b82:	e007      	b.n	8002b94 <XMC_USBD_EndpointConfigure+0x174>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	89bb      	ldrh	r3, [r7, #12]
 8002b8e:	f362 030a 	bfi	r3, r2, #0, #11
 8002b92:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8002b9c:	7bbb      	ldrb	r3, [r7, #14]
 8002b9e:	f36f 1345 	bfc	r3, #5, #1
 8002ba2:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8002ba4:	f7fe fd06 	bl	80015b4 <XMC_USBD_lAssignTXFifo>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	b2d9      	uxtb	r1, r3
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	8893      	ldrh	r3, [r2, #4]
 8002bb4:	f361 1389 	bfi	r3, r1, #6, #4
 8002bb8:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	889b      	ldrh	r3, [r3, #4]
 8002bbe:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	89fb      	ldrh	r3, [r7, #14]
 8002bc6:	f362 1389 	bfi	r3, r2, #6, #4
 8002bca:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <XMC_USBD_EndpointConfigure+0x270>)
 8002bd8:	336a      	adds	r3, #106	; 0x6a
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8002be2:	8a3a      	ldrh	r2, [r7, #16]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	408b      	lsls	r3, r1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <XMC_USBD_EndpointConfigure+0x1f0>
 8002c0a:	79bb      	ldrb	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d172      	bne.n	8002cf6 <XMC_USBD_EndpointConfigure+0x2d6>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <XMC_USBD_EndpointConfigure+0x270>)
 8002c1c:	3370      	adds	r3, #112	; 0x70
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2e:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	7abb      	ldrb	r3, [r7, #10]
 8002c3a:	f362 0383 	bfi	r3, r2, #2, #2
 8002c3e:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12e      	bne.n	8002ca4 <XMC_USBD_EndpointConfigure+0x284>
		{
			switch(ep_max_packet_size)
 8002c46:	88bb      	ldrh	r3, [r7, #4]
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d014      	beq.n	8002c76 <XMC_USBD_EndpointConfigure+0x256>
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	dc02      	bgt.n	8002c56 <XMC_USBD_EndpointConfigure+0x236>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d016      	beq.n	8002c82 <XMC_USBD_EndpointConfigure+0x262>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8002c54:	e02e      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
			switch(ep_max_packet_size)
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d007      	beq.n	8002c6a <XMC_USBD_EndpointConfigure+0x24a>
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d000      	beq.n	8002c60 <XMC_USBD_EndpointConfigure+0x240>
					break;
 8002c5e:	e029      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x0U;
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	f36f 030a 	bfc	r3, #0, #11
 8002c66:	813b      	strh	r3, [r7, #8]
					break;
 8002c68:	e024      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x1U;
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f362 030a 	bfi	r3, r2, #0, #11
 8002c72:	813b      	strh	r3, [r7, #8]
					break;
 8002c74:	e01e      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x2U;
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f362 030a 	bfi	r3, r2, #0, #11
 8002c7e:	813b      	strh	r3, [r7, #8]
					break;
 8002c80:	e018      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x3U;
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	2203      	movs	r2, #3
 8002c86:	f362 030a 	bfi	r3, r2, #0, #11
 8002c8a:	813b      	strh	r3, [r7, #8]
					break;
 8002c8c:	e012      	b.n	8002cb4 <XMC_USBD_EndpointConfigure+0x294>
 8002c8e:	bf00      	nop
 8002c90:	20000cec 	.word	0x20000cec
 8002c94:	30000700 	.word	0x30000700
 8002c98:	30000000 	.word	0x30000000
 8002c9c:	2000088c 	.word	0x2000088c
 8002ca0:	20000870 	.word	0x20000870
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002ca4:	88bb      	ldrh	r3, [r7, #4]
 8002ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	f362 030a 	bfi	r3, r2, #0, #11
 8002cb2:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8002cbc:	7abb      	ldrb	r3, [r7, #10]
 8002cbe:	f36f 1345 	bfc	r3, #5, #1
 8002cc2:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4a0f      	ldr	r2, [pc, #60]	; (8002d0c <XMC_USBD_EndpointConfigure+0x2ec>)
 8002cd0:	3370      	adds	r3, #112	; 0x70
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8002cdc:	8a7a      	ldrh	r2, [r7, #18]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	2301      	movs	r3, #1
 8002cec:	408b      	lsls	r3, r1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <XMC_USBD_EndpointConfigure+0x2ec>)
 8002cf8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000cec 	.word	0x20000cec

08002d10 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	2234      	movs	r2, #52	; 0x34
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002d30:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002d32:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	4093      	lsls	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e085      	b.n	8002e6c <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8002d60:	7c7b      	ldrb	r3, [r7, #17]
 8002d62:	f36f 13c7 	bfc	r3, #7, #1
 8002d66:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6e:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8002d78:	7cbb      	ldrb	r3, [r7, #18]
 8002d7a:	f36f 1345 	bfc	r3, #5, #1
 8002d7e:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	7913      	ldrb	r3, [r2, #4]
 8002d84:	f36f 0382 	bfc	r3, #2, #1
 8002d88:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	7913      	ldrb	r3, [r2, #4]
 8002d8e:	f36f 1345 	bfc	r3, #5, #1
 8002d92:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	6853      	ldr	r3, [r2, #4]
 8002d98:	f36f 1304 	bfc	r3, #4, #1
 8002d9c:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	6853      	ldr	r3, [r2, #4]
 8002da2:	f36f 03c3 	bfc	r3, #3, #1
 8002da6:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <XMC_USBD_EndpointUnconfigure+0xb4>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d112      	bne.n	8002dea <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002dd0:	336a      	adds	r3, #106	; 0x6a
 8002dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8002dda:	89ba      	ldrh	r2, [r7, #12]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <XMC_USBD_EndpointUnconfigure+0xf6>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	791b      	ldrb	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d123      	bne.n	8002e4e <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e12:	3370      	adds	r3, #112	; 0x70
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8002e1e:	89fa      	ldrh	r2, [r7, #14]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <XMC_USBD_EndpointUnconfigure+0x16c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	7b5b      	ldrb	r3, [r3, #13]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10a      	bne.n	8002e4e <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e3a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e40:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002e44:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	43d2      	mvns	r2, r2
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <XMC_USBD_EndpointUnconfigure+0x168>)
 8002e50:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	889b      	ldrh	r3, [r3, #4]
 8002e5c:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fbde 	bl	8001624 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8002e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000cec 	.word	0x20000cec
 8002e7c:	20000ce8 	.word	0x20000ce8

08002e80 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <XMC_USBD_GetFrameNumber+0x28>)
 8002e88:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	80fb      	strh	r3, [r7, #6]
  return result;
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	20000cec 	.word	0x20000cec

08002eac <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <XMC_USBD_IsEnumDone+0x34>)
 8002eb2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <XMC_USBD_IsEnumDone+0x28>
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <XMC_USBD_IsEnumDone+0x34>)
 8002ec2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <XMC_USBD_IsEnumDone+0x28>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <XMC_USBD_IsEnumDone+0x2a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	20000cec 	.word	0x20000cec

08002ee4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8002eec:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002eee:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8002ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80d4 	bne.w	80030b6 <CDC_Device_ProcessControlRequest+0x1d2>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 8002f10:	889b      	ldrh	r3, [r3, #4]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f040 80cd 	bne.w	80030ba <CDC_Device_ProcessControlRequest+0x1d6>
	  return;

	switch (USB_ControlRequest.bRequest)
 8002f20:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	3b20      	subs	r3, #32
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	f200 80d2 	bhi.w	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <CDC_Device_ProcessControlRequest+0x50>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002fd5 	.word	0x08002fd5
 8002f38:	08002f45 	.word	0x08002f45
 8002f3c:	08003065 	.word	0x08003065
 8002f40:	0800308d 	.word	0x0800308d
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002f44:	4b65      	ldr	r3, [pc, #404]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2ba1      	cmp	r3, #161	; 0xa1
 8002f4a:	f040 80b8 	bne.w	80030be <CDC_Device_ProcessControlRequest+0x1da>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8002f4e:	4a62      	ldr	r2, [pc, #392]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002f50:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002f54:	f36f 0341 	bfc	r3, #1, #1
 8002f58:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 8002f5c:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002f5e:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002f60:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002f64:	461a      	mov	r2, r3
 8002f66:	232c      	movs	r3, #44	; 0x2c
 8002f68:	fb03 f302 	mul.w	r3, r3, r2
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <CDC_Device_ProcessControlRequest+0xb0>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <CDC_Device_ProcessControlRequest+0xb0>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <CDC_Device_ProcessControlRequest+0xb2>
 8002f94:	2300      	movs	r3, #0
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1db      	bne.n	8002f5e <CDC_Device_ProcessControlRequest+0x7a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fe10 	bl	8003bd0 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7f1b      	ldrb	r3, [r3, #28]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd9f 	bl	8003af8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7f5b      	ldrb	r3, [r3, #29]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fd9a 	bl	8003af8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7f9b      	ldrb	r3, [r3, #30]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd95 	bl	8003af8 <Endpoint_Write_8>

				Endpoint_ClearIN();
 8002fce:	f000 fce9 	bl	80039a4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 8002fd2:	e074      	b.n	80030be <CDC_Device_ProcessControlRequest+0x1da>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b21      	cmp	r3, #33	; 0x21
 8002fda:	d172      	bne.n	80030c2 <CDC_Device_ProcessControlRequest+0x1de>
		device.IsSetupRecieved = 0;
 8002fdc:	4a3e      	ldr	r2, [pc, #248]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002fde:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002fe2:	f36f 0341 	bfc	r3, #1, #1
 8002fe6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 8002fea:	e004      	b.n	8002ff6 <CDC_Device_ProcessControlRequest+0x112>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002fec:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <CDC_Device_ProcessControlRequest+0x1fc>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d067      	beq.n	80030c6 <CDC_Device_ProcessControlRequest+0x1e2>
	 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8002ff8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	232c      	movs	r3, #44	; 0x2c
 8003000:	fb03 f302 	mul.w	r3, r3, r2
 8003004:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60bb      	str	r3, [r7, #8]
		return ep->IsOutRecieved;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
				while (!(Endpoint_IsOUTReceived()))
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e0      	bne.n	8002fec <CDC_Device_ProcessControlRequest+0x108>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800302a:	f000 fe05 	bl	8003c38 <Endpoint_Read_32_LE>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8003034:	f000 fd94 	bl	8003b60 <Endpoint_Read_8>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	771a      	strb	r2, [r3, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8003040:	f000 fd8e 	bl	8003b60 <Endpoint_Read_8>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	775a      	strb	r2, [r3, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 800304c:	f000 fd88 	bl	8003b60 <Endpoint_Read_8>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	779a      	strb	r2, [r3, #30]

				Endpoint_ClearOUT();
 8003058:	f000 fc58 	bl	800390c <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fb1b 	bl	8003698 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
 8003062:	e02e      	b.n	80030c2 <CDC_Device_ProcessControlRequest+0x1de>
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b21      	cmp	r3, #33	; 0x21
 800306a:	d12e      	bne.n	80030ca <CDC_Device_ProcessControlRequest+0x1e6>
		device.IsSetupRecieved = 0;
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 800306e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003072:	f36f 0341 	bfc	r3, #1, #1
 8003076:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 800307c:	885b      	ldrh	r3, [r3, #2]
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	829a      	strh	r2, [r3, #20]

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fb11 	bl	80036ac <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
 800308a:	e01e      	b.n	80030ca <CDC_Device_ProcessControlRequest+0x1e6>
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b21      	cmp	r3, #33	; 0x21
 8003092:	d11c      	bne.n	80030ce <CDC_Device_ProcessControlRequest+0x1ea>
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003096:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800309a:	f36f 0341 	bfc	r3, #1, #1
 800309e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <CDC_Device_ProcessControlRequest+0x1f8>)
 80030a4:	885b      	ldrh	r3, [r3, #2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fb07 	bl	80036c0 <EVENT_CDC_Device_BreakSent>
			}

			break;
 80030b2:	bf00      	nop
 80030b4:	e00b      	b.n	80030ce <CDC_Device_ProcessControlRequest+0x1ea>
	  return;
 80030b6:	bf00      	nop
 80030b8:	e00a      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
	  return;
 80030ba:	bf00      	nop
 80030bc:	e008      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80030be:	bf00      	nop
 80030c0:	e006      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80030c2:	bf00      	nop
 80030c4:	e004      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
					  return;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80030ce:	bf00      	nop
	}
}
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000ba8 	.word	0x20000ba8
 80030dc:	20000ef8 	.word	0x20000ef8
 80030e0:	20000ef5 	.word	0x20000ef5

080030e4 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3314      	adds	r3, #20
 80030f0:	220c      	movs	r2, #12
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fc89 	bl	8006a0c <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	719a      	strb	r2, [r3, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	731a      	strb	r2, [r3, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	749a      	strb	r2, [r3, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3302      	adds	r3, #2
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fdc8 	bl	8003ca8 <Endpoint_ConfigureEndpointTable>
 8003118:	4603      	mov	r3, r0
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <CDC_Device_ConfigureEndpoints+0x44>
	  return false;
 8003124:	2300      	movs	r3, #0
 8003126:	e01c      	b.n	8003162 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3308      	adds	r3, #8
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fdba 	bl	8003ca8 <Endpoint_ConfigureEndpointTable>
 8003134:	4603      	mov	r3, r0
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <CDC_Device_ConfigureEndpoints+0x60>
	  return false;
 8003140:	2300      	movs	r3, #0
 8003142:	e00e      	b.n	8003162 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	330e      	adds	r3, #14
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fdac 	bl	8003ca8 <Endpoint_ConfigureEndpointTable>
 8003150:	4603      	mov	r3, r0
 8003152:	f083 0301 	eor.w	r3, r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <CDC_Device_ConfigureEndpoints+0x7c>
	  return false;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <CDC_Device_ConfigureEndpoints+0x7e>

	return true;
 8003160:	2301      	movs	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <CDC_Device_USBTask+0x90>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b04      	cmp	r3, #4
 800317c:	d139      	bne.n	80031f2 <CDC_Device_USBTask+0x86>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d035      	beq.n	80031f2 <CDC_Device_USBTask+0x86>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	789b      	ldrb	r3, [r3, #2]
 800318a:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <CDC_Device_USBTask+0x94>)
 8003196:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <CDC_Device_USBTask+0x94>)
 80031a4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <CDC_Device_USBTask+0x94>)
 80031aa:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80031ae:	461a      	mov	r2, r3
 80031b0:	232c      	movs	r3, #44	; 0x2c
 80031b2:	fb03 f302 	mul.w	r3, r3, r2
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <CDC_Device_USBTask+0x94>)
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <CDC_Device_USBTask+0x72>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	791b      	ldrb	r3, [r3, #4]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <CDC_Device_USBTask+0x72>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <CDC_Device_USBTask+0x74>
 80031de:	2300      	movs	r3, #0
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3

	if (Endpoint_IsINReady())
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <CDC_Device_USBTask+0x88>
	  CDC_Device_Flush(CDCInterfaceInfo);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8b2 	bl	8003354 <CDC_Device_Flush>
 80031f0:	e000      	b.n	80031f4 <CDC_Device_USBTask+0x88>
	  return;
 80031f2:	bf00      	nop
	#endif
}
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000ef5 	.word	0x20000ef5
 8003200:	20000ba8 	.word	0x20000ba8

08003204 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <CDC_Device_SendString+0x60>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b04      	cmp	r3, #4
 8003216:	d103      	bne.n	8003220 <CDC_Device_SendString+0x1c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <CDC_Device_SendString+0x20>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003220:	2302      	movs	r3, #2
 8003222:	e01b      	b.n	800325c <CDC_Device_SendString+0x58>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	789b      	ldrb	r3, [r3, #2]
 8003228:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <CDC_Device_SendString+0x64>)
 8003234:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <CDC_Device_SendString+0x64>)
 8003242:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f003 fdfa 	bl	8006e40 <strlen>
 800324c:	4603      	mov	r3, r0
 800324e:	b29b      	uxth	r3, r3
 8003250:	2200      	movs	r2, #0
 8003252:	4619      	mov	r1, r3
 8003254:	6838      	ldr	r0, [r7, #0]
 8003256:	f002 fa29 	bl	80056ac <Endpoint_Write_Stream_LE>
 800325a:	4603      	mov	r3, r0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000ef5 	.word	0x20000ef5
 8003268:	20000ba8 	.word	0x20000ba8

0800326c <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <CDC_Device_SendData+0x5c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b04      	cmp	r3, #4
 8003282:	d103      	bne.n	800328c <CDC_Device_SendData+0x20>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <CDC_Device_SendData+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800328c:	2302      	movs	r3, #2
 800328e:	e017      	b.n	80032c0 <CDC_Device_SendData+0x54>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <CDC_Device_SendData+0x60>)
 80032a0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <CDC_Device_SendData+0x60>)
 80032ae:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2200      	movs	r2, #0
 80032b6:	4619      	mov	r1, r3
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f002 f9f7 	bl	80056ac <Endpoint_Write_Stream_LE>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000ef5 	.word	0x20000ef5
 80032cc:	20000ba8 	.word	0x20000ba8

080032d0 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <CDC_Device_SendByte+0x7c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d103      	bne.n	80032ee <CDC_Device_SendByte+0x1e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <CDC_Device_SendByte+0x22>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80032ee:	2302      	movs	r3, #2
 80032f0:	e028      	b.n	8003344 <CDC_Device_SendByte+0x74>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	789b      	ldrb	r3, [r3, #2]
 80032f6:	73bb      	strb	r3, [r7, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <CDC_Device_SendByte+0x80>)
 8003302:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003306:	7bbb      	ldrb	r3, [r7, #14]
 8003308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <CDC_Device_SendByte+0x80>)
 8003310:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8003314:	f000 fbbe 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 8003318:	4603      	mov	r3, r0
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <CDC_Device_SendByte+0x6a>
	{
		Endpoint_ClearIN();
 8003324:	f000 fb3e 	bl	80039a4 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003328:	f000 fa5e 	bl	80037e8 <Endpoint_WaitUntilReady>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <CDC_Device_SendByte+0x6a>
		  return ErrorCode;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	e004      	b.n	8003344 <CDC_Device_SendByte+0x74>
	}

	Endpoint_Write_8(Data);
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fbdb 	bl	8003af8 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000ef5 	.word	0x20000ef5
 8003350:	20000ba8 	.word	0x20000ba8

08003354 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <CDC_Device_Flush+0xc4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b04      	cmp	r3, #4
 8003364:	d103      	bne.n	800336e <CDC_Device_Flush+0x1a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <CDC_Device_Flush+0x1e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800336e:	2302      	movs	r3, #2
 8003370:	e04e      	b.n	8003410 <CDC_Device_Flush+0xbc>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	789b      	ldrb	r3, [r3, #2]
 8003376:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <CDC_Device_Flush+0xc8>)
 8003382:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <CDC_Device_Flush+0xc8>)
 8003390:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <CDC_Device_Flush+0xc8>)
 8003396:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800339a:	461a      	mov	r2, r3
 800339c:	232c      	movs	r3, #44	; 0x2c
 800339e:	fb03 f302 	mul.w	r3, r3, r2
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <CDC_Device_Flush+0xc8>)
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <CDC_Device_Flush+0x6c>
			return ep->InBytesAvailable;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	e002      	b.n	80033c6 <CDC_Device_Flush+0x72>
		else
			return ep->OutBytesAvailable;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	b29b      	uxth	r3, r3

	if (!(Endpoint_BytesInEndpoint()))
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <CDC_Device_Flush+0x7a>
	  return ENDPOINT_READYWAIT_NoError;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e020      	b.n	8003410 <CDC_Device_Flush+0xbc>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 80033ce:	f000 fb61 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]

	Endpoint_ClearIN();
 80033ee:	f000 fad9 	bl	80039a4 <Endpoint_ClearIN>

	if (BankFull)
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <CDC_Device_Flush+0xba>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 80033f8:	f000 f9f6 	bl	80037e8 <Endpoint_WaitUntilReady>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75bb      	strb	r3, [r7, #22]
 8003400:	7dbb      	ldrb	r3, [r7, #22]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <CDC_Device_Flush+0xb6>
		  return ErrorCode;
 8003406:	7dbb      	ldrb	r3, [r7, #22]
 8003408:	e002      	b.n	8003410 <CDC_Device_Flush+0xbc>

		Endpoint_ClearIN();
 800340a:	f000 facb 	bl	80039a4 <Endpoint_ClearIN>
	}

	return ENDPOINT_READYWAIT_NoError;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000ef5 	.word	0x20000ef5
 800341c:	20000ba8 	.word	0x20000ba8

08003420 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003428:	4b38      	ldr	r3, [pc, #224]	; (800350c <CDC_Device_BytesReceived+0xec>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b04      	cmp	r3, #4
 8003430:	d103      	bne.n	800343a <CDC_Device_BytesReceived+0x1a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <CDC_Device_BytesReceived+0x1e>
	  return 0;
 800343a:	2300      	movs	r3, #0
 800343c:	e061      	b.n	8003502 <CDC_Device_BytesReceived+0xe2>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	7a1b      	ldrb	r3, [r3, #8]
 8003442:	74fb      	strb	r3, [r7, #19]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 800344e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 800345c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 8003462:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003466:	461a      	mov	r2, r3
 8003468:	232c      	movs	r3, #44	; 0x2c
 800346a:	fb03 f302 	mul.w	r3, r3, r2
 800346e:	4a28      	ldr	r2, [pc, #160]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	617b      	str	r3, [r7, #20]
		return ep->IsOutRecieved;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 800348a:	2b00      	cmp	r3, #0
 800348c:	d038      	beq.n	8003500 <CDC_Device_BytesReceived+0xe0>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 8003490:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003494:	461a      	mov	r2, r3
 8003496:	232c      	movs	r3, #44	; 0x2c
 8003498:	fb03 f302 	mul.w	r3, r3, r2
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 800349e:	4413      	add	r3, r2
 80034a0:	3304      	adds	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <CDC_Device_BytesReceived+0x9a>
			return ep->InBytesAvailable;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	e002      	b.n	80034c0 <CDC_Device_BytesReceived+0xa0>
			return ep->OutBytesAvailable;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	b29b      	uxth	r3, r3
	{
		if (!(Endpoint_BytesInEndpoint()))
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <CDC_Device_BytesReceived+0xac>
		{
			Endpoint_ClearOUT();
 80034c4:	f000 fa22 	bl	800390c <Endpoint_ClearOUT>
			return 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e01a      	b.n	8003502 <CDC_Device_BytesReceived+0xe2>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 80034ce:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80034d2:	461a      	mov	r2, r3
 80034d4:	232c      	movs	r3, #44	; 0x2c
 80034d6:	fb03 f302 	mul.w	r3, r3, r2
 80034da:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <CDC_Device_BytesReceived+0xf0>)
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	60bb      	str	r3, [r7, #8]
		if (ep->Direction)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <CDC_Device_BytesReceived+0xd8>
			return ep->InBytesAvailable;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	b29b      	uxth	r3, r3
		}
		else
		{
			return Endpoint_BytesInEndpoint();
 80034f6:	e004      	b.n	8003502 <CDC_Device_BytesReceived+0xe2>
			return ep->OutBytesAvailable;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	e000      	b.n	8003502 <CDC_Device_BytesReceived+0xe2>
		}
	}
	else
	{
		return 0;
 8003500:	2300      	movs	r3, #0
	}
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000ef5 	.word	0x20000ef5
 8003510:	20000ba8 	.word	0x20000ba8

08003514 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800351c:	4b3c      	ldr	r3, [pc, #240]	; (8003610 <CDC_Device_ReceiveByte+0xfc>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b04      	cmp	r3, #4
 8003524:	d103      	bne.n	800352e <CDC_Device_ReceiveByte+0x1a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <CDC_Device_ReceiveByte+0x20>
	  return -1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003532:	e068      	b.n	8003606 <CDC_Device_ReceiveByte+0xf2>

	int16_t ReceivedByte = -1;
 8003534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003538:	83fb      	strh	r3, [r7, #30]

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 800354a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 8003558:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 800355e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003562:	461a      	mov	r2, r3
 8003564:	232c      	movs	r3, #44	; 0x2c
 8003566:	fb03 f302 	mul.w	r3, r3, r2
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
		return ep->IsOutRecieved;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 8003586:	2b00      	cmp	r3, #0
 8003588:	d03b      	beq.n	8003602 <CDC_Device_ReceiveByte+0xee>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 800358c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003590:	461a      	mov	r2, r3
 8003592:	232c      	movs	r3, #44	; 0x2c
 8003594:	fb03 f302 	mul.w	r3, r3, r2
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <CDC_Device_ReceiveByte+0xa2>
			return ep->InBytesAvailable;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	e002      	b.n	80035bc <CDC_Device_ReceiveByte+0xa8>
			return ep->OutBytesAvailable;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	b29b      	uxth	r3, r3
	{
		if (Endpoint_BytesInEndpoint())
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <CDC_Device_ReceiveByte+0xb4>
		  ReceivedByte = Endpoint_Read_8();
 80035c0:	f000 face 	bl	8003b60 <Endpoint_Read_8>
 80035c4:	4603      	mov	r3, r0
 80035c6:	83fb      	strh	r3, [r7, #30]
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 80035ca:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035ce:	461a      	mov	r2, r3
 80035d0:	232c      	movs	r3, #44	; 0x2c
 80035d2:	fb03 f302 	mul.w	r3, r3, r2
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <CDC_Device_ReceiveByte+0x100>)
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <CDC_Device_ReceiveByte+0xe0>
			return ep->InBytesAvailable;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	e002      	b.n	80035fa <CDC_Device_ReceiveByte+0xe6>
			return ep->OutBytesAvailable;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	b29b      	uxth	r3, r3

		if (!(Endpoint_BytesInEndpoint()))
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <CDC_Device_ReceiveByte+0xee>
		  Endpoint_ClearOUT();
 80035fe:	f000 f985 	bl	800390c <Endpoint_ClearOUT>
	}

	return ReceivedByte;
 8003602:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000ef5 	.word	0x20000ef5
 8003614:	20000ba8 	.word	0x20000ba8

08003618 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <CDC_Device_SendControlLineStateChange+0x74>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b04      	cmp	r3, #4
 8003628:	d12c      	bne.n	8003684 <CDC_Device_SendControlLineStateChange+0x6c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d028      	beq.n	8003684 <CDC_Device_SendControlLineStateChange+0x6c>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7b9b      	ldrb	r3, [r3, #14]
 8003636:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <CDC_Device_SendControlLineStateChange+0x78>)
 8003642:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <CDC_Device_SendControlLineStateChange+0x78>)
 8003650:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8003654:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <CDC_Device_SendControlLineStateChange+0x7c>)
 8003656:	f107 030c 	add.w	r3, r7, #12
 800365a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800365e:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	2200      	movs	r2, #0
 8003668:	2108      	movs	r1, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f002 f81e 	bl	80056ac <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3316      	adds	r3, #22
 8003674:	2200      	movs	r2, #0
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f002 f817 	bl	80056ac <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 800367e:	f000 f991 	bl	80039a4 <Endpoint_ClearIN>
 8003682:	e000      	b.n	8003686 <CDC_Device_SendControlLineStateChange+0x6e>
	  return;
 8003684:	bf00      	nop
}
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000ef5 	.word	0x20000ef5
 8003690:	20000ba8 	.word	0x20000ba8
 8003694:	08007394 	.word	0x08007394

08003698 <EVENT_CDC_Device_LineEncodingChanged>:
	return ReceivedByte;
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 80036dc:	f000 f802 	bl	80036e4 <USB_DeviceTask>
	#endif
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <USB_DeviceTask+0x7c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d030      	beq.n	8003756 <USB_DeviceTask+0x72>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <USB_DeviceTask+0x80>)
 80036f6:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <USB_DeviceTask+0x80>)
 80036fc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003700:	4313      	orrs	r3, r2
 8003702:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8003704:	71fb      	strb	r3, [r7, #7]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003706:	2200      	movs	r2, #0
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <USB_DeviceTask+0x80>)
 800370a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800370e:	2200      	movs	r2, #0
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <USB_DeviceTask+0x80>)
 8003712:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <USB_DeviceTask+0x80>)
 8003718:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800371c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 8003730:	f7fd f886 	bl	8000840 <USB_Device_ProcessControlRequest>
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003738:	79bb      	ldrb	r3, [r7, #6]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <USB_DeviceTask+0x80>)
 8003742:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003746:	79bb      	ldrb	r3, [r7, #6]
 8003748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <USB_DeviceTask+0x80>)
 8003750:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 8003754:	e000      	b.n	8003758 <USB_DeviceTask+0x74>
	  return;
 8003756:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000ef5 	.word	0x20000ef5
 8003764:	20000ba8 	.word	0x20000ba8

08003768 <__NVIC_EnableIRQ>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <__NVIC_EnableIRQ+0x38>)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	79fa      	ldrb	r2, [r7, #7]
 8003784:	f002 021f 	and.w	r2, r2, #31
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_DisableIRQ>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db10      	blt.n	80037d8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80037b6:	490b      	ldr	r1, [pc, #44]	; (80037e4 <__NVIC_DisableIRQ+0x40>)
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	79fa      	ldrb	r2, [r7, #7]
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	3320      	adds	r3, #32
 80037cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037d4:	f3bf 8f6f 	isb	sy
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 80037ee:	2364      	movs	r3, #100	; 0x64
 80037f0:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 80037f2:	4b44      	ldr	r3, [pc, #272]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	4798      	blx	r3
 80037fa:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 80037fc:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 8003800:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003804:	461a      	mov	r2, r3
 8003806:	232c      	movs	r3, #44	; 0x2c
 8003808:	fb03 f302 	mul.w	r3, r3, r2
 800380c:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800381c:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d122      	bne.n	8003868 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 8003824:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003828:	461a      	mov	r2, r3
 800382a:	232c      	movs	r3, #44	; 0x2c
 800382c:	fb03 f302 	mul.w	r3, r3, r2
 8003830:	4a34      	ldr	r2, [pc, #208]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <Endpoint_WaitUntilReady+0x70>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <Endpoint_WaitUntilReady+0x70>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <Endpoint_WaitUntilReady+0x72>
 8003858:	2300      	movs	r3, #0
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01a      	beq.n	800389a <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003864:	2300      	movs	r3, #0
 8003866:	e048      	b.n	80038fa <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 800386a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800386e:	461a      	mov	r2, r3
 8003870:	232c      	movs	r3, #44	; 0x2c
 8003872:	fb03 f302 	mul.w	r3, r3, r2
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003896:	2300      	movs	r3, #0
 8003898:	e02f      	b.n	80038fa <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <Endpoint_WaitUntilReady+0x120>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80038a6:	2302      	movs	r3, #2
 80038a8:	e027      	b.n	80038fa <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d101      	bne.n	80038b4 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e022      	b.n	80038fa <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 80038b6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80038ba:	4619      	mov	r1, r3
 80038bc:	4a11      	ldr	r2, [pc, #68]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 80038be:	232c      	movs	r3, #44	; 0x2c
 80038c0:	fb03 f301 	mul.w	r3, r3, r1
 80038c4:	4413      	add	r3, r2
 80038c6:	7a1b      	ldrb	r3, [r3, #8]
 80038c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038cc:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e011      	b.n	80038fa <Endpoint_WaitUntilReady+0x112>
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <Endpoint_WaitUntilReady+0x11c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	4798      	blx	r3
 80038de:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 80038e0:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 80038e2:	8a3a      	ldrh	r2, [r7, #16]
 80038e4:	8abb      	ldrh	r3, [r7, #20]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d089      	beq.n	80037fe <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 80038ea:	8a3b      	ldrh	r3, [r7, #16]
 80038ec:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	75fa      	strb	r2, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d182      	bne.n	80037fe <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 80038f8:	2304      	movs	r3, #4
		}
	}
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000ba8 	.word	0x20000ba8
 8003908:	20000ef5 	.word	0x20000ef5

0800390c <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <Endpoint_ClearOUT+0x94>)
 8003914:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003918:	461a      	mov	r2, r3
 800391a:	232c      	movs	r3, #44	; 0x2c
 800391c:	fb03 f302 	mul.w	r3, r3, r2
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <Endpoint_ClearOUT+0x94>)
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02f      	beq.n	8003996 <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <Endpoint_ClearOUT+0x94>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	7810      	ldrb	r0, [r2, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6911      	ldr	r1, [r2, #16]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6952      	ldr	r2, [r2, #20]
 8003948:	4798      	blx	r3
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <Endpoint_ClearOUT+0x8c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	8893      	ldrh	r3, [r2, #4]
 8003972:	f043 0308 	orr.w	r3, r3, #8
 8003976:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	8893      	ldrh	r3, [r2, #4]
 800397c:	f36f 1345 	bfc	r3, #5, #1
 8003980:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <Endpoint_ClearOUT+0x94>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	7810      	ldrb	r0, [r2, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6952      	ldr	r2, [r2, #20]
 8003990:	4611      	mov	r1, r2
 8003992:	4798      	blx	r3
 8003994:	e000      	b.n	8003998 <Endpoint_ClearOUT+0x8c>
		return;
 8003996:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000ba8 	.word	0x20000ba8

080039a4 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <Endpoint_ClearIN+0xe8>)
 80039ac:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80039b0:	461a      	mov	r2, r3
 80039b2:	232c      	movs	r3, #44	; 0x2c
 80039b4:	fb03 f302 	mul.w	r3, r3, r2
 80039b8:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <Endpoint_ClearIN+0xe8>)
 80039ba:	4413      	add	r3, r2
 80039bc:	3304      	adds	r3, #4
 80039be:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d059      	beq.n	8003a82 <Endpoint_ClearIN+0xde>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	791b      	ldrb	r3, [r3, #4]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d052      	beq.n	8003a82 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	8893      	ldrh	r3, [r2, #4]
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 80039fc:	206b      	movs	r0, #107	; 0x6b
 80039fe:	f7ff fed1 	bl	80037a4 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <Endpoint_ClearIN+0xe8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a14:	4798      	blx	r3
 8003a16:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8003a30:	206b      	movs	r0, #107	; 0x6b
 8003a32:	f7ff fe99 	bl	8003768 <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <Endpoint_ClearIN+0xec>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d121      	bne.n	8003a84 <Endpoint_ClearIN+0xe0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01a      	beq.n	8003a84 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8003a4e:	bf00      	nop
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f8      	bne.n	8003a50 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	8893      	ldrh	r3, [r2, #4]
 8003a62:	f043 0310 	orr.w	r3, r3, #16
 8003a66:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <Endpoint_ClearIN+0xe8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 8003a76:	2200      	movs	r2, #0
 8003a78:	4798      	blx	r3
	  zlp_flag = false;
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <Endpoint_ClearIN+0xec>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e000      	b.n	8003a84 <Endpoint_ClearIN+0xe0>
		return;
 8003a82:	bf00      	nop
	}
}
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000ba8 	.word	0x20000ba8
 8003a90:	200008a8 	.word	0x200008a8

08003a94 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <Endpoint_IsReadWriteAllowed+0x60>)
 8003a9c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	232c      	movs	r3, #44	; 0x2c
 8003aa4:	fb03 f302 	mul.w	r3, r3, r2
 8003aa8:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <Endpoint_IsReadWriteAllowed+0x60>)
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	bf34      	ite	cc
 8003ace:	2301      	movcc	r3, #1
 8003ad0:	2300      	movcs	r3, #0
 8003ad2:	71fb      	strb	r3, [r7, #7]
 8003ad4:	e006      	b.n	8003ae4 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000ba8 	.word	0x20000ba8

08003af8 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <Endpoint_Write_8+0x64>)
 8003b04:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b08:	461a      	mov	r2, r3
 8003b0a:	232c      	movs	r3, #44	; 0x2c
 8003b0c:	fb03 f302 	mul.w	r3, r3, r2
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <Endpoint_Write_8+0x64>)
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d20d      	bcs.n	8003b44 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	4413      	add	r3, r2
 8003b32:	79fa      	ldrb	r2, [r7, #7]
 8003b34:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	619a      	str	r2, [r3, #24]

	      Success = true;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <Endpoint_Write_8+0x24>
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000ba8 	.word	0x20000ba8

08003b60 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <Endpoint_Read_8+0x6c>)
 8003b68:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	232c      	movs	r3, #44	; 0x2c
 8003b70:	fb03 f302 	mul.w	r3, r3, r2
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <Endpoint_Read_8+0x6c>)
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]
		  Success = true;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	f083 0301 	eor.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e2      	bne.n	8003b84 <Endpoint_Read_8+0x24>
	 return data;
 8003bbe:	79bb      	ldrb	r3, [r7, #6]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000ba8 	.word	0x20000ba8

08003bd0 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <Endpoint_Write_32_LE+0x64>)
 8003bda:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003bde:	461a      	mov	r2, r3
 8003be0:	232c      	movs	r3, #44	; 0x2c
 8003be2:	fb03 f302 	mul.w	r3, r3, r2
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <Endpoint_Write_32_LE+0x64>)
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	3b03      	subs	r3, #3
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d20d      	bcs.n	8003c1c <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	619a      	str	r2, [r3, #24]

			Success = true;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	f083 0301 	eor.w	r3, r3, #1
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e4      	bne.n	8003bf2 <Endpoint_Write_32_LE+0x22>
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000ba8 	.word	0x20000ba8

08003c38 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <Endpoint_Read_32_LE+0x6c>)
 8003c40:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c44:	461a      	mov	r2, r3
 8003c46:	232c      	movs	r3, #44	; 0x2c
 8003c48:	fb03 f302 	mul.w	r3, r3, r2
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <Endpoint_Read_32_LE+0x6c>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d912      	bls.n	8003c8a <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	1f1a      	subs	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]

			Success = true;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	f083 0301 	eor.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e2      	bne.n	8003c5c <Endpoint_Read_32_LE+0x24>
	return data;
 8003c96:	68bb      	ldr	r3, [r7, #8]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000ba8 	.word	0x20000ba8

08003ca8 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e092      	b.n	8003de0 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8003cd2:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69dc      	ldr	r4, [r3, #28]
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	7818      	ldrb	r0, [r3, #0]
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	7919      	ldrb	r1, [r3, #4]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	885b      	ldrh	r3, [r3, #2]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	47a0      	blx	r4
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e067      	b.n	8003dec <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8003d1c:	7bb9      	ldrb	r1, [r7, #14]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	7818      	ldrb	r0, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d32:	232c      	movs	r3, #44	; 0x2c
 8003d34:	fb03 f301 	mul.w	r3, r3, r1
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8003d40:	7bb8      	ldrb	r0, [r7, #14]
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	885b      	ldrh	r3, [r3, #2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5a:	b2d9      	uxtb	r1, r3
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d5e:	232c      	movs	r3, #44	; 0x2c
 8003d60:	fb03 f300 	mul.w	r3, r3, r0
 8003d64:	441a      	add	r2, r3
 8003d66:	8913      	ldrh	r3, [r2, #8]
 8003d68:	f361 138c 	bfi	r3, r1, #6, #7
 8003d6c:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8003d6e:	7bbb      	ldrb	r3, [r7, #14]
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	441a      	add	r2, r3
 8003d7a:	7a13      	ldrb	r3, [r2, #8]
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	441a      	add	r2, r3
 8003d8e:	7a13      	ldrb	r3, [r2, #8]
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	461a      	mov	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db15      	blt.n	8003dda <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	7818      	ldrb	r0, [r3, #0]
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f4ff af68 	bcc.w	8003cba <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8003dea:	2301      	movs	r3, #1
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	20000ba8 	.word	0x20000ba8

08003df8 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	50004600 	.word	0x50004600

08003e14 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	50004600 	.word	0x50004600

08003e30 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	b2db      	uxtb	r3, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	50004600 	.word	0x50004600

08003e50 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000ffc0 	.word	0x2000ffc0
 8003e74:	50004600 	.word	0x50004600

08003e78 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000ffc0 	.word	0x2000ffc0

08003e90 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <XMC_SCU_GetMirrorStatus+0x14>)
 8003e96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	50004000 	.word	0x50004000

08003ea8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8003eb0:	f002 f888 	bl	8005fc4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <XMC_SCU_lDelay+0x40>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <XMC_SCU_lDelay+0x44>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0c9a      	lsrs	r2, r3, #18
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e003      	b.n	8003ed6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8003ece:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3f7      	bcc.n	8003ece <XMC_SCU_lDelay+0x26>
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2000ffc0 	.word	0x2000ffc0
 8003eec:	431bde83 	.word	0x431bde83

08003ef0 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8003ef8:	4905      	ldr	r1, [pc, #20]	; (8003f10 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	50004074 	.word	0x50004074

08003f14 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8003f1c:	4906      	ldr	r1, [pc, #24]	; (8003f38 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	4013      	ands	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	50004074 	.word	0x50004074

08003f3c <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8003f44:	4905      	ldr	r1, [pc, #20]	; (8003f5c <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	50004074 	.word	0x50004074

08003f60 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8003f66:	685b      	ldr	r3, [r3, #4]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	50004074 	.word	0x50004074

08003f78 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60d3      	str	r3, [r2, #12]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	50004074 	.word	0x50004074

08003f98 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <XMC_SCU_GetBootMode+0x18>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	50004000 	.word	0x50004000

08003fb4 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8003fbe:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <XMC_SCU_SetBootMode+0x1c>)
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	6113      	str	r3, [r2, #16]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	50004000 	.word	0x50004000

08003fd4 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8003fdc:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <XMC_SCU_ReadGPR+0x20>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	330a      	adds	r3, #10
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	685b      	ldr	r3, [r3, #4]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	50004000 	.word	0x50004000

08003ff8 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8004002:	4a06      	ldr	r2, [pc, #24]	; (800401c <XMC_SCU_WriteGPR+0x24>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	330a      	adds	r3, #10
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	50004000 	.word	0x50004000

08004020 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 800402c:	4a09      	ldr	r2, [pc, #36]	; (8004054 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3328      	adds	r3, #40	; 0x28
 8004032:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004036:	2001      	movs	r0, #1
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	fa00 f303 	lsl.w	r3, r0, r3
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3328      	adds	r3, #40	; 0x28
 8004044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	50004000 	.word	0x50004000

08004058 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8004062:	490b      	ldr	r1, [pc, #44]	; (8004090 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3328      	adds	r3, #40	; 0x28
 800406a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800406e:	2001      	movs	r0, #1
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	fa00 f303 	lsl.w	r3, r0, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	50004000 	.word	0x50004000

08004094 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800409e:	4908      	ldr	r1, [pc, #32]	; (80040c0 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80040a8:	4313      	orrs	r3, r2
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 80040aa:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80040ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	50004000 	.word	0x50004000

080040c4 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 80040c8:	4a06      	ldr	r2, [pc, #24]	; (80040e4 <XMC_SCU_EnableTemperatureSensor+0x20>)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <XMC_SCU_EnableTemperatureSensor+0x20>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	50004000 	.word	0x50004000

080040e8 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 80040ec:	4a06      	ldr	r2, [pc, #24]	; (8004108 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	50004000 	.word	0x50004000

0800410c <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8004112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	50004000 	.word	0x50004000

08004134 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	50004000 	.word	0x50004000

0800415c <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8004166:	f7ff ffd1 	bl	800410c <XMC_SCU_IsTemperatureSensorEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 800417a:	f000 f831 	bl	80041e0 <XMC_SCU_IsTemperatureSensorBusy>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8004184:	2302      	movs	r3, #2
 8004186:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8004198:	79fb      	ldrb	r3, [r7, #7]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	50004000 	.word	0x50004000

080041a8 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80041ae:	f7ff ffad 	bl	800410c <XMC_SCU_IsTemperatureSensorEnabled>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 80041be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	e005      	b.n	80041d2 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <XMC_SCU_GetTemperatureMeasurement+0x34>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d0:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 80041d2:	687b      	ldr	r3, [r7, #4]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	50004000 	.word	0x50004000

080041e0 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	50004000 	.word	0x50004000

08004208 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800421a:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8004224:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <XMC_SCU_WriteToRetentionMemory+0x48>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004234:	bf00      	nop
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004238:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800423c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f8      	bne.n	8004236 <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	50004000 	.word	0x50004000

08004254 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004264:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004276:	bf00      	nop
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800427a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800427e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f8      	bne.n	8004278 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004288:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	50004000 	.word	0x50004000

0800429c <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b085      	sub	sp, #20
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f000 faf1 	bl	800488c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80042aa:	f000 fd7f 	bl	8004dac <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	79db      	ldrb	r3, [r3, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80042b6:	f000 ff75 	bl	80051a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80042ba:	bf00      	nop
 80042bc:	f000 ff60 	bl	8005180 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f7      	bne.n	80042bc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7a5b      	ldrb	r3, [r3, #9]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fb6f 	bl	80049b4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80042d6:	bf00      	nop
 80042d8:	f7ff fdda 	bl	8003e90 <XMC_SCU_GetMirrorStatus>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1fa      	bne.n	80042d8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7a1b      	ldrb	r3, [r3, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd0c 	bl	8004d04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7c1b      	ldrb	r3, [r3, #16]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fb7f 	bl	80049f4 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7c5b      	ldrb	r3, [r3, #17]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fba6 	bl	8004a4c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7c9b      	ldrb	r3, [r3, #18]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fb8b 	bl	8004a20 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7cdb      	ldrb	r3, [r3, #19]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fbb2 	bl	8004a78 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	799b      	ldrb	r3, [r3, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800431c:	f000 ffd6 	bl	80052cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8004320:	bf00      	nop
 8004322:	f000 fffb 	bl	800531c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8004326:	4603      	mov	r3, r0
 8004328:	f083 0301 	eor.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f7      	bne.n	8004322 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	78db      	ldrb	r3, [r3, #3]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800433a:	f001 f853 	bl	80053e4 <XMC_SCU_CLOCK_DisableSystemPll>
 800433e:	e011      	b.n	8004364 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8004340:	f001 f83e 	bl	80053c0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8898      	ldrh	r0, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004350:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004356:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	4623      	mov	r3, r4
 8004360:	f001 f852 	bl	8005408 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d103      	bne.n	8004376 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800436e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004372:	f000 fa8b 	bl	800488c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8004376:	f001 fe25 	bl	8005fc4 <SystemCoreClockUpdate>
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
	...

08004384 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <XMC_SCU_TRAP_Enable+0x24>)
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <XMC_SCU_TRAP_Enable+0x24>)
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	43db      	mvns	r3, r3
 8004396:	4013      	ands	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	50004160 	.word	0x50004160

080043ac <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80043b4:	4905      	ldr	r1, [pc, #20]	; (80043cc <XMC_SCU_TRAP_Disable+0x20>)
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <XMC_SCU_TRAP_Disable+0x20>)
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	50004160 	.word	0x50004160

080043d0 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <XMC_SCU_TRAP_GetStatus+0x14>)
 80043d6:	685b      	ldr	r3, [r3, #4]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	50004160 	.word	0x50004160

080043e8 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <XMC_SCU_TRAP_Trigger+0x1c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6113      	str	r3, [r2, #16]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	50004160 	.word	0x50004160

08004408 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60d3      	str	r3, [r2, #12]
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	50004160 	.word	0x50004160

08004428 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8004430:	4905      	ldr	r1, [pc, #20]	; (8004448 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4313      	orrs	r3, r2
 800443a:	614b      	str	r3, [r1, #20]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	5000413c 	.word	0x5000413c

0800444c <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <XMC_SCU_PARITY_GetStatus+0x14>)
 8004452:	695b      	ldr	r3, [r3, #20]
} 
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	5000413c 	.word	0x5000413c

08004464 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 800446c:	4905      	ldr	r1, [pc, #20]	; (8004484 <XMC_SCU_PARITY_Enable+0x20>)
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <XMC_SCU_PARITY_Enable+0x20>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	5000413c 	.word	0x5000413c

08004488 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8004490:	4906      	ldr	r1, [pc, #24]	; (80044ac <XMC_SCU_PARITY_Disable+0x24>)
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <XMC_SCU_PARITY_Disable+0x24>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	43db      	mvns	r3, r3
 800449a:	4013      	ands	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	5000413c 	.word	0x5000413c

080044b0 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80044b8:	4905      	ldr	r1, [pc, #20]	; (80044d0 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	5000413c 	.word	0x5000413c

080044d4 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	4013      	ands	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	5000413c 	.word	0x5000413c

080044fc <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8004504:	4905      	ldr	r1, [pc, #20]	; (800451c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	614b      	str	r3, [r1, #20]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	50004074 	.word	0x50004074

08004520 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	43db      	mvns	r3, r3
 8004532:	4013      	ands	r3, r2
 8004534:	614b      	str	r3, [r1, #20]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	50004074 	.word	0x50004074

08004548 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0f1b      	lsrs	r3, r3, #28
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800455c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	461a      	mov	r2, r3
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 800456c:	4413      	add	r3, r2
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	601a      	str	r2, [r3, #0]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	50004410 	.word	0x50004410

08004584 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0f1b      	lsrs	r3, r3, #28
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004598:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80045a8:	4413      	add	r3, r2
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	50004414 	.word	0x50004414

080045c0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0f1b      	lsrs	r3, r3, #28
 80045cc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045d4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80045e4:	4413      	add	r3, r2
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	5000440c 	.word	0x5000440c

08004608 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800460e:	f000 f839 	bl	8004684 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8004612:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004628:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e01f      	b.n	8004674 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	3301      	adds	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464c:	3301      	adds	r3, #1
 800464e:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465a:	3301      	adds	r3, #1
 800465c:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	fb02 f203 	mul.w	r2, r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8004674:	68fb      	ldr	r3, [r7, #12]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	50004710 	.word	0x50004710

08004684 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 8004696:	f001 fcff 	bl	8006098 <OSCHP_GetFrequency>
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	e001      	b.n	80046a2 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80046a0:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80046a2:	687b      	ldr	r3, [r7, #4]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	50004710 	.word	0x50004710
 80046b0:	016e3600 	.word	0x016e3600

080046b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80046ba:	f001 fced 	bl	8006098 <OSCHP_GetFrequency>
 80046be:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d116      	bne.n	80046fa <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d6:	3301      	adds	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	0e1b      	lsrs	r3, r3, #24
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	3301      	adds	r3, #1
 80046e6:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	fb02 f203 	mul.w	r2, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	50004710 	.word	0x50004710

08004708 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004712:	f7ff fb9d 	bl	8003e50 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004716:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	50004600 	.word	0x50004600

08004734 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 800473e:	f7ff fb5b 	bl	8003df8 <XMC_SCU_CLOCK_GetUsbClockSource>
 8004742:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d103      	bne.n	8004754 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800474c:	f7ff ff5c 	bl	8004608 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	e005      	b.n	8004760 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800475a:	f7ff ffab 	bl	80046b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 800475e:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8004768:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	50004600 	.word	0x50004600

0800477c <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004782:	f7ff ff41 	bl	8004608 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004786:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8004790:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	50004600 	.word	0x50004600

080047a4 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80047ae:	f7ff fb31 	bl	8003e14 <XMC_SCU_CLOCK_GetWdtClockSource>
 80047b2:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ba:	d103      	bne.n	80047c4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80047bc:	f7ff ff24 	bl	8004608 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	e00c      	b.n	80047de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e006      	b.n	80047de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d6:	d102      	bne.n	80047de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 80047d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047dc:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 80047e4:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	016e3600 	.word	0x016e3600
 80047f8:	50004600 	.word	0x50004600

080047fc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8004806:	f7ff fb13 	bl	8003e30 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 800480a:	4603      	mov	r3, r0
 800480c:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d10d      	bne.n	8004830 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004814:	f7ff fef8 	bl	8004608 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004818:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004824:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	e016      	b.n	800485e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004836:	f7ff fb0b 	bl	8003e50 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	e00f      	b.n	800485e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d10c      	bne.n	800485e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8004844:	f7ff ff36 	bl	80046b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8004848:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004854:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 800485e:	687b      	ldr	r3, [r7, #4]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	50004600 	.word	0x50004600

0800486c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8004870:	f7ff fb02 	bl	8003e78 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8004874:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800487e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	50004600 	.word	0x50004600

0800488c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8004894:	4906      	ldr	r1, [pc, #24]	; (80048b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	50004600 	.word	0x50004600

080048b4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80048bc:	4906      	ldr	r1, [pc, #24]	; (80048d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	50004600 	.word	0x50004600

080048dc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80048e4:	4906      	ldr	r1, [pc, #24]	; (8004900 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	50004600 	.word	0x50004600

08004904 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800490e:	4907      	ldr	r1, [pc, #28]	; (800492c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8004918:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800491a:	4313      	orrs	r3, r2
 800491c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	50004600 	.word	0x50004600

08004930 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8004950:	e007      	b.n	8004962 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004952:	4a07      	ldr	r2, [pc, #28]	; (8004970 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	60d3      	str	r3, [r2, #12]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	50004710 	.word	0x50004710

08004974 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800497e:	bf00      	nop
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8004982:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f8      	bne.n	8004980 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800498e:	4908      	ldr	r1, [pc, #32]	; (80049b0 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8004998:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800499a:	4313      	orrs	r3, r2
 800499c:	60cb      	str	r3, [r1, #12]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	50004000 	.word	0x50004000
 80049b0:	50004300 	.word	0x50004300

080049b4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80049be:	bf00      	nop
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80049c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f8      	bne.n	80049c0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80049ce:	4908      	ldr	r1, [pc, #32]	; (80049f0 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80049da:	4313      	orrs	r3, r2
 80049dc:	60cb      	str	r3, [r1, #12]
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	50004000 	.word	0x50004000
 80049f0:	50004300 	.word	0x50004300

080049f4 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60cb      	str	r3, [r1, #12]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	50004600 	.word	0x50004600

08004a20 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004a28:	4907      	ldr	r1, [pc, #28]	; (8004a48 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004a36:	4313      	orrs	r3, r2
 8004a38:	620b      	str	r3, [r1, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	50004600 	.word	0x50004600

08004a4c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8004a62:	4313      	orrs	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	50004600 	.word	0x50004600

08004a78 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004a80:	4907      	ldr	r1, [pc, #28]	; (8004aa0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	614b      	str	r3, [r1, #20]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	50004600 	.word	0x50004600

08004aa4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8004aba:	4313      	orrs	r3, r2
 8004abc:	618b      	str	r3, [r1, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	50004600 	.word	0x50004600

08004ad0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8004ad8:	4907      	ldr	r1, [pc, #28]	; (8004af8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61cb      	str	r3, [r1, #28]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	50004600 	.word	0x50004600

08004afc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8004b12:	4313      	orrs	r3, r2
 8004b14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	50004600 	.word	0x50004600

08004b28 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8004b30:	4908      	ldr	r1, [pc, #32]	; (8004b54 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	3a01      	subs	r2, #1
 8004b42:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	50004600 	.word	0x50004600

08004b58 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8004b62:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	6053      	str	r3, [r2, #4]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	50004600 	.word	0x50004600

08004b78 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	6093      	str	r3, [r2, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	50004600 	.word	0x50004600

08004b98 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bf14      	ite	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	2300      	moveq	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	50004600 	.word	0x50004600

08004bc4 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004bf0 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8004bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bde:	ee17 3a90 	vmov	r3, s15
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	50004200 	.word	0x50004200
 8004bf0:	3bbe0ded 	.word	0x3bbe0ded

08004bf4 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c24 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8004c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c10:	ee17 3a90 	vmov	r3, s15
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	50004200 	.word	0x50004200
 8004c24:	3cb851ec 	.word	0x3cb851ec

08004c28 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	f023 0302 	bic.w	r3, r3, #2
 8004c3a:	6153      	str	r3, [r2, #20]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	50004710 	.word	0x50004710

08004c4c <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6153      	str	r3, [r2, #20]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	50004710 	.word	0x50004710

08004c70 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f043 0310 	orr.w	r3, r3, #16
 8004c90:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8004c92:	4914      	ldr	r1, [pc, #80]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8004ca4:	4a0f      	ldr	r2, [pc, #60]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8004cc8:	bf00      	nop
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f9      	beq.n	8004cca <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	50004710 	.word	0x50004710

08004ce8 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8004cee:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8004cf0:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	50004710 	.word	0x50004710
 8004d00:	00010003 	.word	0x00010003

08004d04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d18:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10e      	bne.n	8004d3e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d2a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8004d2c:	2064      	movs	r0, #100	; 0x64
 8004d2e:	f7ff f8bb 	bl	8003ea8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8004d32:	4a06      	ldr	r2, [pc, #24]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d3c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8004d3e:	2064      	movs	r0, #100	; 0x64
 8004d40:	f7ff f8b2 	bl	8003ea8 <XMC_SCU_lDelay>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	50004710 	.word	0x50004710

08004d50 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <XMC_SCU_POWER_EnableUsb+0x18>)
 8004d56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d5a:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	50004200 	.word	0x50004200

08004d6c <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <XMC_SCU_POWER_DisableUsb+0x18>)
 8004d72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d76:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	50004200 	.word	0x50004200

08004d88 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	50004710 	.word	0x50004710

08004dac <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8004dc2:	bf00      	nop
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f9      	beq.n	8004dc4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8004dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de2:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8004de4:	bf00      	nop
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f9      	bne.n	8004de6 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	50004200 	.word	0x50004200
 8004e00:	50004400 	.word	0x50004400

08004e04 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8004e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e14:	605a      	str	r2, [r3, #4]
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	50004200 	.word	0x50004200
 8004e24:	50004400 	.word	0x50004400

08004e28 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	50004200 	.word	0x50004200
 8004e60:	50004400 	.word	0x50004400

08004e64 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8004e68:	bf00      	nop
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8004e6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f8      	bne.n	8004e6a <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8004e78:	4a06      	ldr	r2, [pc, #24]	; (8004e94 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	6153      	str	r3, [r2, #20]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	50004000 	.word	0x50004000
 8004e94:	50004300 	.word	0x50004300

08004e98 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8004e9c:	bf00      	nop
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8004ea0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f8      	bne.n	8004e9e <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8004eac:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6153      	str	r3, [r2, #20]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	50004000 	.word	0x50004000
 8004ec8:	50004300 	.word	0x50004300

08004ecc <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8004ed4:	bf00      	nop
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8004ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f8      	bne.n	8004ed6 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8004ee4:	4a05      	ldr	r2, [pc, #20]	; (8004efc <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6053      	str	r3, [r2, #4]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	50004000 	.word	0x50004000
 8004efc:	50004300 	.word	0x50004300

08004f00 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8004f08:	bf00      	nop
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8004f0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f8      	bne.n	8004f0a <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6093      	str	r3, [r2, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	50004000 	.word	0x50004000
 8004f30:	50004300 	.word	0x50004300

08004f34 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004f3c:	bf00      	nop
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <XMC_SCU_HIB_EnableEvent+0x30>)
 8004f40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f8      	bne.n	8004f3e <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8004f4c:	4906      	ldr	r1, [pc, #24]	; (8004f68 <XMC_SCU_HIB_EnableEvent+0x34>)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <XMC_SCU_HIB_EnableEvent+0x34>)
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60cb      	str	r3, [r1, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	50004000 	.word	0x50004000
 8004f68:	50004300 	.word	0x50004300

08004f6c <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004f74:	bf00      	nop
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <XMC_SCU_HIB_DisableEvent+0x34>)
 8004f78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f8      	bne.n	8004f76 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8004f84:	4907      	ldr	r1, [pc, #28]	; (8004fa4 <XMC_SCU_HIB_DisableEvent+0x38>)
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <XMC_SCU_HIB_DisableEvent+0x38>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	43d2      	mvns	r2, r2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	60cb      	str	r3, [r1, #12]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	50004000 	.word	0x50004000
 8004fa4:	50004300 	.word	0x50004300

08004fa8 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004fac:	bf00      	nop
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8004fb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f8      	bne.n	8004fae <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8004fbc:	4a06      	ldr	r2, [pc, #24]	; (8004fd8 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f043 0310 	orr.w	r3, r3, #16
 8004fc6:	60d3      	str	r3, [r2, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	50004000 	.word	0x50004000
 8004fd8:	50004300 	.word	0x50004300

08004fdc <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8004fec:	f7ff ffdc 	bl	8004fa8 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005002:	bf00      	nop
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8005006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f8      	bne.n	8005004 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8005018:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8005024:	e005      	b.n	8005032 <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	60d3      	str	r3, [r2, #12]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	50004000 	.word	0x50004000
 8005044:	50004300 	.word	0x50004300

08005048 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005054:	bf00      	nop
 8005056:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8005058:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f8      	bne.n	8005056 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8005064:	480c      	ldr	r0, [pc, #48]	; (8005098 <XMC_SCU_HIB_SetPinMode+0x50>)
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <XMC_SCU_HIB_SetPinMode+0x50>)
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8005084:	4313      	orrs	r3, r2
 8005086:	60c3      	str	r3, [r0, #12]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	50004000 	.word	0x50004000
 8005098:	50004300 	.word	0x50004300

0800509c <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	460a      	mov	r2, r1
 80050a6:	71fb      	strb	r3, [r7, #7]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80050ac:	bf00      	nop
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <XMC_SCU_HIB_SetPinOutputLevel+0x4c>)
 80050b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f8      	bne.n	80050ae <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	4013      	ands	r3, r2
                        (level << pin);
 80050d0:	88b9      	ldrh	r1, [r7, #4]
 80050d2:	79fa      	ldrb	r2, [r7, #7]
 80050d4:	fa01 f202 	lsl.w	r2, r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80050d8:	4313      	orrs	r3, r2
 80050da:	60c3      	str	r3, [r0, #12]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	50004000 	.word	0x50004000
 80050ec:	50004300 	.word	0x50004300

080050f0 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80050fa:	bf00      	nop
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <XMC_SCU_HIB_SetInput0+0x48>)
 80050fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f8      	bne.n	80050fc <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <XMC_SCU_HIB_SetInput0+0x4c>)
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <XMC_SCU_HIB_SetInput0+0x4c>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800511a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 800511c:	e005      	b.n	800512a <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 800511e:	4a07      	ldr	r2, [pc, #28]	; (800513c <XMC_SCU_HIB_SetInput0+0x4c>)
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <XMC_SCU_HIB_SetInput0+0x4c>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005128:	60d3      	str	r3, [r2, #12]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	50004000 	.word	0x50004000
 800513c:	50004300 	.word	0x50004300

08005140 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800514a:	bf00      	nop
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800514e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f8      	bne.n	800514c <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 800515a:	4908      	ldr	r1, [pc, #32]	; (800517c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	4313      	orrs	r3, r2
 8005168:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	50004000 	.word	0x50004000
 800517c:	50004300 	.word	0x50004300

08005180 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	50004300 	.word	0x50004300

080051a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80051a8:	bf00      	nop
 80051aa:	4b17      	ldr	r3, [pc, #92]	; (8005208 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80051ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f8      	bne.n	80051aa <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80051c2:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80051c4:	bf00      	nop
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80051c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f8      	bne.n	80051c6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 0308 	orr.w	r3, r3, #8
 80051de:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80051e0:	bf00      	nop
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80051e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f8      	bne.n	80051e2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80051f2:	2208      	movs	r2, #8
 80051f4:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 80051f6:	bf00      	nop
 80051f8:	f7fe fe4a 	bl	8003e90 <XMC_SCU_GetMirrorStatus>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1fa      	bne.n	80051f8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	50004000 	.word	0x50004000
 800520c:	50004300 	.word	0x50004300

08005210 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005214:	bf00      	nop
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8005218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f8      	bne.n	8005216 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005224:	4a06      	ldr	r2, [pc, #24]	; (8005240 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800522e:	61d3      	str	r3, [r2, #28]
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	50004000 	.word	0x50004000
 8005240:	50004300 	.word	0x50004300

08005244 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005248:	bf00      	nop
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 800524c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f8      	bne.n	800524a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8005262:	61d3      	str	r3, [r2, #28]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	50004000 	.word	0x50004000
 8005274:	50004300 	.word	0x50004300

08005278 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800527c:	bf00      	nop
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005280:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f8      	bne.n	800527e <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 800528c:	4a07      	ldr	r2, [pc, #28]	; (80052ac <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800528e:	4b07      	ldr	r3, [pc, #28]	; (80052ac <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8005296:	f043 0320 	orr.w	r3, r3, #32
 800529a:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	50004000 	.word	0x50004000
 80052ac:	50004300 	.word	0x50004300

080052b0 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0301 	and.w	r3, r3, #1
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	50004300 	.word	0x50004300

080052cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80052cc:	b5b0      	push	{r4, r5, r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80052d0:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80052dc:	4d0d      	ldr	r5, [pc, #52]	; (8005314 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80052e6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80052ea:	f000 fed5 	bl	8006098 <OSCHP_GetFrequency>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	0d1b      	lsrs	r3, r3, #20
 80052f8:	3b01      	subs	r3, #1
 80052fa:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80052fc:	4323      	orrs	r3, r4
 80052fe:	606b      	str	r3, [r5, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005300:	4a03      	ldr	r2, [pc, #12]	; (8005310 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005302:	4b03      	ldr	r3, [pc, #12]	; (8005310 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800530a:	6053      	str	r3, [r2, #4]
}
 800530c:	bf00      	nop
 800530e:	bdb0      	pop	{r4, r5, r7, pc}
 8005310:	50004710 	.word	0x50004710
 8005314:	50004700 	.word	0x50004700
 8005318:	6b5fca6b 	.word	0x6b5fca6b

0800531c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005328:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	50004710 	.word	0x50004710

08005344 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005352:	6053      	str	r3, [r2, #4]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	50004700 	.word	0x50004700

08005364 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8005368:	4a05      	ldr	r2, [pc, #20]	; (8005380 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6053      	str	r3, [r2, #4]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	50004700 	.word	0x50004700

08005384 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8005388:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6053      	str	r3, [r2, #4]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	50004700 	.word	0x50004700

080053a4 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	50004700 	.word	0x50004700

080053c0 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	f023 0302 	bic.w	r3, r3, #2
 80053d2:	6053      	str	r3, [r2, #4]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	50004710 	.word	0x50004710

080053e4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80053e8:	4a06      	ldr	r2, [pc, #24]	; (8005404 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f2:	f043 0302 	orr.w	r3, r3, #2
 80053f6:	6053      	str	r3, [r2, #4]
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	50004710 	.word	0x50004710

08005408 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60ba      	str	r2, [r7, #8]
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	4603      	mov	r3, r0
 8005414:	81fb      	strh	r3, [r7, #14]
 8005416:	460b      	mov	r3, r1
 8005418:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fa87 	bl	8004930 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8005422:	7b7b      	ldrb	r3, [r7, #13]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 8084 	bne.w	8005532 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800542a:	89fb      	ldrh	r3, [r7, #14]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8005430:	f000 fe32 	bl	8006098 <OSCHP_GetFrequency>
 8005434:	4602      	mov	r2, r0
 8005436:	4b4c      	ldr	r3, [pc, #304]	; (8005568 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8005438:	fba3 2302 	umull	r2, r3, r3, r2
 800543c:	0c9b      	lsrs	r3, r3, #18
 800543e:	059b      	lsls	r3, r3, #22
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e002      	b.n	800544a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8005444:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005448:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	fb02 f203 	mul.w	r2, r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4a43      	ldr	r2, [pc, #268]	; (800556c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	0d9b      	lsrs	r3, r3, #22
 8005466:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005468:	4a41      	ldr	r2, [pc, #260]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800546a:	4b41      	ldr	r3, [pc, #260]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8005474:	4a3e      	ldr	r2, [pc, #248]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005476:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f043 0310 	orr.w	r3, r3, #16
 800547e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8005480:	493b      	ldr	r1, [pc, #236]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005482:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8005488:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	3a01      	subs	r2, #1
 800548e:	0212      	lsls	r2, r2, #8
 8005490:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3b01      	subs	r3, #1
 8005496:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005498:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3b01      	subs	r3, #1
 800549e:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80054a4:	4a32      	ldr	r2, [pc, #200]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054a6:	4b32      	ldr	r3, [pc, #200]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ae:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80054b0:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f023 0310 	bic.w	r3, r3, #16
 80054ba:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80054bc:	4a2c      	ldr	r2, [pc, #176]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054be:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80054c8:	bf00      	nop
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f9      	beq.n	80054ca <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80054e2:	bf00      	nop
 80054e4:	4b22      	ldr	r3, [pc, #136]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f9      	bne.n	80054e4 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	0d9b      	lsrs	r3, r3, #22
 80054fc:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d202      	bcs.n	800550c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005506:	6938      	ldr	r0, [r7, #16]
 8005508:	f000 f84a 	bl	80055a0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	4a1a      	ldr	r2, [pc, #104]	; (800557c <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	0d9b      	lsrs	r3, r3, #22
 800551a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d202      	bcs.n	800552a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f000 f83b 	bl	80055a0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800552a:	6a38      	ldr	r0, [r7, #32]
 800552c:	f000 f838 	bl	80055a0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8005530:	e015      	b.n	800555e <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005532:	490f      	ldr	r1, [pc, #60]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8005550:	bf00      	nop
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f9      	beq.n	8005552 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	431bde83 	.word	0x431bde83
 800556c:	aaaaaaab 	.word	0xaaaaaaab
 8005570:	50004710 	.word	0x50004710
 8005574:	f08080ff 	.word	0xf08080ff
 8005578:	88888889 	.word	0x88888889
 800557c:	b60b60b7 	.word	0xb60b60b7

08005580 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8005584:	4a05      	ldr	r2, [pc, #20]	; (800559c <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558e:	6053      	str	r3, [r2, #4]
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	50004710 	.word	0x50004710

080055a0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80055a8:	4908      	ldr	r1, [pc, #32]	; (80055cc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80055b8:	4313      	orrs	r3, r2
 80055ba:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 80055bc:	2032      	movs	r0, #50	; 0x32
 80055be:	f7fe fc73 	bl	8003ea8 <XMC_SCU_lDelay>
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	50004710 	.word	0x50004710

080055d0 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	50004710 	.word	0x50004710

080055f4 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005602:	e002      	b.n	800560a <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b1f      	cmp	r3, #31
 800561e:	d9f1      	bls.n	8005604 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b20      	cmp	r3, #32
 8005624:	d102      	bne.n	800562c <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	72fb      	strb	r3, [r7, #11]
 800562a:	e006      	b.n	800563a <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 800562c:	4906      	ldr	r1, [pc, #24]	; (8005648 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8005636:	2300      	movs	r3, #0
 8005638:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 800563a:	7afb      	ldrb	r3, [r7, #11]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20000f00 	.word	0x20000f00

0800564c <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8005658:	f7fe fc82 	bl	8003f60 <XMC_SCU_INTERUPT_GetEventStatus>
 800565c:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800565e:	e01c      	b.n	800569a <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <XMC_SCU_IRQHandler+0x5c>)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005678:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8005684:	2201      	movs	r2, #1
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe fc73 	bl	8003f78 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 8005692:	e005      	b.n	80056a0 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b1f      	cmp	r3, #31
 800569e:	d9df      	bls.n	8005660 <XMC_SCU_IRQHandler+0x14>
  }
}
 80056a0:	bf00      	nop
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000f00 	.word	0x20000f00

080056ac <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	460b      	mov	r3, r1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80056ba:	4b3f      	ldr	r3, [pc, #252]	; (80057b8 <Endpoint_Write_Stream_LE+0x10c>)
 80056bc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80056c0:	461a      	mov	r2, r3
 80056c2:	232c      	movs	r3, #44	; 0x2c
 80056c4:	fb03 f302 	mul.w	r3, r3, r2
 80056c8:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <Endpoint_Write_Stream_LE+0x10c>)
 80056ca:	4413      	add	r3, r2
 80056cc:	3304      	adds	r3, #4
 80056ce:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d052      	beq.n	8005788 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	897a      	ldrh	r2, [r7, #10]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80056f2:	e049      	b.n	8005788 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <Endpoint_Write_Stream_LE+0x58>
			continue;
 8005702:	e041      	b.n	8005788 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8005704:	f7fe f9c6 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d029      	beq.n	8005762 <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	6a1a      	ldr	r2, [r3, #32]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	897b      	ldrh	r3, [r7, #10]
 800571a:	4293      	cmp	r3, r2
 800571c:	bf28      	it	cs
 800571e:	4613      	movcs	r3, r2
 8005720:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	461a      	mov	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4413      	add	r3, r2
 800572e:	4618      	mov	r0, r3
 8005730:	8bfa      	ldrh	r2, [r7, #30]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	4619      	mov	r1, r3
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	461a      	mov	r2, r3
 800573c:	f000 fac0 	bl	8005cc0 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	8afb      	ldrh	r3, [r7, #22]
 8005746:	441a      	add	r2, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 800574c:	8bfa      	ldrh	r2, [r7, #30]
 800574e:	8afb      	ldrh	r3, [r7, #22]
 8005750:	4413      	add	r3, r2
 8005752:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 8005754:	897b      	ldrh	r3, [r7, #10]
 8005756:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8005758:	897a      	ldrh	r2, [r7, #10]
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	817b      	strh	r3, [r7, #10]
 8005760:	e012      	b.n	8005788 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 8005762:	f7fe f91f 	bl	80039a4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8bfa      	ldrh	r2, [r7, #30]
 8005770:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005772:	2305      	movs	r3, #5
 8005774:	e01b      	b.n	80057ae <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005776:	f7fe f837 	bl	80037e8 <Endpoint_WaitUntilReady>
 800577a:	4603      	mov	r3, r0
 800577c:	757b      	strb	r3, [r7, #21]
 800577e:	7d7b      	ldrb	r3, [r7, #21]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8005784:	7d7b      	ldrb	r3, [r7, #21]
 8005786:	e012      	b.n	80057ae <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8005788:	897b      	ldrh	r3, [r7, #10]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1b2      	bne.n	80056f4 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <Endpoint_Write_Stream_LE+0x100>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	889b      	ldrh	r3, [r3, #4]
 8005798:	f3c3 1386 	ubfx	r3, r3, #6, #7
 800579c:	b2db      	uxtb	r3, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8bba      	ldrh	r2, [r7, #28]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d102      	bne.n	80057ac <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <Endpoint_Write_Stream_LE+0x110>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000ba8 	.word	0x20000ba8
 80057bc:	200008a8 	.word	0x200008a8

080057c0 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80057d0:	e00e      	b.n	80057f0 <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	3b01      	subs	r3, #1
 80057de:	4619      	mov	r1, r3
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	700b      	strb	r3, [r1, #0]
		i++;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3ec      	bcc.n	80057d2 <SwapCopy+0x12>
	}
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	460b      	mov	r3, r1
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005812:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <Endpoint_Write_Stream_BE+0xe4>)
 8005814:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005818:	461a      	mov	r2, r3
 800581a:	232c      	movs	r3, #44	; 0x2c
 800581c:	fb03 f302 	mul.w	r3, r3, r2
 8005820:	4a31      	ldr	r2, [pc, #196]	; (80058e8 <Endpoint_Write_Stream_BE+0xe4>)
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d050      	beq.n	80058d8 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	897a      	ldrh	r2, [r7, #10]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8005846:	e047      	b.n	80058d8 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d000      	beq.n	8005858 <Endpoint_Write_Stream_BE+0x54>
			continue;
 8005856:	e03f      	b.n	80058d8 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8005858:	f7fe f91c 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d027      	beq.n	80058b2 <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	897b      	ldrh	r3, [r7, #10]
 800586e:	4293      	cmp	r3, r2
 8005870:	bf28      	it	cs
 8005872:	4613      	movcs	r3, r2
 8005874:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	461a      	mov	r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	4413      	add	r3, r2
 8005882:	4618      	mov	r0, r3
 8005884:	8bfa      	ldrh	r2, [r7, #30]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	4619      	mov	r1, r3
 800588c:	8afb      	ldrh	r3, [r7, #22]
 800588e:	461a      	mov	r2, r3
 8005890:	f7ff ff96 	bl	80057c0 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	441a      	add	r2, r3
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 80058a0:	8bfa      	ldrh	r2, [r7, #30]
 80058a2:	8afb      	ldrh	r3, [r7, #22]
 80058a4:	4413      	add	r3, r2
 80058a6:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80058a8:	897a      	ldrh	r2, [r7, #10]
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	817b      	strh	r3, [r7, #10]
 80058b0:	e012      	b.n	80058d8 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 80058b2:	f7fe f877 	bl	80039a4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8bfa      	ldrh	r2, [r7, #30]
 80058c0:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80058c2:	2305      	movs	r3, #5
 80058c4:	e00c      	b.n	80058e0 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80058c6:	f7fd ff8f 	bl	80037e8 <Endpoint_WaitUntilReady>
 80058ca:	4603      	mov	r3, r0
 80058cc:	757b      	strb	r3, [r7, #21]
 80058ce:	7d7b      	ldrb	r3, [r7, #21]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 80058d4:	7d7b      	ldrb	r3, [r7, #21]
 80058d6:	e003      	b.n	80058e0 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1b4      	bne.n	8005848 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000ba8 	.word	0x20000ba8

080058ec <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	460b      	mov	r3, r1
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <Endpoint_Read_Stream_LE+0xec>)
 80058fc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005900:	461a      	mov	r2, r3
 8005902:	232c      	movs	r3, #44	; 0x2c
 8005904:	fb03 f302 	mul.w	r3, r3, r2
 8005908:	4a33      	ldr	r2, [pc, #204]	; (80059d8 <Endpoint_Read_Stream_LE+0xec>)
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d053      	beq.n	80059c6 <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	897a      	ldrh	r2, [r7, #10]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800592e:	e04a      	b.n	80059c6 <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d000      	beq.n	8005940 <Endpoint_Read_Stream_LE+0x54>
			continue;
 800593e:	e042      	b.n	80059c6 <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8005940:	f7fe f8a8 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d02a      	beq.n	80059a0 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	897b      	ldrh	r3, [r7, #10]
 8005950:	4293      	cmp	r3, r2
 8005952:	bf28      	it	cs
 8005954:	4613      	movcs	r3, r2
 8005956:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8005958:	8bfa      	ldrh	r2, [r7, #30]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	4618      	mov	r0, r3
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	461a      	mov	r2, r3
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4413      	add	r3, r2
 800596c:	4619      	mov	r1, r3
 800596e:	8afb      	ldrh	r3, [r7, #22]
 8005970:	461a      	mov	r2, r3
 8005972:	f000 f9a5 	bl	8005cc0 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	8afb      	ldrh	r3, [r7, #22]
 800597c:	1ad2      	subs	r2, r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	8afb      	ldrh	r3, [r7, #22]
 8005988:	441a      	add	r2, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 800598e:	8bfa      	ldrh	r2, [r7, #30]
 8005990:	8afb      	ldrh	r3, [r7, #22]
 8005992:	4413      	add	r3, r2
 8005994:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8005996:	897a      	ldrh	r2, [r7, #10]
 8005998:	8afb      	ldrh	r3, [r7, #22]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	e012      	b.n	80059c6 <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 80059a0:	f7fd ffb4 	bl	800390c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8bfa      	ldrh	r2, [r7, #30]
 80059ae:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80059b0:	2305      	movs	r3, #5
 80059b2:	e00c      	b.n	80059ce <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80059b4:	f7fd ff18 	bl	80037e8 <Endpoint_WaitUntilReady>
 80059b8:	4603      	mov	r3, r0
 80059ba:	757b      	strb	r3, [r7, #21]
 80059bc:	7d7b      	ldrb	r3, [r7, #21]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 80059c2:	7d7b      	ldrb	r3, [r7, #21]
 80059c4:	e003      	b.n	80059ce <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1b1      	bne.n	8005930 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000ba8 	.word	0x20000ba8

080059dc <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	460b      	mov	r3, r1
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80059ea:	4b37      	ldr	r3, [pc, #220]	; (8005ac8 <Endpoint_Read_Stream_BE+0xec>)
 80059ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80059f0:	461a      	mov	r2, r3
 80059f2:	232c      	movs	r3, #44	; 0x2c
 80059f4:	fb03 f302 	mul.w	r3, r3, r2
 80059f8:	4a33      	ldr	r2, [pc, #204]	; (8005ac8 <Endpoint_Read_Stream_BE+0xec>)
 80059fa:	4413      	add	r3, r2
 80059fc:	3304      	adds	r3, #4
 80059fe:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d053      	beq.n	8005ab6 <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	897a      	ldrh	r2, [r7, #10]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8005a1e:	e04a      	b.n	8005ab6 <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d000      	beq.n	8005a30 <Endpoint_Read_Stream_BE+0x54>
			continue;
 8005a2e:	e042      	b.n	8005ab6 <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8005a30:	f7fe f830 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02a      	beq.n	8005a90 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	897b      	ldrh	r3, [r7, #10]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bf28      	it	cs
 8005a44:	4613      	movcs	r3, r2
 8005a46:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8005a48:	8bfa      	ldrh	r2, [r7, #30]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	461a      	mov	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	8afb      	ldrh	r3, [r7, #22]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f7ff fead 	bl	80057c0 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	8afb      	ldrh	r3, [r7, #22]
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	441a      	add	r2, r3
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8005a7e:	8bfa      	ldrh	r2, [r7, #30]
 8005a80:	8afb      	ldrh	r3, [r7, #22]
 8005a82:	4413      	add	r3, r2
 8005a84:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8005a86:	897a      	ldrh	r2, [r7, #10]
 8005a88:	8afb      	ldrh	r3, [r7, #22]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	817b      	strh	r3, [r7, #10]
 8005a8e:	e012      	b.n	8005ab6 <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8005a90:	f7fd ff3c 	bl	800390c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8bfa      	ldrh	r2, [r7, #30]
 8005a9e:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005aa0:	2305      	movs	r3, #5
 8005aa2:	e00c      	b.n	8005abe <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005aa4:	f7fd fea0 	bl	80037e8 <Endpoint_WaitUntilReady>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	757b      	strb	r3, [r7, #21]
 8005aac:	7d7b      	ldrb	r3, [r7, #21]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 8005ab2:	7d7b      	ldrb	r3, [r7, #21]
 8005ab4:	e003      	b.n	8005abe <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1b1      	bne.n	8005a20 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000ba8 	.word	0x20000ba8

08005acc <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <Endpoint_Write_Control_Stream_LE+0x6c>)
 8005ada:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 8005adc:	e024      	b.n	8005b28 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11d      	bne.n	8005b28 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6a1a      	ldr	r2, [r3, #32]
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d902      	bls.n	8005afc <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	e002      	b.n	8005b02 <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	89fa      	ldrh	r2, [r7, #14]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f8d8 	bl	8005cc0 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	89fb      	ldrh	r3, [r7, #14]
 8005b16:	441a      	add	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8005b1c:	887a      	ldrh	r2, [r7, #2]
 8005b1e:	89fb      	ldrh	r3, [r7, #14]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 8005b24:	f7fd ff3e 	bl	80039a4 <Endpoint_ClearIN>
	while (Length) {
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1d7      	bne.n	8005ade <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000bac 	.word	0x20000bac

08005b3c <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffbd 	bl	8005acc <Endpoint_Write_Control_Stream_LE>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <Endpoint_Read_Control_Stream_LE+0x64>)
 8005b6a:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 8005b6c:	e020      	b.n	8005bb0 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	887b      	ldrh	r3, [r7, #2]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bf28      	it	cs
 8005b86:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8005b88:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	897a      	ldrh	r2, [r7, #10]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f894 	bl	8005cc0 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	897b      	ldrh	r3, [r7, #10]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8005ba4:	887a      	ldrh	r2, [r7, #2]
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8005bac:	f7fd feae 	bl	800390c <Endpoint_ClearOUT>
	while (Length) {
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1db      	bne.n	8005b6e <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000bac 	.word	0x20000bac

08005bc4 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ffc1 	bl	8005b5c <Endpoint_Read_Control_Stream_LE>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005bf0:	4b32      	ldr	r3, [pc, #200]	; (8005cbc <Endpoint_Null_Stream+0xd8>)
 8005bf2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	232c      	movs	r3, #44	; 0x2c
 8005bfa:	fb03 f302 	mul.w	r3, r3, r2
 8005bfe:	4a2f      	ldr	r2, [pc, #188]	; (8005cbc <Endpoint_Null_Stream+0xd8>)
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d04b      	beq.n	8005cac <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 8005c24:	e042      	b.n	8005cac <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d000      	beq.n	8005c36 <Endpoint_Null_Stream+0x52>
				continue;
 8005c34:	e03a      	b.n	8005cac <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 8005c36:	f7fd ff2d 	bl	8003a94 <Endpoint_IsReadWriteAllowed>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d022      	beq.n	8005c86 <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bf28      	it	cs
 8005c50:	4613      	movcs	r3, r2
 8005c52:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	89fa      	ldrh	r2, [r7, #14]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fed2 	bl	8006a0c <memset>
				ep->InBytesAvailable += Bytes;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	441a      	add	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 8005c74:	8afa      	ldrh	r2, [r7, #22]
 8005c76:	89fb      	ldrh	r3, [r7, #14]
 8005c78:	4413      	add	r3, r2
 8005c7a:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	80fb      	strh	r3, [r7, #6]
 8005c84:	e012      	b.n	8005cac <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 8005c86:	f7fd fe8d 	bl	80039a4 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	8afa      	ldrh	r2, [r7, #22]
 8005c94:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005c96:	2305      	movs	r3, #5
 8005c98:	e00c      	b.n	8005cb4 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005c9a:	f7fd fda5 	bl	80037e8 <Endpoint_WaitUntilReady>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	737b      	strb	r3, [r7, #13]
 8005ca2:	7b7b      	ldrb	r3, [r7, #13]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8005ca8:	7b7b      	ldrb	r3, [r7, #13]
 8005caa:	e003      	b.n	8005cb4 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1b9      	bne.n	8005c26 <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000ba8 	.word	0x20000ba8

08005cc0 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8005cc0:	0913      	lsrs	r3, r2, #4
 8005cc2:	d011      	beq.n	8005ce8 <thumb2_memcpy+0x28>
 8005cc4:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cc8:	f840 cb04 	str.w	ip, [r0], #4
 8005ccc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cd0:	f840 cb04 	str.w	ip, [r0], #4
 8005cd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cd8:	f840 cb04 	str.w	ip, [r0], #4
 8005cdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ce0:	f840 cb04 	str.w	ip, [r0], #4
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	d1ed      	bne.n	8005cc4 <thumb2_memcpy+0x4>
 8005ce8:	f012 030f 	ands.w	r3, r2, #15
 8005cec:	d005      	beq.n	8005cfa <thumb2_memcpy+0x3a>
 8005cee:	f811 cb01 	ldrb.w	ip, [r1], #1
 8005cf2:	f800 cb01 	strb.w	ip, [r0], #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	d1f9      	bne.n	8005cee <thumb2_memcpy+0x2e>
 8005cfa:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8005cfc:	bf00      	nop

08005cfe <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e003      	b.n	8005d14 <delay+0x16>
  {
    __NOP();
 8005d0c:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d3f7      	bcc.n	8005d0c <delay+0xe>
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8005d28:	b598      	push	{r3, r4, r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8005d2c:	4a06      	ldr	r2, [pc, #24]	; (8005d48 <SystemInit+0x20>)
 8005d2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005d32:	4614      	mov	r4, r2
 8005d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8005d3a:	f000 f807 	bl	8005d4c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8005d3e:	f7fa fd47 	bl	80007d0 <SystemCoreClockSetup>
}
 8005d42:	bf00      	nop
 8005d44:	bd98      	pop	{r3, r4, r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2000ffc4 	.word	0x2000ffc4

08005d4c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d52:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <SystemCoreSetup+0x64>)
 8005d56:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <SystemCoreSetup+0x68>)
 8005d58:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8005d5e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005d60:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <SystemCoreSetup+0x64>)
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <SystemCoreSetup+0x64>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8005d70:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <SystemCoreSetup+0x64>)
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <SystemCoreSetup+0x64>)
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f023 0308 	bic.w	r3, r3, #8
 8005d7a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <SystemCoreSetup+0x6c>)
 8005d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d82:	3314      	adds	r3, #20
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f023 030f 	bic.w	r3, r3, #15
 8005d8e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f043 0303 	orr.w	r3, r3, #3
 8005d96:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <SystemCoreSetup+0x6c>)
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9e:	3314      	adds	r3, #20
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000ed00 	.word	0xe000ed00
 8005db4:	08000000 	.word	0x08000000
 8005db8:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8005dc0:	4b75      	ldr	r3, [pc, #468]	; (8005f98 <SystemCoreSetup+0x24c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8005dcc:	4a72      	ldr	r2, [pc, #456]	; (8005f98 <SystemCoreSetup+0x24c>)
 8005dce:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <SystemCoreSetup+0x24c>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8005dd8:	bf00      	nop
 8005dda:	4b6f      	ldr	r3, [pc, #444]	; (8005f98 <SystemCoreSetup+0x24c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f9      	beq.n	8005dda <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8005de6:	4b6d      	ldr	r3, [pc, #436]	; (8005f9c <SystemCoreSetup+0x250>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8005df2:	4a6a      	ldr	r2, [pc, #424]	; (8005f9c <SystemCoreSetup+0x250>)
 8005df4:	4b69      	ldr	r3, [pc, #420]	; (8005f9c <SystemCoreSetup+0x250>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dfc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8005dfe:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8005e02:	f7ff ff7c 	bl	8005cfe <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8005e06:	4a66      	ldr	r2, [pc, #408]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e08:	4b65      	ldr	r3, [pc, #404]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e10:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8005e12:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005e16:	f7ff ff72 	bl	8005cfe <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005e1a:	4a61      	ldr	r2, [pc, #388]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e1c:	4b60      	ldr	r3, [pc, #384]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e24:	f023 0302 	bic.w	r3, r3, #2
 8005e28:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8005e2a:	4b5e      	ldr	r3, [pc, #376]	; (8005fa4 <SystemCoreSetup+0x258>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d029      	beq.n	8005e8a <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8005e36:	4a5b      	ldr	r2, [pc, #364]	; (8005fa4 <SystemCoreSetup+0x258>)
 8005e38:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <SystemCoreSetup+0x258>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005e40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e44:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8005e46:	f000 f927 	bl	8006098 <OSCHP_GetFrequency>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4b56      	ldr	r3, [pc, #344]	; (8005fa8 <SystemCoreSetup+0x25c>)
 8005e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e52:	0d1b      	lsrs	r3, r3, #20
 8005e54:	3b01      	subs	r3, #1
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	4952      	ldr	r1, [pc, #328]	; (8005fa4 <SystemCoreSetup+0x258>)
 8005e5a:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <SystemCoreSetup+0x258>)
 8005e5c:	6852      	ldr	r2, [r2, #4]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8005e62:	4a4f      	ldr	r2, [pc, #316]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e64:	4b4e      	ldr	r3, [pc, #312]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005e6e:	4a4c      	ldr	r2, [pc, #304]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e70:	4b4b      	ldr	r3, [pc, #300]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e78:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8005e7a:	bf00      	nop
 8005e7c:	4b48      	ldr	r3, [pc, #288]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005e84:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8005e88:	d1f8      	bne.n	8005e7c <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005e8a:	4a45      	ldr	r2, [pc, #276]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e8c:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8005e96:	4a42      	ldr	r2, [pc, #264]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f043 0310 	orr.w	r3, r3, #16
 8005ea0:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005ea4:	4a41      	ldr	r2, [pc, #260]	; (8005fac <SystemCoreSetup+0x260>)
 8005ea6:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005ea8:	4a3d      	ldr	r2, [pc, #244]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005eaa:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005eb6:	4b3a      	ldr	r3, [pc, #232]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f023 0310 	bic.w	r3, r3, #16
 8005ebe:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8005ec0:	4a37      	ldr	r2, [pc, #220]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eca:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005ecc:	bf00      	nop
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f9      	beq.n	8005ece <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005eda:	4a31      	ldr	r2, [pc, #196]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8005ee6:	bf00      	nop
 8005ee8:	4b2d      	ldr	r3, [pc, #180]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f9      	bne.n	8005ee8 <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efe:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8005f0c:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8005f12:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f20:	2203      	movs	r2, #3
 8005f22:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f32:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <SystemCoreSetup+0x268>)
 8005f34:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8005f36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005f3a:	f7ff fee0 	bl	8005cfe <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005f3e:	bf00      	nop
 8005f40:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f9      	beq.n	8005f40 <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <SystemCoreSetup+0x26c>)
 8005f50:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8005f52:	f241 1094 	movw	r0, #4500	; 0x1194
 8005f56:	f7ff fed2 	bl	8005cfe <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005f5a:	bf00      	nop
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f9      	beq.n	8005f5c <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f6a:	4a14      	ldr	r2, [pc, #80]	; (8005fbc <SystemCoreSetup+0x270>)
 8005f6c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8005f6e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005f72:	f7ff fec4 	bl	8005cfe <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005f76:	bf00      	nop
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <SystemCoreSetup+0x254>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f9      	beq.n	8005f78 <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <SystemCoreSetup+0x274>)
 8005f86:	2205      	movs	r2, #5
 8005f88:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <SystemCoreSetup+0x264>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8005f90:	f000 f818 	bl	8005fc4 <SystemCoreClockUpdate>
}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	50004200 	.word	0x50004200
 8005f9c:	50004400 	.word	0x50004400
 8005fa0:	50004710 	.word	0x50004710
 8005fa4:	50004700 	.word	0x50004700
 8005fa8:	6b5fca6b 	.word	0x6b5fca6b
 8005fac:	01134f00 	.word	0x01134f00
 8005fb0:	50004600 	.word	0x50004600
 8005fb4:	01074f00 	.word	0x01074f00
 8005fb8:	01044f00 	.word	0x01044f00
 8005fbc:	01034f00 	.word	0x01034f00
 8005fc0:	50004160 	.word	0x50004160

08005fc4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <SystemCoreClockUpdate+0xc4>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03e      	beq.n	8006054 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8005fd6:	4b2d      	ldr	r3, [pc, #180]	; (800608c <SystemCoreClockUpdate+0xc8>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <SystemCoreClockUpdate+0xcc>)
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e002      	b.n	8005fee <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8005fe8:	f000 f856 	bl	8006098 <OSCHP_GetFrequency>
 8005fec:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8005fee:	4b27      	ldr	r3, [pc, #156]	; (800608c <SystemCoreClockUpdate+0xc8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <SystemCoreClockUpdate+0xc8>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	0e1b      	lsrs	r3, r3, #24
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	3301      	adds	r3, #1
 8006006:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <SystemCoreClockUpdate+0xc8>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006012:	3301      	adds	r3, #1
 8006014:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8006016:	4b1d      	ldr	r3, [pc, #116]	; (800608c <SystemCoreClockUpdate+0xc8>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	3301      	adds	r3, #1
 8006022:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	fb02 f303 	mul.w	r3, r2, r3
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	fb02 f303 	mul.w	r3, r2, r3
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e00d      	b.n	8006058 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800603c:	4b13      	ldr	r3, [pc, #76]	; (800608c <SystemCoreClockUpdate+0xc8>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006044:	3301      	adds	r3, #1
 8006046:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e001      	b.n	8006058 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <SystemCoreClockUpdate+0xcc>)
 8006056:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <SystemCoreClockUpdate+0xc4>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	3301      	adds	r3, #1
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <SystemCoreClockUpdate+0xc4>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	3301      	adds	r3, #1
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800607a:	4a06      	ldr	r2, [pc, #24]	; (8006094 <SystemCoreClockUpdate+0xd0>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	50004600 	.word	0x50004600
 800608c:	50004710 	.word	0x50004710
 8006090:	016e3600 	.word	0x016e3600
 8006094:	2000ffc0 	.word	0x2000ffc0

08006098 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <OSCHP_GetFrequency+0x10>)
}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	00b71b00 	.word	0x00b71b00

080060ac <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80060b4:	4b14      	ldr	r3, [pc, #80]	; (8006108 <_sbrk+0x5c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <_sbrk+0x5c>)
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <_sbrk+0x60>)
 80060c0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <_sbrk+0x5c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3303      	adds	r3, #3
 80060cc:	f023 0303 	bic.w	r3, r3, #3
 80060d0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <_sbrk+0x5c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4413      	add	r3, r2
 80060da:	4a0d      	ldr	r2, [pc, #52]	; (8006110 <_sbrk+0x64>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d207      	bcs.n	80060f0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <_sbrk+0x5c>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	4a07      	ldr	r2, [pc, #28]	; (8006108 <_sbrk+0x5c>)
 80060ea:	6013      	str	r3, [r2, #0]
    return (base);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	e006      	b.n	80060fe <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80060f0:	f000 f850 	bl	8006194 <__errno>
 80060f4:	4602      	mov	r2, r0
 80060f6:	230c      	movs	r3, #12
 80060f8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200008b0 	.word	0x200008b0
 800610c:	20000fa8 	.word	0x20000fa8
 8006110:	2000ffc0 	.word	0x2000ffc0

08006114 <_init>:

/* Init */
void _init(void)
{}
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <calloc>:
 8006124:	4b02      	ldr	r3, [pc, #8]	; (8006130 <calloc+0xc>)
 8006126:	460a      	mov	r2, r1
 8006128:	4601      	mov	r1, r0
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	f000 b802 	b.w	8006134 <_calloc_r>
 8006130:	20000030 	.word	0x20000030

08006134 <_calloc_r>:
 8006134:	b510      	push	{r4, lr}
 8006136:	fb02 f101 	mul.w	r1, r2, r1
 800613a:	f000 f869 	bl	8006210 <_malloc_r>
 800613e:	4604      	mov	r4, r0
 8006140:	b1d8      	cbz	r0, 800617a <_calloc_r+0x46>
 8006142:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006146:	f022 0203 	bic.w	r2, r2, #3
 800614a:	3a04      	subs	r2, #4
 800614c:	2a24      	cmp	r2, #36	; 0x24
 800614e:	d818      	bhi.n	8006182 <_calloc_r+0x4e>
 8006150:	2a13      	cmp	r2, #19
 8006152:	d914      	bls.n	800617e <_calloc_r+0x4a>
 8006154:	2300      	movs	r3, #0
 8006156:	2a1b      	cmp	r2, #27
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	6043      	str	r3, [r0, #4]
 800615c:	d916      	bls.n	800618c <_calloc_r+0x58>
 800615e:	2a24      	cmp	r2, #36	; 0x24
 8006160:	6083      	str	r3, [r0, #8]
 8006162:	60c3      	str	r3, [r0, #12]
 8006164:	bf11      	iteee	ne
 8006166:	f100 0210 	addne.w	r2, r0, #16
 800616a:	6103      	streq	r3, [r0, #16]
 800616c:	6143      	streq	r3, [r0, #20]
 800616e:	f100 0218 	addeq.w	r2, r0, #24
 8006172:	2300      	movs	r3, #0
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	6053      	str	r3, [r2, #4]
 8006178:	6093      	str	r3, [r2, #8]
 800617a:	4620      	mov	r0, r4
 800617c:	bd10      	pop	{r4, pc}
 800617e:	4602      	mov	r2, r0
 8006180:	e7f7      	b.n	8006172 <_calloc_r+0x3e>
 8006182:	2100      	movs	r1, #0
 8006184:	f000 fc42 	bl	8006a0c <memset>
 8006188:	4620      	mov	r0, r4
 800618a:	bd10      	pop	{r4, pc}
 800618c:	f100 0208 	add.w	r2, r0, #8
 8006190:	e7ef      	b.n	8006172 <_calloc_r+0x3e>
 8006192:	bf00      	nop

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000030 	.word	0x20000030

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4e0f      	ldr	r6, [pc, #60]	; (80061e0 <__libc_init_array+0x40>)
 80061a4:	4d0f      	ldr	r5, [pc, #60]	; (80061e4 <__libc_init_array+0x44>)
 80061a6:	1b76      	subs	r6, r6, r5
 80061a8:	10b6      	asrs	r6, r6, #2
 80061aa:	bf18      	it	ne
 80061ac:	2400      	movne	r4, #0
 80061ae:	d005      	beq.n	80061bc <__libc_init_array+0x1c>
 80061b0:	3401      	adds	r4, #1
 80061b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b6:	4798      	blx	r3
 80061b8:	42a6      	cmp	r6, r4
 80061ba:	d1f9      	bne.n	80061b0 <__libc_init_array+0x10>
 80061bc:	4e0a      	ldr	r6, [pc, #40]	; (80061e8 <__libc_init_array+0x48>)
 80061be:	4d0b      	ldr	r5, [pc, #44]	; (80061ec <__libc_init_array+0x4c>)
 80061c0:	1b76      	subs	r6, r6, r5
 80061c2:	f7ff ffa7 	bl	8006114 <_init>
 80061c6:	10b6      	asrs	r6, r6, #2
 80061c8:	bf18      	it	ne
 80061ca:	2400      	movne	r4, #0
 80061cc:	d006      	beq.n	80061dc <__libc_init_array+0x3c>
 80061ce:	3401      	adds	r4, #1
 80061d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d4:	4798      	blx	r3
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d1f9      	bne.n	80061ce <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	bf00      	nop
 80061e0:	20000870 	.word	0x20000870
 80061e4:	20000870 	.word	0x20000870
 80061e8:	20000870 	.word	0x20000870
 80061ec:	20000870 	.word	0x20000870

080061f0 <malloc>:
 80061f0:	4b02      	ldr	r3, [pc, #8]	; (80061fc <malloc+0xc>)
 80061f2:	4601      	mov	r1, r0
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	f000 b80b 	b.w	8006210 <_malloc_r>
 80061fa:	bf00      	nop
 80061fc:	20000030 	.word	0x20000030

08006200 <free>:
 8006200:	4b02      	ldr	r3, [pc, #8]	; (800620c <free+0xc>)
 8006202:	4601      	mov	r1, r0
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	f000 bed9 	b.w	8006fbc <_free_r>
 800620a:	bf00      	nop
 800620c:	20000030 	.word	0x20000030

08006210 <_malloc_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	f101 060b 	add.w	r6, r1, #11
 8006218:	2e16      	cmp	r6, #22
 800621a:	b083      	sub	sp, #12
 800621c:	4605      	mov	r5, r0
 800621e:	f240 809e 	bls.w	800635e <_malloc_r+0x14e>
 8006222:	f036 0607 	bics.w	r6, r6, #7
 8006226:	f100 80bd 	bmi.w	80063a4 <_malloc_r+0x194>
 800622a:	42b1      	cmp	r1, r6
 800622c:	f200 80ba 	bhi.w	80063a4 <_malloc_r+0x194>
 8006230:	f000 fc3a 	bl	8006aa8 <__malloc_lock>
 8006234:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8006238:	f0c0 8293 	bcc.w	8006762 <_malloc_r+0x552>
 800623c:	0a73      	lsrs	r3, r6, #9
 800623e:	f000 80b8 	beq.w	80063b2 <_malloc_r+0x1a2>
 8006242:	2b04      	cmp	r3, #4
 8006244:	f200 8179 	bhi.w	800653a <_malloc_r+0x32a>
 8006248:	09b3      	lsrs	r3, r6, #6
 800624a:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800624e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 8006252:	00c3      	lsls	r3, r0, #3
 8006254:	4fbf      	ldr	r7, [pc, #764]	; (8006554 <_malloc_r+0x344>)
 8006256:	443b      	add	r3, r7
 8006258:	f1a3 0108 	sub.w	r1, r3, #8
 800625c:	685c      	ldr	r4, [r3, #4]
 800625e:	42a1      	cmp	r1, r4
 8006260:	d106      	bne.n	8006270 <_malloc_r+0x60>
 8006262:	e00c      	b.n	800627e <_malloc_r+0x6e>
 8006264:	2a00      	cmp	r2, #0
 8006266:	f280 80aa 	bge.w	80063be <_malloc_r+0x1ae>
 800626a:	68e4      	ldr	r4, [r4, #12]
 800626c:	42a1      	cmp	r1, r4
 800626e:	d006      	beq.n	800627e <_malloc_r+0x6e>
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	f023 0303 	bic.w	r3, r3, #3
 8006276:	1b9a      	subs	r2, r3, r6
 8006278:	2a0f      	cmp	r2, #15
 800627a:	ddf3      	ble.n	8006264 <_malloc_r+0x54>
 800627c:	4670      	mov	r0, lr
 800627e:	693c      	ldr	r4, [r7, #16]
 8006280:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8006568 <_malloc_r+0x358>
 8006284:	4574      	cmp	r4, lr
 8006286:	f000 81ab 	beq.w	80065e0 <_malloc_r+0x3d0>
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	1b9a      	subs	r2, r3, r6
 8006292:	2a0f      	cmp	r2, #15
 8006294:	f300 8190 	bgt.w	80065b8 <_malloc_r+0x3a8>
 8006298:	2a00      	cmp	r2, #0
 800629a:	f8c7 e014 	str.w	lr, [r7, #20]
 800629e:	f8c7 e010 	str.w	lr, [r7, #16]
 80062a2:	f280 809d 	bge.w	80063e0 <_malloc_r+0x1d0>
 80062a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062aa:	f080 8161 	bcs.w	8006570 <_malloc_r+0x360>
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f103 0c01 	add.w	ip, r3, #1
 80062b4:	1099      	asrs	r1, r3, #2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 80062bc:	f8c4 8008 	str.w	r8, [r4, #8]
 80062c0:	2301      	movs	r3, #1
 80062c2:	408b      	lsls	r3, r1
 80062c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	3908      	subs	r1, #8
 80062cc:	60e1      	str	r1, [r4, #12]
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80062d4:	f8c8 400c 	str.w	r4, [r8, #12]
 80062d8:	1082      	asrs	r2, r0, #2
 80062da:	2401      	movs	r4, #1
 80062dc:	4094      	lsls	r4, r2
 80062de:	429c      	cmp	r4, r3
 80062e0:	f200 808b 	bhi.w	80063fa <_malloc_r+0x1ea>
 80062e4:	421c      	tst	r4, r3
 80062e6:	d106      	bne.n	80062f6 <_malloc_r+0xe6>
 80062e8:	f020 0003 	bic.w	r0, r0, #3
 80062ec:	0064      	lsls	r4, r4, #1
 80062ee:	421c      	tst	r4, r3
 80062f0:	f100 0004 	add.w	r0, r0, #4
 80062f4:	d0fa      	beq.n	80062ec <_malloc_r+0xdc>
 80062f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80062fa:	46cc      	mov	ip, r9
 80062fc:	4680      	mov	r8, r0
 80062fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006302:	459c      	cmp	ip, r3
 8006304:	d107      	bne.n	8006316 <_malloc_r+0x106>
 8006306:	e16d      	b.n	80065e4 <_malloc_r+0x3d4>
 8006308:	2a00      	cmp	r2, #0
 800630a:	f280 817b 	bge.w	8006604 <_malloc_r+0x3f4>
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	459c      	cmp	ip, r3
 8006312:	f000 8167 	beq.w	80065e4 <_malloc_r+0x3d4>
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	f021 0103 	bic.w	r1, r1, #3
 800631c:	1b8a      	subs	r2, r1, r6
 800631e:	2a0f      	cmp	r2, #15
 8006320:	ddf2      	ble.n	8006308 <_malloc_r+0xf8>
 8006322:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006326:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	199c      	adds	r4, r3, r6
 800632e:	4628      	mov	r0, r5
 8006330:	f046 0601 	orr.w	r6, r6, #1
 8006334:	f042 0501 	orr.w	r5, r2, #1
 8006338:	605e      	str	r6, [r3, #4]
 800633a:	f8c8 c00c 	str.w	ip, [r8, #12]
 800633e:	f8cc 8008 	str.w	r8, [ip, #8]
 8006342:	617c      	str	r4, [r7, #20]
 8006344:	613c      	str	r4, [r7, #16]
 8006346:	f8c4 e00c 	str.w	lr, [r4, #12]
 800634a:	f8c4 e008 	str.w	lr, [r4, #8]
 800634e:	6065      	str	r5, [r4, #4]
 8006350:	505a      	str	r2, [r3, r1]
 8006352:	f000 fbaf 	bl	8006ab4 <__malloc_unlock>
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	f103 0408 	add.w	r4, r3, #8
 800635c:	e01e      	b.n	800639c <_malloc_r+0x18c>
 800635e:	2910      	cmp	r1, #16
 8006360:	d820      	bhi.n	80063a4 <_malloc_r+0x194>
 8006362:	f000 fba1 	bl	8006aa8 <__malloc_lock>
 8006366:	2610      	movs	r6, #16
 8006368:	2318      	movs	r3, #24
 800636a:	2002      	movs	r0, #2
 800636c:	4f79      	ldr	r7, [pc, #484]	; (8006554 <_malloc_r+0x344>)
 800636e:	443b      	add	r3, r7
 8006370:	f1a3 0208 	sub.w	r2, r3, #8
 8006374:	685c      	ldr	r4, [r3, #4]
 8006376:	4294      	cmp	r4, r2
 8006378:	f000 813d 	beq.w	80065f6 <_malloc_r+0x3e6>
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	68e1      	ldr	r1, [r4, #12]
 8006380:	68a6      	ldr	r6, [r4, #8]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	4423      	add	r3, r4
 8006388:	4628      	mov	r0, r5
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	60f1      	str	r1, [r6, #12]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	608e      	str	r6, [r1, #8]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	f000 fb8d 	bl	8006ab4 <__malloc_unlock>
 800639a:	3408      	adds	r4, #8
 800639c:	4620      	mov	r0, r4
 800639e:	b003      	add	sp, #12
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	2400      	movs	r4, #0
 80063a6:	230c      	movs	r3, #12
 80063a8:	4620      	mov	r0, r4
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	b003      	add	sp, #12
 80063ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	2040      	movs	r0, #64	; 0x40
 80063b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80063bc:	e74a      	b.n	8006254 <_malloc_r+0x44>
 80063be:	4423      	add	r3, r4
 80063c0:	68e1      	ldr	r1, [r4, #12]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	68a6      	ldr	r6, [r4, #8]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	60f1      	str	r1, [r6, #12]
 80063cc:	4628      	mov	r0, r5
 80063ce:	608e      	str	r6, [r1, #8]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	f000 fb6f 	bl	8006ab4 <__malloc_unlock>
 80063d6:	3408      	adds	r4, #8
 80063d8:	4620      	mov	r0, r4
 80063da:	b003      	add	sp, #12
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	4423      	add	r3, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	f000 fb62 	bl	8006ab4 <__malloc_unlock>
 80063f0:	3408      	adds	r4, #8
 80063f2:	4620      	mov	r0, r4
 80063f4:	b003      	add	sp, #12
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	68bc      	ldr	r4, [r7, #8]
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	f023 0803 	bic.w	r8, r3, #3
 8006402:	45b0      	cmp	r8, r6
 8006404:	d304      	bcc.n	8006410 <_malloc_r+0x200>
 8006406:	eba8 0306 	sub.w	r3, r8, r6
 800640a:	2b0f      	cmp	r3, #15
 800640c:	f300 8085 	bgt.w	800651a <_malloc_r+0x30a>
 8006410:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800656c <_malloc_r+0x35c>
 8006414:	4b50      	ldr	r3, [pc, #320]	; (8006558 <_malloc_r+0x348>)
 8006416:	f8d9 2000 	ldr.w	r2, [r9]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3201      	adds	r2, #1
 800641e:	4433      	add	r3, r6
 8006420:	eb04 0a08 	add.w	sl, r4, r8
 8006424:	f000 8155 	beq.w	80066d2 <_malloc_r+0x4c2>
 8006428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642c:	330f      	adds	r3, #15
 800642e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8006432:	f02b 0b0f 	bic.w	fp, fp, #15
 8006436:	4659      	mov	r1, fp
 8006438:	4628      	mov	r0, r5
 800643a:	f000 fcef 	bl	8006e1c <_sbrk_r>
 800643e:	1c41      	adds	r1, r0, #1
 8006440:	4602      	mov	r2, r0
 8006442:	f000 80fc 	beq.w	800663e <_malloc_r+0x42e>
 8006446:	4582      	cmp	sl, r0
 8006448:	f200 80f7 	bhi.w	800663a <_malloc_r+0x42a>
 800644c:	4b43      	ldr	r3, [pc, #268]	; (800655c <_malloc_r+0x34c>)
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	4459      	add	r1, fp
 8006452:	6019      	str	r1, [r3, #0]
 8006454:	f000 814d 	beq.w	80066f2 <_malloc_r+0x4e2>
 8006458:	f8d9 0000 	ldr.w	r0, [r9]
 800645c:	3001      	adds	r0, #1
 800645e:	bf1b      	ittet	ne
 8006460:	eba2 0a0a 	subne.w	sl, r2, sl
 8006464:	4451      	addne	r1, sl
 8006466:	f8c9 2000 	streq.w	r2, [r9]
 800646a:	6019      	strne	r1, [r3, #0]
 800646c:	f012 0107 	ands.w	r1, r2, #7
 8006470:	f000 8115 	beq.w	800669e <_malloc_r+0x48e>
 8006474:	f1c1 0008 	rsb	r0, r1, #8
 8006478:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800647c:	4402      	add	r2, r0
 800647e:	3108      	adds	r1, #8
 8006480:	eb02 090b 	add.w	r9, r2, fp
 8006484:	f3c9 090b 	ubfx	r9, r9, #0, #12
 8006488:	eba1 0909 	sub.w	r9, r1, r9
 800648c:	4649      	mov	r1, r9
 800648e:	4628      	mov	r0, r5
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	9200      	str	r2, [sp, #0]
 8006494:	f000 fcc2 	bl	8006e1c <_sbrk_r>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800649e:	f000 8143 	beq.w	8006728 <_malloc_r+0x518>
 80064a2:	1a80      	subs	r0, r0, r2
 80064a4:	4448      	add	r0, r9
 80064a6:	f040 0001 	orr.w	r0, r0, #1
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	60ba      	str	r2, [r7, #8]
 80064ae:	4449      	add	r1, r9
 80064b0:	42bc      	cmp	r4, r7
 80064b2:	6050      	str	r0, [r2, #4]
 80064b4:	6019      	str	r1, [r3, #0]
 80064b6:	d017      	beq.n	80064e8 <_malloc_r+0x2d8>
 80064b8:	f1b8 0f0f 	cmp.w	r8, #15
 80064bc:	f240 80fb 	bls.w	80066b6 <_malloc_r+0x4a6>
 80064c0:	6860      	ldr	r0, [r4, #4]
 80064c2:	f1a8 020c 	sub.w	r2, r8, #12
 80064c6:	f022 0207 	bic.w	r2, r2, #7
 80064ca:	eb04 0e02 	add.w	lr, r4, r2
 80064ce:	f000 0001 	and.w	r0, r0, #1
 80064d2:	f04f 0c05 	mov.w	ip, #5
 80064d6:	4310      	orrs	r0, r2
 80064d8:	2a0f      	cmp	r2, #15
 80064da:	6060      	str	r0, [r4, #4]
 80064dc:	f8ce c004 	str.w	ip, [lr, #4]
 80064e0:	f8ce c008 	str.w	ip, [lr, #8]
 80064e4:	f200 8117 	bhi.w	8006716 <_malloc_r+0x506>
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <_malloc_r+0x350>)
 80064ea:	68bc      	ldr	r4, [r7, #8]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4291      	cmp	r1, r2
 80064f0:	bf88      	it	hi
 80064f2:	6019      	strhi	r1, [r3, #0]
 80064f4:	4b1b      	ldr	r3, [pc, #108]	; (8006564 <_malloc_r+0x354>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4291      	cmp	r1, r2
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	bf88      	it	hi
 80064fe:	6019      	strhi	r1, [r3, #0]
 8006500:	f022 0203 	bic.w	r2, r2, #3
 8006504:	4296      	cmp	r6, r2
 8006506:	eba2 0306 	sub.w	r3, r2, r6
 800650a:	d801      	bhi.n	8006510 <_malloc_r+0x300>
 800650c:	2b0f      	cmp	r3, #15
 800650e:	dc04      	bgt.n	800651a <_malloc_r+0x30a>
 8006510:	4628      	mov	r0, r5
 8006512:	f000 facf 	bl	8006ab4 <__malloc_unlock>
 8006516:	2400      	movs	r4, #0
 8006518:	e740      	b.n	800639c <_malloc_r+0x18c>
 800651a:	19a2      	adds	r2, r4, r6
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	f046 0601 	orr.w	r6, r6, #1
 8006524:	6066      	str	r6, [r4, #4]
 8006526:	4628      	mov	r0, r5
 8006528:	60ba      	str	r2, [r7, #8]
 800652a:	6053      	str	r3, [r2, #4]
 800652c:	f000 fac2 	bl	8006ab4 <__malloc_unlock>
 8006530:	3408      	adds	r4, #8
 8006532:	4620      	mov	r0, r4
 8006534:	b003      	add	sp, #12
 8006536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653a:	2b14      	cmp	r3, #20
 800653c:	d971      	bls.n	8006622 <_malloc_r+0x412>
 800653e:	2b54      	cmp	r3, #84	; 0x54
 8006540:	f200 80a3 	bhi.w	800668a <_malloc_r+0x47a>
 8006544:	0b33      	lsrs	r3, r6, #12
 8006546:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800654a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 800654e:	00c3      	lsls	r3, r0, #3
 8006550:	e680      	b.n	8006254 <_malloc_r+0x44>
 8006552:	bf00      	nop
 8006554:	20000460 	.word	0x20000460
 8006558:	200008e4 	.word	0x200008e4
 800655c:	200008b4 	.word	0x200008b4
 8006560:	200008dc 	.word	0x200008dc
 8006564:	200008e0 	.word	0x200008e0
 8006568:	20000468 	.word	0x20000468
 800656c:	20000868 	.word	0x20000868
 8006570:	0a5a      	lsrs	r2, r3, #9
 8006572:	2a04      	cmp	r2, #4
 8006574:	d95b      	bls.n	800662e <_malloc_r+0x41e>
 8006576:	2a14      	cmp	r2, #20
 8006578:	f200 80ae 	bhi.w	80066d8 <_malloc_r+0x4c8>
 800657c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8006580:	00c9      	lsls	r1, r1, #3
 8006582:	325b      	adds	r2, #91	; 0x5b
 8006584:	eb07 0c01 	add.w	ip, r7, r1
 8006588:	5879      	ldr	r1, [r7, r1]
 800658a:	f1ac 0c08 	sub.w	ip, ip, #8
 800658e:	458c      	cmp	ip, r1
 8006590:	f000 8088 	beq.w	80066a4 <_malloc_r+0x494>
 8006594:	684a      	ldr	r2, [r1, #4]
 8006596:	f022 0203 	bic.w	r2, r2, #3
 800659a:	4293      	cmp	r3, r2
 800659c:	d273      	bcs.n	8006686 <_malloc_r+0x476>
 800659e:	6889      	ldr	r1, [r1, #8]
 80065a0:	458c      	cmp	ip, r1
 80065a2:	d1f7      	bne.n	8006594 <_malloc_r+0x384>
 80065a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60e2      	str	r2, [r4, #12]
 80065ac:	f8c4 c008 	str.w	ip, [r4, #8]
 80065b0:	6094      	str	r4, [r2, #8]
 80065b2:	f8cc 400c 	str.w	r4, [ip, #12]
 80065b6:	e68f      	b.n	80062d8 <_malloc_r+0xc8>
 80065b8:	19a1      	adds	r1, r4, r6
 80065ba:	f046 0c01 	orr.w	ip, r6, #1
 80065be:	f042 0601 	orr.w	r6, r2, #1
 80065c2:	f8c4 c004 	str.w	ip, [r4, #4]
 80065c6:	4628      	mov	r0, r5
 80065c8:	6179      	str	r1, [r7, #20]
 80065ca:	6139      	str	r1, [r7, #16]
 80065cc:	f8c1 e00c 	str.w	lr, [r1, #12]
 80065d0:	f8c1 e008 	str.w	lr, [r1, #8]
 80065d4:	604e      	str	r6, [r1, #4]
 80065d6:	50e2      	str	r2, [r4, r3]
 80065d8:	f000 fa6c 	bl	8006ab4 <__malloc_unlock>
 80065dc:	3408      	adds	r4, #8
 80065de:	e6dd      	b.n	800639c <_malloc_r+0x18c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	e679      	b.n	80062d8 <_malloc_r+0xc8>
 80065e4:	f108 0801 	add.w	r8, r8, #1
 80065e8:	f018 0f03 	tst.w	r8, #3
 80065ec:	f10c 0c08 	add.w	ip, ip, #8
 80065f0:	f47f ae85 	bne.w	80062fe <_malloc_r+0xee>
 80065f4:	e02d      	b.n	8006652 <_malloc_r+0x442>
 80065f6:	68dc      	ldr	r4, [r3, #12]
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	bf08      	it	eq
 80065fc:	3002      	addeq	r0, #2
 80065fe:	f43f ae3e 	beq.w	800627e <_malloc_r+0x6e>
 8006602:	e6bb      	b.n	800637c <_malloc_r+0x16c>
 8006604:	4419      	add	r1, r3
 8006606:	461c      	mov	r4, r3
 8006608:	684a      	ldr	r2, [r1, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f854 6f08 	ldr.w	r6, [r4, #8]!
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	604a      	str	r2, [r1, #4]
 8006616:	4628      	mov	r0, r5
 8006618:	60f3      	str	r3, [r6, #12]
 800661a:	609e      	str	r6, [r3, #8]
 800661c:	f000 fa4a 	bl	8006ab4 <__malloc_unlock>
 8006620:	e6bc      	b.n	800639c <_malloc_r+0x18c>
 8006622:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8006626:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 800662a:	00c3      	lsls	r3, r0, #3
 800662c:	e612      	b.n	8006254 <_malloc_r+0x44>
 800662e:	099a      	lsrs	r2, r3, #6
 8006630:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8006634:	00c9      	lsls	r1, r1, #3
 8006636:	3238      	adds	r2, #56	; 0x38
 8006638:	e7a4      	b.n	8006584 <_malloc_r+0x374>
 800663a:	42bc      	cmp	r4, r7
 800663c:	d054      	beq.n	80066e8 <_malloc_r+0x4d8>
 800663e:	68bc      	ldr	r4, [r7, #8]
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	f022 0203 	bic.w	r2, r2, #3
 8006646:	e75d      	b.n	8006504 <_malloc_r+0x2f4>
 8006648:	f859 3908 	ldr.w	r3, [r9], #-8
 800664c:	4599      	cmp	r9, r3
 800664e:	f040 8086 	bne.w	800675e <_malloc_r+0x54e>
 8006652:	f010 0f03 	tst.w	r0, #3
 8006656:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800665a:	d1f5      	bne.n	8006648 <_malloc_r+0x438>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	ea23 0304 	bic.w	r3, r3, r4
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	0064      	lsls	r4, r4, #1
 8006666:	429c      	cmp	r4, r3
 8006668:	f63f aec7 	bhi.w	80063fa <_malloc_r+0x1ea>
 800666c:	2c00      	cmp	r4, #0
 800666e:	f43f aec4 	beq.w	80063fa <_malloc_r+0x1ea>
 8006672:	421c      	tst	r4, r3
 8006674:	4640      	mov	r0, r8
 8006676:	f47f ae3e 	bne.w	80062f6 <_malloc_r+0xe6>
 800667a:	0064      	lsls	r4, r4, #1
 800667c:	421c      	tst	r4, r3
 800667e:	f100 0004 	add.w	r0, r0, #4
 8006682:	d0fa      	beq.n	800667a <_malloc_r+0x46a>
 8006684:	e637      	b.n	80062f6 <_malloc_r+0xe6>
 8006686:	468c      	mov	ip, r1
 8006688:	e78c      	b.n	80065a4 <_malloc_r+0x394>
 800668a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800668e:	d815      	bhi.n	80066bc <_malloc_r+0x4ac>
 8006690:	0bf3      	lsrs	r3, r6, #15
 8006692:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006696:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 800669a:	00c3      	lsls	r3, r0, #3
 800669c:	e5da      	b.n	8006254 <_malloc_r+0x44>
 800669e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066a2:	e6ed      	b.n	8006480 <_malloc_r+0x270>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	1092      	asrs	r2, r2, #2
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f202 	lsl.w	r2, r1, r2
 80066ae:	4313      	orrs	r3, r2
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	4662      	mov	r2, ip
 80066b4:	e779      	b.n	80065aa <_malloc_r+0x39a>
 80066b6:	2301      	movs	r3, #1
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	e729      	b.n	8006510 <_malloc_r+0x300>
 80066bc:	f240 5254 	movw	r2, #1364	; 0x554
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d822      	bhi.n	800670a <_malloc_r+0x4fa>
 80066c4:	0cb3      	lsrs	r3, r6, #18
 80066c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80066ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 80066ce:	00c3      	lsls	r3, r0, #3
 80066d0:	e5c0      	b.n	8006254 <_malloc_r+0x44>
 80066d2:	f103 0b10 	add.w	fp, r3, #16
 80066d6:	e6ae      	b.n	8006436 <_malloc_r+0x226>
 80066d8:	2a54      	cmp	r2, #84	; 0x54
 80066da:	d829      	bhi.n	8006730 <_malloc_r+0x520>
 80066dc:	0b1a      	lsrs	r2, r3, #12
 80066de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80066e2:	00c9      	lsls	r1, r1, #3
 80066e4:	326e      	adds	r2, #110	; 0x6e
 80066e6:	e74d      	b.n	8006584 <_malloc_r+0x374>
 80066e8:	4b20      	ldr	r3, [pc, #128]	; (800676c <_malloc_r+0x55c>)
 80066ea:	6819      	ldr	r1, [r3, #0]
 80066ec:	4459      	add	r1, fp
 80066ee:	6019      	str	r1, [r3, #0]
 80066f0:	e6b2      	b.n	8006458 <_malloc_r+0x248>
 80066f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f47f aeae 	bne.w	8006458 <_malloc_r+0x248>
 80066fc:	eb08 030b 	add.w	r3, r8, fp
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	6053      	str	r3, [r2, #4]
 8006708:	e6ee      	b.n	80064e8 <_malloc_r+0x2d8>
 800670a:	207f      	movs	r0, #127	; 0x7f
 800670c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8006710:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8006714:	e59e      	b.n	8006254 <_malloc_r+0x44>
 8006716:	f104 0108 	add.w	r1, r4, #8
 800671a:	4628      	mov	r0, r5
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	f000 fc4d 	bl	8006fbc <_free_r>
 8006722:	9b00      	ldr	r3, [sp, #0]
 8006724:	6819      	ldr	r1, [r3, #0]
 8006726:	e6df      	b.n	80064e8 <_malloc_r+0x2d8>
 8006728:	2001      	movs	r0, #1
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	e6bc      	b.n	80064aa <_malloc_r+0x29a>
 8006730:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006734:	d805      	bhi.n	8006742 <_malloc_r+0x532>
 8006736:	0bda      	lsrs	r2, r3, #15
 8006738:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800673c:	00c9      	lsls	r1, r1, #3
 800673e:	3277      	adds	r2, #119	; 0x77
 8006740:	e720      	b.n	8006584 <_malloc_r+0x374>
 8006742:	f240 5154 	movw	r1, #1364	; 0x554
 8006746:	428a      	cmp	r2, r1
 8006748:	d805      	bhi.n	8006756 <_malloc_r+0x546>
 800674a:	0c9a      	lsrs	r2, r3, #18
 800674c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8006750:	00c9      	lsls	r1, r1, #3
 8006752:	327c      	adds	r2, #124	; 0x7c
 8006754:	e716      	b.n	8006584 <_malloc_r+0x374>
 8006756:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800675a:	227e      	movs	r2, #126	; 0x7e
 800675c:	e712      	b.n	8006584 <_malloc_r+0x374>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	e780      	b.n	8006664 <_malloc_r+0x454>
 8006762:	08f0      	lsrs	r0, r6, #3
 8006764:	f106 0308 	add.w	r3, r6, #8
 8006768:	e600      	b.n	800636c <_malloc_r+0x15c>
 800676a:	bf00      	nop
 800676c:	200008b4 	.word	0x200008b4

08006770 <memchr>:
 8006770:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006774:	2a10      	cmp	r2, #16
 8006776:	db2b      	blt.n	80067d0 <memchr+0x60>
 8006778:	f010 0f07 	tst.w	r0, #7
 800677c:	d008      	beq.n	8006790 <memchr+0x20>
 800677e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006782:	3a01      	subs	r2, #1
 8006784:	428b      	cmp	r3, r1
 8006786:	d02d      	beq.n	80067e4 <memchr+0x74>
 8006788:	f010 0f07 	tst.w	r0, #7
 800678c:	b342      	cbz	r2, 80067e0 <memchr+0x70>
 800678e:	d1f6      	bne.n	800677e <memchr+0xe>
 8006790:	b4f0      	push	{r4, r5, r6, r7}
 8006792:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006796:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800679a:	f022 0407 	bic.w	r4, r2, #7
 800679e:	f07f 0700 	mvns.w	r7, #0
 80067a2:	2300      	movs	r3, #0
 80067a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80067a8:	3c08      	subs	r4, #8
 80067aa:	ea85 0501 	eor.w	r5, r5, r1
 80067ae:	ea86 0601 	eor.w	r6, r6, r1
 80067b2:	fa85 f547 	uadd8	r5, r5, r7
 80067b6:	faa3 f587 	sel	r5, r3, r7
 80067ba:	fa86 f647 	uadd8	r6, r6, r7
 80067be:	faa5 f687 	sel	r6, r5, r7
 80067c2:	b98e      	cbnz	r6, 80067e8 <memchr+0x78>
 80067c4:	d1ee      	bne.n	80067a4 <memchr+0x34>
 80067c6:	bcf0      	pop	{r4, r5, r6, r7}
 80067c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80067cc:	f002 0207 	and.w	r2, r2, #7
 80067d0:	b132      	cbz	r2, 80067e0 <memchr+0x70>
 80067d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067d6:	3a01      	subs	r2, #1
 80067d8:	ea83 0301 	eor.w	r3, r3, r1
 80067dc:	b113      	cbz	r3, 80067e4 <memchr+0x74>
 80067de:	d1f8      	bne.n	80067d2 <memchr+0x62>
 80067e0:	2000      	movs	r0, #0
 80067e2:	4770      	bx	lr
 80067e4:	3801      	subs	r0, #1
 80067e6:	4770      	bx	lr
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	bf06      	itte	eq
 80067ec:	4635      	moveq	r5, r6
 80067ee:	3803      	subeq	r0, #3
 80067f0:	3807      	subne	r0, #7
 80067f2:	f015 0f01 	tst.w	r5, #1
 80067f6:	d107      	bne.n	8006808 <memchr+0x98>
 80067f8:	3001      	adds	r0, #1
 80067fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80067fe:	bf02      	ittt	eq
 8006800:	3001      	addeq	r0, #1
 8006802:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006806:	3001      	addeq	r0, #1
 8006808:	bcf0      	pop	{r4, r5, r6, r7}
 800680a:	3801      	subs	r0, #1
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <memcpy>:
 8006810:	4684      	mov	ip, r0
 8006812:	ea41 0300 	orr.w	r3, r1, r0
 8006816:	f013 0303 	ands.w	r3, r3, #3
 800681a:	d16d      	bne.n	80068f8 <memcpy+0xe8>
 800681c:	3a40      	subs	r2, #64	; 0x40
 800681e:	d341      	bcc.n	80068a4 <memcpy+0x94>
 8006820:	f851 3b04 	ldr.w	r3, [r1], #4
 8006824:	f840 3b04 	str.w	r3, [r0], #4
 8006828:	f851 3b04 	ldr.w	r3, [r1], #4
 800682c:	f840 3b04 	str.w	r3, [r0], #4
 8006830:	f851 3b04 	ldr.w	r3, [r1], #4
 8006834:	f840 3b04 	str.w	r3, [r0], #4
 8006838:	f851 3b04 	ldr.w	r3, [r1], #4
 800683c:	f840 3b04 	str.w	r3, [r0], #4
 8006840:	f851 3b04 	ldr.w	r3, [r1], #4
 8006844:	f840 3b04 	str.w	r3, [r0], #4
 8006848:	f851 3b04 	ldr.w	r3, [r1], #4
 800684c:	f840 3b04 	str.w	r3, [r0], #4
 8006850:	f851 3b04 	ldr.w	r3, [r1], #4
 8006854:	f840 3b04 	str.w	r3, [r0], #4
 8006858:	f851 3b04 	ldr.w	r3, [r1], #4
 800685c:	f840 3b04 	str.w	r3, [r0], #4
 8006860:	f851 3b04 	ldr.w	r3, [r1], #4
 8006864:	f840 3b04 	str.w	r3, [r0], #4
 8006868:	f851 3b04 	ldr.w	r3, [r1], #4
 800686c:	f840 3b04 	str.w	r3, [r0], #4
 8006870:	f851 3b04 	ldr.w	r3, [r1], #4
 8006874:	f840 3b04 	str.w	r3, [r0], #4
 8006878:	f851 3b04 	ldr.w	r3, [r1], #4
 800687c:	f840 3b04 	str.w	r3, [r0], #4
 8006880:	f851 3b04 	ldr.w	r3, [r1], #4
 8006884:	f840 3b04 	str.w	r3, [r0], #4
 8006888:	f851 3b04 	ldr.w	r3, [r1], #4
 800688c:	f840 3b04 	str.w	r3, [r0], #4
 8006890:	f851 3b04 	ldr.w	r3, [r1], #4
 8006894:	f840 3b04 	str.w	r3, [r0], #4
 8006898:	f851 3b04 	ldr.w	r3, [r1], #4
 800689c:	f840 3b04 	str.w	r3, [r0], #4
 80068a0:	3a40      	subs	r2, #64	; 0x40
 80068a2:	d2bd      	bcs.n	8006820 <memcpy+0x10>
 80068a4:	3230      	adds	r2, #48	; 0x30
 80068a6:	d311      	bcc.n	80068cc <memcpy+0xbc>
 80068a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80068ac:	f840 3b04 	str.w	r3, [r0], #4
 80068b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80068b4:	f840 3b04 	str.w	r3, [r0], #4
 80068b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80068bc:	f840 3b04 	str.w	r3, [r0], #4
 80068c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80068c4:	f840 3b04 	str.w	r3, [r0], #4
 80068c8:	3a10      	subs	r2, #16
 80068ca:	d2ed      	bcs.n	80068a8 <memcpy+0x98>
 80068cc:	320c      	adds	r2, #12
 80068ce:	d305      	bcc.n	80068dc <memcpy+0xcc>
 80068d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80068d4:	f840 3b04 	str.w	r3, [r0], #4
 80068d8:	3a04      	subs	r2, #4
 80068da:	d2f9      	bcs.n	80068d0 <memcpy+0xc0>
 80068dc:	3204      	adds	r2, #4
 80068de:	d008      	beq.n	80068f2 <memcpy+0xe2>
 80068e0:	07d2      	lsls	r2, r2, #31
 80068e2:	bf1c      	itt	ne
 80068e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80068e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80068ec:	d301      	bcc.n	80068f2 <memcpy+0xe2>
 80068ee:	880b      	ldrh	r3, [r1, #0]
 80068f0:	8003      	strh	r3, [r0, #0]
 80068f2:	4660      	mov	r0, ip
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	2a08      	cmp	r2, #8
 80068fa:	d313      	bcc.n	8006924 <memcpy+0x114>
 80068fc:	078b      	lsls	r3, r1, #30
 80068fe:	d08d      	beq.n	800681c <memcpy+0xc>
 8006900:	f010 0303 	ands.w	r3, r0, #3
 8006904:	d08a      	beq.n	800681c <memcpy+0xc>
 8006906:	f1c3 0304 	rsb	r3, r3, #4
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	07db      	lsls	r3, r3, #31
 800690e:	bf1c      	itt	ne
 8006910:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006914:	f800 3b01 	strbne.w	r3, [r0], #1
 8006918:	d380      	bcc.n	800681c <memcpy+0xc>
 800691a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800691e:	f820 3b02 	strh.w	r3, [r0], #2
 8006922:	e77b      	b.n	800681c <memcpy+0xc>
 8006924:	3a04      	subs	r2, #4
 8006926:	d3d9      	bcc.n	80068dc <memcpy+0xcc>
 8006928:	3a01      	subs	r2, #1
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	f800 3b01 	strb.w	r3, [r0], #1
 8006932:	d2f9      	bcs.n	8006928 <memcpy+0x118>
 8006934:	780b      	ldrb	r3, [r1, #0]
 8006936:	7003      	strb	r3, [r0, #0]
 8006938:	784b      	ldrb	r3, [r1, #1]
 800693a:	7043      	strb	r3, [r0, #1]
 800693c:	788b      	ldrb	r3, [r1, #2]
 800693e:	7083      	strb	r3, [r0, #2]
 8006940:	4660      	mov	r0, ip
 8006942:	4770      	bx	lr

08006944 <memmove>:
 8006944:	4288      	cmp	r0, r1
 8006946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006948:	d90d      	bls.n	8006966 <memmove+0x22>
 800694a:	188b      	adds	r3, r1, r2
 800694c:	4298      	cmp	r0, r3
 800694e:	d20a      	bcs.n	8006966 <memmove+0x22>
 8006950:	1884      	adds	r4, r0, r2
 8006952:	2a00      	cmp	r2, #0
 8006954:	d051      	beq.n	80069fa <memmove+0xb6>
 8006956:	4622      	mov	r2, r4
 8006958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800695c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006960:	4299      	cmp	r1, r3
 8006962:	d1f9      	bne.n	8006958 <memmove+0x14>
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006966:	2a0f      	cmp	r2, #15
 8006968:	d948      	bls.n	80069fc <memmove+0xb8>
 800696a:	ea41 0300 	orr.w	r3, r1, r0
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d146      	bne.n	8006a00 <memmove+0xbc>
 8006972:	f100 0410 	add.w	r4, r0, #16
 8006976:	f101 0310 	add.w	r3, r1, #16
 800697a:	4615      	mov	r5, r2
 800697c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8006980:	f844 6c10 	str.w	r6, [r4, #-16]
 8006984:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8006988:	f844 6c0c 	str.w	r6, [r4, #-12]
 800698c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8006990:	f844 6c08 	str.w	r6, [r4, #-8]
 8006994:	3d10      	subs	r5, #16
 8006996:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800699a:	f844 6c04 	str.w	r6, [r4, #-4]
 800699e:	2d0f      	cmp	r5, #15
 80069a0:	f103 0310 	add.w	r3, r3, #16
 80069a4:	f104 0410 	add.w	r4, r4, #16
 80069a8:	d8e8      	bhi.n	800697c <memmove+0x38>
 80069aa:	f1a2 0310 	sub.w	r3, r2, #16
 80069ae:	f023 030f 	bic.w	r3, r3, #15
 80069b2:	f002 0e0f 	and.w	lr, r2, #15
 80069b6:	3310      	adds	r3, #16
 80069b8:	f1be 0f03 	cmp.w	lr, #3
 80069bc:	4419      	add	r1, r3
 80069be:	4403      	add	r3, r0
 80069c0:	d921      	bls.n	8006a06 <memmove+0xc2>
 80069c2:	1f1e      	subs	r6, r3, #4
 80069c4:	460d      	mov	r5, r1
 80069c6:	4674      	mov	r4, lr
 80069c8:	3c04      	subs	r4, #4
 80069ca:	f855 7b04 	ldr.w	r7, [r5], #4
 80069ce:	f846 7f04 	str.w	r7, [r6, #4]!
 80069d2:	2c03      	cmp	r4, #3
 80069d4:	d8f8      	bhi.n	80069c8 <memmove+0x84>
 80069d6:	f1ae 0404 	sub.w	r4, lr, #4
 80069da:	f024 0403 	bic.w	r4, r4, #3
 80069de:	3404      	adds	r4, #4
 80069e0:	4421      	add	r1, r4
 80069e2:	4423      	add	r3, r4
 80069e4:	f002 0203 	and.w	r2, r2, #3
 80069e8:	b162      	cbz	r2, 8006a04 <memmove+0xc0>
 80069ea:	3b01      	subs	r3, #1
 80069ec:	440a      	add	r2, r1
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f6:	428a      	cmp	r2, r1
 80069f8:	d1f9      	bne.n	80069ee <memmove+0xaa>
 80069fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fc:	4603      	mov	r3, r0
 80069fe:	e7f3      	b.n	80069e8 <memmove+0xa4>
 8006a00:	4603      	mov	r3, r0
 8006a02:	e7f2      	b.n	80069ea <memmove+0xa6>
 8006a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a06:	4672      	mov	r2, lr
 8006a08:	e7ee      	b.n	80069e8 <memmove+0xa4>
 8006a0a:	bf00      	nop

08006a0c <memset>:
 8006a0c:	b470      	push	{r4, r5, r6}
 8006a0e:	0786      	lsls	r6, r0, #30
 8006a10:	d046      	beq.n	8006aa0 <memset+0x94>
 8006a12:	1e54      	subs	r4, r2, #1
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d041      	beq.n	8006a9c <memset+0x90>
 8006a18:	b2ca      	uxtb	r2, r1
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	e002      	b.n	8006a24 <memset+0x18>
 8006a1e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8006a22:	d33b      	bcc.n	8006a9c <memset+0x90>
 8006a24:	f803 2b01 	strb.w	r2, [r3], #1
 8006a28:	079d      	lsls	r5, r3, #30
 8006a2a:	d1f8      	bne.n	8006a1e <memset+0x12>
 8006a2c:	2c03      	cmp	r4, #3
 8006a2e:	d92e      	bls.n	8006a8e <memset+0x82>
 8006a30:	b2cd      	uxtb	r5, r1
 8006a32:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006a36:	2c0f      	cmp	r4, #15
 8006a38:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006a3c:	d919      	bls.n	8006a72 <memset+0x66>
 8006a3e:	f103 0210 	add.w	r2, r3, #16
 8006a42:	4626      	mov	r6, r4
 8006a44:	3e10      	subs	r6, #16
 8006a46:	2e0f      	cmp	r6, #15
 8006a48:	f842 5c10 	str.w	r5, [r2, #-16]
 8006a4c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006a50:	f842 5c08 	str.w	r5, [r2, #-8]
 8006a54:	f842 5c04 	str.w	r5, [r2, #-4]
 8006a58:	f102 0210 	add.w	r2, r2, #16
 8006a5c:	d8f2      	bhi.n	8006a44 <memset+0x38>
 8006a5e:	f1a4 0210 	sub.w	r2, r4, #16
 8006a62:	f022 020f 	bic.w	r2, r2, #15
 8006a66:	f004 040f 	and.w	r4, r4, #15
 8006a6a:	3210      	adds	r2, #16
 8006a6c:	2c03      	cmp	r4, #3
 8006a6e:	4413      	add	r3, r2
 8006a70:	d90d      	bls.n	8006a8e <memset+0x82>
 8006a72:	461e      	mov	r6, r3
 8006a74:	4622      	mov	r2, r4
 8006a76:	3a04      	subs	r2, #4
 8006a78:	2a03      	cmp	r2, #3
 8006a7a:	f846 5b04 	str.w	r5, [r6], #4
 8006a7e:	d8fa      	bhi.n	8006a76 <memset+0x6a>
 8006a80:	1f22      	subs	r2, r4, #4
 8006a82:	f022 0203 	bic.w	r2, r2, #3
 8006a86:	3204      	adds	r2, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	f004 0403 	and.w	r4, r4, #3
 8006a8e:	b12c      	cbz	r4, 8006a9c <memset+0x90>
 8006a90:	b2c9      	uxtb	r1, r1
 8006a92:	441c      	add	r4, r3
 8006a94:	f803 1b01 	strb.w	r1, [r3], #1
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d1fb      	bne.n	8006a94 <memset+0x88>
 8006a9c:	bc70      	pop	{r4, r5, r6}
 8006a9e:	4770      	bx	lr
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	e7c2      	b.n	8006a2c <memset+0x20>
 8006aa6:	bf00      	nop

08006aa8 <__malloc_lock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__malloc_lock+0x8>)
 8006aaa:	f000 bb77 	b.w	800719c <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20000f90 	.word	0x20000f90

08006ab4 <__malloc_unlock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__malloc_unlock+0x8>)
 8006ab6:	f000 bb79 	b.w	80071ac <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000f90 	.word	0x20000f90

08006ac0 <realloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <realloc+0xc>)
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	f000 b802 	b.w	8006ad0 <_realloc_r>
 8006acc:	20000030 	.word	0x20000030

08006ad0 <_realloc_r>:
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	f000 8095 	beq.w	8006c00 <_realloc_r+0x130>
 8006ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	460d      	mov	r5, r1
 8006adc:	4616      	mov	r6, r2
 8006ade:	b083      	sub	sp, #12
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	f106 070b 	add.w	r7, r6, #11
 8006ae6:	f7ff ffdf 	bl	8006aa8 <__malloc_lock>
 8006aea:	f855 ec04 	ldr.w	lr, [r5, #-4]
 8006aee:	2f16      	cmp	r7, #22
 8006af0:	f02e 0403 	bic.w	r4, lr, #3
 8006af4:	f1a5 0908 	sub.w	r9, r5, #8
 8006af8:	d83c      	bhi.n	8006b74 <_realloc_r+0xa4>
 8006afa:	2210      	movs	r2, #16
 8006afc:	4617      	mov	r7, r2
 8006afe:	42be      	cmp	r6, r7
 8006b00:	d83d      	bhi.n	8006b7e <_realloc_r+0xae>
 8006b02:	4294      	cmp	r4, r2
 8006b04:	da43      	bge.n	8006b8e <_realloc_r+0xbe>
 8006b06:	4bc4      	ldr	r3, [pc, #784]	; (8006e18 <_realloc_r+0x348>)
 8006b08:	6899      	ldr	r1, [r3, #8]
 8006b0a:	eb09 0004 	add.w	r0, r9, r4
 8006b0e:	4288      	cmp	r0, r1
 8006b10:	f000 80b4 	beq.w	8006c7c <_realloc_r+0x1ac>
 8006b14:	6843      	ldr	r3, [r0, #4]
 8006b16:	f023 0101 	bic.w	r1, r3, #1
 8006b1a:	4401      	add	r1, r0
 8006b1c:	6849      	ldr	r1, [r1, #4]
 8006b1e:	07c9      	lsls	r1, r1, #31
 8006b20:	d54c      	bpl.n	8006bbc <_realloc_r+0xec>
 8006b22:	f01e 0f01 	tst.w	lr, #1
 8006b26:	f000 809b 	beq.w	8006c60 <_realloc_r+0x190>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	f7ff fb6f 	bl	8006210 <_malloc_r>
 8006b32:	4606      	mov	r6, r0
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d03a      	beq.n	8006bae <_realloc_r+0xde>
 8006b38:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	444b      	add	r3, r9
 8006b42:	f1a0 0208 	sub.w	r2, r0, #8
 8006b46:	429a      	cmp	r2, r3
 8006b48:	f000 8121 	beq.w	8006d8e <_realloc_r+0x2be>
 8006b4c:	1f22      	subs	r2, r4, #4
 8006b4e:	2a24      	cmp	r2, #36	; 0x24
 8006b50:	f200 8107 	bhi.w	8006d62 <_realloc_r+0x292>
 8006b54:	2a13      	cmp	r2, #19
 8006b56:	f200 80db 	bhi.w	8006d10 <_realloc_r+0x240>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	6811      	ldr	r1, [r2, #0]
 8006b60:	6019      	str	r1, [r3, #0]
 8006b62:	6851      	ldr	r1, [r2, #4]
 8006b64:	6059      	str	r1, [r3, #4]
 8006b66:	6892      	ldr	r2, [r2, #8]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	f000 fa25 	bl	8006fbc <_free_r>
 8006b72:	e01c      	b.n	8006bae <_realloc_r+0xde>
 8006b74:	f027 0707 	bic.w	r7, r7, #7
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	dabf      	bge.n	8006afe <_realloc_r+0x2e>
 8006b7e:	2600      	movs	r6, #0
 8006b80:	230c      	movs	r3, #12
 8006b82:	4630      	mov	r0, r6
 8006b84:	f8c8 3000 	str.w	r3, [r8]
 8006b88:	b003      	add	sp, #12
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	462e      	mov	r6, r5
 8006b90:	1be3      	subs	r3, r4, r7
 8006b92:	2b0f      	cmp	r3, #15
 8006b94:	d81e      	bhi.n	8006bd4 <_realloc_r+0x104>
 8006b96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	4323      	orrs	r3, r4
 8006ba0:	444c      	add	r4, r9
 8006ba2:	f8c9 3004 	str.w	r3, [r9, #4]
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6063      	str	r3, [r4, #4]
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f7ff ff80 	bl	8006ab4 <__malloc_unlock>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	f023 0303 	bic.w	r3, r3, #3
 8006bc0:	18e1      	adds	r1, r4, r3
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	db1f      	blt.n	8006c06 <_realloc_r+0x136>
 8006bc6:	68c3      	ldr	r3, [r0, #12]
 8006bc8:	6882      	ldr	r2, [r0, #8]
 8006bca:	462e      	mov	r6, r5
 8006bcc:	60d3      	str	r3, [r2, #12]
 8006bce:	460c      	mov	r4, r1
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	e7dd      	b.n	8006b90 <_realloc_r+0xc0>
 8006bd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006bd8:	eb09 0107 	add.w	r1, r9, r7
 8006bdc:	f002 0201 	and.w	r2, r2, #1
 8006be0:	444c      	add	r4, r9
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	4317      	orrs	r7, r2
 8006be8:	f8c9 7004 	str.w	r7, [r9, #4]
 8006bec:	604b      	str	r3, [r1, #4]
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	3108      	adds	r1, #8
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	f000 f9df 	bl	8006fbc <_free_r>
 8006bfe:	e7d6      	b.n	8006bae <_realloc_r+0xde>
 8006c00:	4611      	mov	r1, r2
 8006c02:	f7ff bb05 	b.w	8006210 <_malloc_r>
 8006c06:	f01e 0f01 	tst.w	lr, #1
 8006c0a:	d18e      	bne.n	8006b2a <_realloc_r+0x5a>
 8006c0c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8006c10:	eba9 0a01 	sub.w	sl, r9, r1
 8006c14:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006c18:	f021 0103 	bic.w	r1, r1, #3
 8006c1c:	440b      	add	r3, r1
 8006c1e:	4423      	add	r3, r4
 8006c20:	4293      	cmp	r3, r2
 8006c22:	db25      	blt.n	8006c70 <_realloc_r+0x1a0>
 8006c24:	68c2      	ldr	r2, [r0, #12]
 8006c26:	6881      	ldr	r1, [r0, #8]
 8006c28:	4656      	mov	r6, sl
 8006c2a:	60ca      	str	r2, [r1, #12]
 8006c2c:	6091      	str	r1, [r2, #8]
 8006c2e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006c32:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8006c36:	1f22      	subs	r2, r4, #4
 8006c38:	2a24      	cmp	r2, #36	; 0x24
 8006c3a:	60c1      	str	r1, [r0, #12]
 8006c3c:	6088      	str	r0, [r1, #8]
 8006c3e:	f200 8094 	bhi.w	8006d6a <_realloc_r+0x29a>
 8006c42:	2a13      	cmp	r2, #19
 8006c44:	d96f      	bls.n	8006d26 <_realloc_r+0x256>
 8006c46:	6829      	ldr	r1, [r5, #0]
 8006c48:	f8ca 1008 	str.w	r1, [sl, #8]
 8006c4c:	6869      	ldr	r1, [r5, #4]
 8006c4e:	f8ca 100c 	str.w	r1, [sl, #12]
 8006c52:	2a1b      	cmp	r2, #27
 8006c54:	f200 80a2 	bhi.w	8006d9c <_realloc_r+0x2cc>
 8006c58:	3508      	adds	r5, #8
 8006c5a:	f10a 0210 	add.w	r2, sl, #16
 8006c5e:	e063      	b.n	8006d28 <_realloc_r+0x258>
 8006c60:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8006c64:	eba9 0a03 	sub.w	sl, r9, r3
 8006c68:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006c6c:	f021 0103 	bic.w	r1, r1, #3
 8006c70:	1863      	adds	r3, r4, r1
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f6ff af59 	blt.w	8006b2a <_realloc_r+0x5a>
 8006c78:	4656      	mov	r6, sl
 8006c7a:	e7d8      	b.n	8006c2e <_realloc_r+0x15e>
 8006c7c:	6841      	ldr	r1, [r0, #4]
 8006c7e:	f021 0b03 	bic.w	fp, r1, #3
 8006c82:	44a3      	add	fp, r4
 8006c84:	f107 0010 	add.w	r0, r7, #16
 8006c88:	4583      	cmp	fp, r0
 8006c8a:	da56      	bge.n	8006d3a <_realloc_r+0x26a>
 8006c8c:	f01e 0f01 	tst.w	lr, #1
 8006c90:	f47f af4b 	bne.w	8006b2a <_realloc_r+0x5a>
 8006c94:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8006c98:	eba9 0a01 	sub.w	sl, r9, r1
 8006c9c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006ca0:	f021 0103 	bic.w	r1, r1, #3
 8006ca4:	448b      	add	fp, r1
 8006ca6:	4558      	cmp	r0, fp
 8006ca8:	dce2      	bgt.n	8006c70 <_realloc_r+0x1a0>
 8006caa:	4656      	mov	r6, sl
 8006cac:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006cb0:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8006cb4:	1f22      	subs	r2, r4, #4
 8006cb6:	2a24      	cmp	r2, #36	; 0x24
 8006cb8:	60c1      	str	r1, [r0, #12]
 8006cba:	6088      	str	r0, [r1, #8]
 8006cbc:	f200 808f 	bhi.w	8006dde <_realloc_r+0x30e>
 8006cc0:	2a13      	cmp	r2, #19
 8006cc2:	f240 808a 	bls.w	8006dda <_realloc_r+0x30a>
 8006cc6:	6829      	ldr	r1, [r5, #0]
 8006cc8:	f8ca 1008 	str.w	r1, [sl, #8]
 8006ccc:	6869      	ldr	r1, [r5, #4]
 8006cce:	f8ca 100c 	str.w	r1, [sl, #12]
 8006cd2:	2a1b      	cmp	r2, #27
 8006cd4:	f200 808a 	bhi.w	8006dec <_realloc_r+0x31c>
 8006cd8:	3508      	adds	r5, #8
 8006cda:	f10a 0210 	add.w	r2, sl, #16
 8006cde:	6829      	ldr	r1, [r5, #0]
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	6869      	ldr	r1, [r5, #4]
 8006ce4:	6051      	str	r1, [r2, #4]
 8006ce6:	68a9      	ldr	r1, [r5, #8]
 8006ce8:	6091      	str	r1, [r2, #8]
 8006cea:	eb0a 0107 	add.w	r1, sl, r7
 8006cee:	ebab 0207 	sub.w	r2, fp, r7
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	6099      	str	r1, [r3, #8]
 8006cf8:	604a      	str	r2, [r1, #4]
 8006cfa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	431f      	orrs	r7, r3
 8006d04:	4640      	mov	r0, r8
 8006d06:	f8ca 7004 	str.w	r7, [sl, #4]
 8006d0a:	f7ff fed3 	bl	8006ab4 <__malloc_unlock>
 8006d0e:	e751      	b.n	8006bb4 <_realloc_r+0xe4>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	6003      	str	r3, [r0, #0]
 8006d14:	686b      	ldr	r3, [r5, #4]
 8006d16:	6043      	str	r3, [r0, #4]
 8006d18:	2a1b      	cmp	r2, #27
 8006d1a:	d82d      	bhi.n	8006d78 <_realloc_r+0x2a8>
 8006d1c:	f100 0308 	add.w	r3, r0, #8
 8006d20:	f105 0208 	add.w	r2, r5, #8
 8006d24:	e71b      	b.n	8006b5e <_realloc_r+0x8e>
 8006d26:	4632      	mov	r2, r6
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	6011      	str	r1, [r2, #0]
 8006d2c:	6869      	ldr	r1, [r5, #4]
 8006d2e:	6051      	str	r1, [r2, #4]
 8006d30:	68a9      	ldr	r1, [r5, #8]
 8006d32:	6091      	str	r1, [r2, #8]
 8006d34:	461c      	mov	r4, r3
 8006d36:	46d1      	mov	r9, sl
 8006d38:	e72a      	b.n	8006b90 <_realloc_r+0xc0>
 8006d3a:	eb09 0107 	add.w	r1, r9, r7
 8006d3e:	ebab 0b07 	sub.w	fp, fp, r7
 8006d42:	f04b 0201 	orr.w	r2, fp, #1
 8006d46:	6099      	str	r1, [r3, #8]
 8006d48:	604a      	str	r2, [r1, #4]
 8006d4a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	431f      	orrs	r7, r3
 8006d54:	4640      	mov	r0, r8
 8006d56:	f845 7c04 	str.w	r7, [r5, #-4]
 8006d5a:	f7ff feab 	bl	8006ab4 <__malloc_unlock>
 8006d5e:	462e      	mov	r6, r5
 8006d60:	e728      	b.n	8006bb4 <_realloc_r+0xe4>
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7ff fdee 	bl	8006944 <memmove>
 8006d68:	e6ff      	b.n	8006b6a <_realloc_r+0x9a>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	461c      	mov	r4, r3
 8006d70:	46d1      	mov	r9, sl
 8006d72:	f7ff fde7 	bl	8006944 <memmove>
 8006d76:	e70b      	b.n	8006b90 <_realloc_r+0xc0>
 8006d78:	68ab      	ldr	r3, [r5, #8]
 8006d7a:	6083      	str	r3, [r0, #8]
 8006d7c:	68eb      	ldr	r3, [r5, #12]
 8006d7e:	60c3      	str	r3, [r0, #12]
 8006d80:	2a24      	cmp	r2, #36	; 0x24
 8006d82:	d017      	beq.n	8006db4 <_realloc_r+0x2e4>
 8006d84:	f100 0310 	add.w	r3, r0, #16
 8006d88:	f105 0210 	add.w	r2, r5, #16
 8006d8c:	e6e7      	b.n	8006b5e <_realloc_r+0x8e>
 8006d8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	441c      	add	r4, r3
 8006d98:	462e      	mov	r6, r5
 8006d9a:	e6f9      	b.n	8006b90 <_realloc_r+0xc0>
 8006d9c:	68a9      	ldr	r1, [r5, #8]
 8006d9e:	f8ca 1010 	str.w	r1, [sl, #16]
 8006da2:	68e9      	ldr	r1, [r5, #12]
 8006da4:	f8ca 1014 	str.w	r1, [sl, #20]
 8006da8:	2a24      	cmp	r2, #36	; 0x24
 8006daa:	d00c      	beq.n	8006dc6 <_realloc_r+0x2f6>
 8006dac:	3510      	adds	r5, #16
 8006dae:	f10a 0218 	add.w	r2, sl, #24
 8006db2:	e7b9      	b.n	8006d28 <_realloc_r+0x258>
 8006db4:	692b      	ldr	r3, [r5, #16]
 8006db6:	6103      	str	r3, [r0, #16]
 8006db8:	696b      	ldr	r3, [r5, #20]
 8006dba:	6143      	str	r3, [r0, #20]
 8006dbc:	f105 0218 	add.w	r2, r5, #24
 8006dc0:	f100 0318 	add.w	r3, r0, #24
 8006dc4:	e6cb      	b.n	8006b5e <_realloc_r+0x8e>
 8006dc6:	692a      	ldr	r2, [r5, #16]
 8006dc8:	f8ca 2018 	str.w	r2, [sl, #24]
 8006dcc:	696a      	ldr	r2, [r5, #20]
 8006dce:	f8ca 201c 	str.w	r2, [sl, #28]
 8006dd2:	3518      	adds	r5, #24
 8006dd4:	f10a 0220 	add.w	r2, sl, #32
 8006dd8:	e7a6      	b.n	8006d28 <_realloc_r+0x258>
 8006dda:	4632      	mov	r2, r6
 8006ddc:	e77f      	b.n	8006cde <_realloc_r+0x20e>
 8006dde:	4629      	mov	r1, r5
 8006de0:	4630      	mov	r0, r6
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	f7ff fdae 	bl	8006944 <memmove>
 8006de8:	9b01      	ldr	r3, [sp, #4]
 8006dea:	e77e      	b.n	8006cea <_realloc_r+0x21a>
 8006dec:	68a9      	ldr	r1, [r5, #8]
 8006dee:	f8ca 1010 	str.w	r1, [sl, #16]
 8006df2:	68e9      	ldr	r1, [r5, #12]
 8006df4:	f8ca 1014 	str.w	r1, [sl, #20]
 8006df8:	2a24      	cmp	r2, #36	; 0x24
 8006dfa:	d003      	beq.n	8006e04 <_realloc_r+0x334>
 8006dfc:	3510      	adds	r5, #16
 8006dfe:	f10a 0218 	add.w	r2, sl, #24
 8006e02:	e76c      	b.n	8006cde <_realloc_r+0x20e>
 8006e04:	692a      	ldr	r2, [r5, #16]
 8006e06:	f8ca 2018 	str.w	r2, [sl, #24]
 8006e0a:	696a      	ldr	r2, [r5, #20]
 8006e0c:	f8ca 201c 	str.w	r2, [sl, #28]
 8006e10:	3518      	adds	r5, #24
 8006e12:	f10a 0220 	add.w	r2, sl, #32
 8006e16:	e762      	b.n	8006cde <_realloc_r+0x20e>
 8006e18:	20000460 	.word	0x20000460

08006e1c <_sbrk_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4c07      	ldr	r4, [pc, #28]	; (8006e3c <_sbrk_r+0x20>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4605      	mov	r5, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	f7ff f940 	bl	80060ac <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d000      	beq.n	8006e32 <_sbrk_r+0x16>
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0fb      	beq.n	8006e30 <_sbrk_r+0x14>
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000fa4 	.word	0x20000fa4

08006e40 <strlen>:
 8006e40:	f890 f000 	pld	[r0]
 8006e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8006e48:	f020 0107 	bic.w	r1, r0, #7
 8006e4c:	f06f 0c00 	mvn.w	ip, #0
 8006e50:	f010 0407 	ands.w	r4, r0, #7
 8006e54:	f891 f020 	pld	[r1, #32]
 8006e58:	f040 8049 	bne.w	8006eee <strlen+0xae>
 8006e5c:	f04f 0400 	mov.w	r4, #0
 8006e60:	f06f 0007 	mvn.w	r0, #7
 8006e64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006e68:	f891 f040 	pld	[r1, #64]	; 0x40
 8006e6c:	f100 0008 	add.w	r0, r0, #8
 8006e70:	fa82 f24c 	uadd8	r2, r2, ip
 8006e74:	faa4 f28c 	sel	r2, r4, ip
 8006e78:	fa83 f34c 	uadd8	r3, r3, ip
 8006e7c:	faa2 f38c 	sel	r3, r2, ip
 8006e80:	bb4b      	cbnz	r3, 8006ed6 <strlen+0x96>
 8006e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8006e86:	fa82 f24c 	uadd8	r2, r2, ip
 8006e8a:	f100 0008 	add.w	r0, r0, #8
 8006e8e:	faa4 f28c 	sel	r2, r4, ip
 8006e92:	fa83 f34c 	uadd8	r3, r3, ip
 8006e96:	faa2 f38c 	sel	r3, r2, ip
 8006e9a:	b9e3      	cbnz	r3, 8006ed6 <strlen+0x96>
 8006e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8006ea0:	fa82 f24c 	uadd8	r2, r2, ip
 8006ea4:	f100 0008 	add.w	r0, r0, #8
 8006ea8:	faa4 f28c 	sel	r2, r4, ip
 8006eac:	fa83 f34c 	uadd8	r3, r3, ip
 8006eb0:	faa2 f38c 	sel	r3, r2, ip
 8006eb4:	b97b      	cbnz	r3, 8006ed6 <strlen+0x96>
 8006eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8006eba:	f101 0120 	add.w	r1, r1, #32
 8006ebe:	fa82 f24c 	uadd8	r2, r2, ip
 8006ec2:	f100 0008 	add.w	r0, r0, #8
 8006ec6:	faa4 f28c 	sel	r2, r4, ip
 8006eca:	fa83 f34c 	uadd8	r3, r3, ip
 8006ece:	faa2 f38c 	sel	r3, r2, ip
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c6      	beq.n	8006e64 <strlen+0x24>
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	bf04      	itt	eq
 8006eda:	3004      	addeq	r0, #4
 8006edc:	461a      	moveq	r2, r3
 8006ede:	ba12      	rev	r2, r2
 8006ee0:	fab2 f282 	clz	r2, r2
 8006ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8006ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8006eec:	4770      	bx	lr
 8006eee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006ef2:	f004 0503 	and.w	r5, r4, #3
 8006ef6:	f1c4 0000 	rsb	r0, r4, #0
 8006efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8006efe:	f014 0f04 	tst.w	r4, #4
 8006f02:	f891 f040 	pld	[r1, #64]	; 0x40
 8006f06:	fa0c f505 	lsl.w	r5, ip, r5
 8006f0a:	ea62 0205 	orn	r2, r2, r5
 8006f0e:	bf1c      	itt	ne
 8006f10:	ea63 0305 	ornne	r3, r3, r5
 8006f14:	4662      	movne	r2, ip
 8006f16:	f04f 0400 	mov.w	r4, #0
 8006f1a:	e7a9      	b.n	8006e70 <strlen+0x30>

08006f1c <_malloc_trim_r>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	4f24      	ldr	r7, [pc, #144]	; (8006fb0 <_malloc_trim_r+0x94>)
 8006f20:	460c      	mov	r4, r1
 8006f22:	4606      	mov	r6, r0
 8006f24:	f7ff fdc0 	bl	8006aa8 <__malloc_lock>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	685d      	ldr	r5, [r3, #4]
 8006f2c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8006f30:	310f      	adds	r1, #15
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	4429      	add	r1, r5
 8006f38:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8006f3c:	f021 010f 	bic.w	r1, r1, #15
 8006f40:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8006f44:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006f48:	db07      	blt.n	8006f5a <_malloc_trim_r+0x3e>
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff ff65 	bl	8006e1c <_sbrk_r>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	442b      	add	r3, r5
 8006f56:	4298      	cmp	r0, r3
 8006f58:	d004      	beq.n	8006f64 <_malloc_trim_r+0x48>
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff fdaa 	bl	8006ab4 <__malloc_unlock>
 8006f60:	2000      	movs	r0, #0
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	4261      	negs	r1, r4
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ff58 	bl	8006e1c <_sbrk_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d00d      	beq.n	8006f8c <_malloc_trim_r+0x70>
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <_malloc_trim_r+0x98>)
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	6819      	ldr	r1, [r3, #0]
 8006f76:	1b2d      	subs	r5, r5, r4
 8006f78:	f045 0501 	orr.w	r5, r5, #1
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	1b09      	subs	r1, r1, r4
 8006f80:	6055      	str	r5, [r2, #4]
 8006f82:	6019      	str	r1, [r3, #0]
 8006f84:	f7ff fd96 	bl	8006ab4 <__malloc_unlock>
 8006f88:	2001      	movs	r0, #1
 8006f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff44 	bl	8006e1c <_sbrk_r>
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	1a83      	subs	r3, r0, r2
 8006f98:	2b0f      	cmp	r3, #15
 8006f9a:	ddde      	ble.n	8006f5a <_malloc_trim_r+0x3e>
 8006f9c:	4c06      	ldr	r4, [pc, #24]	; (8006fb8 <_malloc_trim_r+0x9c>)
 8006f9e:	4905      	ldr	r1, [pc, #20]	; (8006fb4 <_malloc_trim_r+0x98>)
 8006fa0:	6824      	ldr	r4, [r4, #0]
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	1b00      	subs	r0, r0, r4
 8006fa8:	6053      	str	r3, [r2, #4]
 8006faa:	6008      	str	r0, [r1, #0]
 8006fac:	e7d5      	b.n	8006f5a <_malloc_trim_r+0x3e>
 8006fae:	bf00      	nop
 8006fb0:	20000460 	.word	0x20000460
 8006fb4:	200008b4 	.word	0x200008b4
 8006fb8:	20000868 	.word	0x20000868

08006fbc <_free_r>:
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	d044      	beq.n	800704a <_free_r+0x8e>
 8006fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	f7ff fd6e 	bl	8006aa8 <__malloc_lock>
 8006fcc:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8006fd0:	4969      	ldr	r1, [pc, #420]	; (8007178 <_free_r+0x1bc>)
 8006fd2:	f027 0301 	bic.w	r3, r7, #1
 8006fd6:	f1a5 0408 	sub.w	r4, r5, #8
 8006fda:	18e2      	adds	r2, r4, r3
 8006fdc:	688e      	ldr	r6, [r1, #8]
 8006fde:	6850      	ldr	r0, [r2, #4]
 8006fe0:	42b2      	cmp	r2, r6
 8006fe2:	f020 0003 	bic.w	r0, r0, #3
 8006fe6:	d05e      	beq.n	80070a6 <_free_r+0xea>
 8006fe8:	07fe      	lsls	r6, r7, #31
 8006fea:	6050      	str	r0, [r2, #4]
 8006fec:	d40b      	bmi.n	8007006 <_free_r+0x4a>
 8006fee:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8006ff2:	1be4      	subs	r4, r4, r7
 8006ff4:	f101 0e08 	add.w	lr, r1, #8
 8006ff8:	68a5      	ldr	r5, [r4, #8]
 8006ffa:	4575      	cmp	r5, lr
 8006ffc:	443b      	add	r3, r7
 8006ffe:	d06d      	beq.n	80070dc <_free_r+0x120>
 8007000:	68e7      	ldr	r7, [r4, #12]
 8007002:	60ef      	str	r7, [r5, #12]
 8007004:	60bd      	str	r5, [r7, #8]
 8007006:	1815      	adds	r5, r2, r0
 8007008:	686d      	ldr	r5, [r5, #4]
 800700a:	07ed      	lsls	r5, r5, #31
 800700c:	d53e      	bpl.n	800708c <_free_r+0xd0>
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	6062      	str	r2, [r4, #4]
 8007014:	50e3      	str	r3, [r4, r3]
 8007016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701a:	d217      	bcs.n	800704c <_free_r+0x90>
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	1c58      	adds	r0, r3, #1
 8007020:	109a      	asrs	r2, r3, #2
 8007022:	684d      	ldr	r5, [r1, #4]
 8007024:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 8007028:	60a7      	str	r7, [r4, #8]
 800702a:	2301      	movs	r3, #1
 800702c:	4093      	lsls	r3, r2
 800702e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8007032:	432b      	orrs	r3, r5
 8007034:	3a08      	subs	r2, #8
 8007036:	60e2      	str	r2, [r4, #12]
 8007038:	604b      	str	r3, [r1, #4]
 800703a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 800703e:	60fc      	str	r4, [r7, #12]
 8007040:	4640      	mov	r0, r8
 8007042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	f7ff bd35 	b.w	8006ab4 <__malloc_unlock>
 800704a:	4770      	bx	lr
 800704c:	0a5a      	lsrs	r2, r3, #9
 800704e:	2a04      	cmp	r2, #4
 8007050:	d852      	bhi.n	80070f8 <_free_r+0x13c>
 8007052:	099a      	lsrs	r2, r3, #6
 8007054:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8007058:	00ff      	lsls	r7, r7, #3
 800705a:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800705e:	19c8      	adds	r0, r1, r7
 8007060:	59ca      	ldr	r2, [r1, r7]
 8007062:	3808      	subs	r0, #8
 8007064:	4290      	cmp	r0, r2
 8007066:	d04f      	beq.n	8007108 <_free_r+0x14c>
 8007068:	6851      	ldr	r1, [r2, #4]
 800706a:	f021 0103 	bic.w	r1, r1, #3
 800706e:	428b      	cmp	r3, r1
 8007070:	d232      	bcs.n	80070d8 <_free_r+0x11c>
 8007072:	6892      	ldr	r2, [r2, #8]
 8007074:	4290      	cmp	r0, r2
 8007076:	d1f7      	bne.n	8007068 <_free_r+0xac>
 8007078:	68c3      	ldr	r3, [r0, #12]
 800707a:	60a0      	str	r0, [r4, #8]
 800707c:	60e3      	str	r3, [r4, #12]
 800707e:	609c      	str	r4, [r3, #8]
 8007080:	60c4      	str	r4, [r0, #12]
 8007082:	4640      	mov	r0, r8
 8007084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007088:	f7ff bd14 	b.w	8006ab4 <__malloc_unlock>
 800708c:	6895      	ldr	r5, [r2, #8]
 800708e:	4f3b      	ldr	r7, [pc, #236]	; (800717c <_free_r+0x1c0>)
 8007090:	42bd      	cmp	r5, r7
 8007092:	4403      	add	r3, r0
 8007094:	d040      	beq.n	8007118 <_free_r+0x15c>
 8007096:	68d0      	ldr	r0, [r2, #12]
 8007098:	60e8      	str	r0, [r5, #12]
 800709a:	f043 0201 	orr.w	r2, r3, #1
 800709e:	6085      	str	r5, [r0, #8]
 80070a0:	6062      	str	r2, [r4, #4]
 80070a2:	50e3      	str	r3, [r4, r3]
 80070a4:	e7b7      	b.n	8007016 <_free_r+0x5a>
 80070a6:	07ff      	lsls	r7, r7, #31
 80070a8:	4403      	add	r3, r0
 80070aa:	d407      	bmi.n	80070bc <_free_r+0x100>
 80070ac:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80070b0:	1aa4      	subs	r4, r4, r2
 80070b2:	4413      	add	r3, r2
 80070b4:	68a0      	ldr	r0, [r4, #8]
 80070b6:	68e2      	ldr	r2, [r4, #12]
 80070b8:	60c2      	str	r2, [r0, #12]
 80070ba:	6090      	str	r0, [r2, #8]
 80070bc:	4a30      	ldr	r2, [pc, #192]	; (8007180 <_free_r+0x1c4>)
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	f043 0001 	orr.w	r0, r3, #1
 80070c4:	4293      	cmp	r3, r2
 80070c6:	6060      	str	r0, [r4, #4]
 80070c8:	608c      	str	r4, [r1, #8]
 80070ca:	d3b9      	bcc.n	8007040 <_free_r+0x84>
 80070cc:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <_free_r+0x1c8>)
 80070ce:	4640      	mov	r0, r8
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	f7ff ff23 	bl	8006f1c <_malloc_trim_r>
 80070d6:	e7b3      	b.n	8007040 <_free_r+0x84>
 80070d8:	4610      	mov	r0, r2
 80070da:	e7cd      	b.n	8007078 <_free_r+0xbc>
 80070dc:	1811      	adds	r1, r2, r0
 80070de:	6849      	ldr	r1, [r1, #4]
 80070e0:	07c9      	lsls	r1, r1, #31
 80070e2:	d444      	bmi.n	800716e <_free_r+0x1b2>
 80070e4:	6891      	ldr	r1, [r2, #8]
 80070e6:	68d2      	ldr	r2, [r2, #12]
 80070e8:	60ca      	str	r2, [r1, #12]
 80070ea:	4403      	add	r3, r0
 80070ec:	f043 0001 	orr.w	r0, r3, #1
 80070f0:	6091      	str	r1, [r2, #8]
 80070f2:	6060      	str	r0, [r4, #4]
 80070f4:	50e3      	str	r3, [r4, r3]
 80070f6:	e7a3      	b.n	8007040 <_free_r+0x84>
 80070f8:	2a14      	cmp	r2, #20
 80070fa:	d816      	bhi.n	800712a <_free_r+0x16e>
 80070fc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8007100:	00ff      	lsls	r7, r7, #3
 8007102:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8007106:	e7aa      	b.n	800705e <_free_r+0xa2>
 8007108:	10aa      	asrs	r2, r5, #2
 800710a:	2301      	movs	r3, #1
 800710c:	684d      	ldr	r5, [r1, #4]
 800710e:	4093      	lsls	r3, r2
 8007110:	432b      	orrs	r3, r5
 8007112:	604b      	str	r3, [r1, #4]
 8007114:	4603      	mov	r3, r0
 8007116:	e7b0      	b.n	800707a <_free_r+0xbe>
 8007118:	f043 0201 	orr.w	r2, r3, #1
 800711c:	614c      	str	r4, [r1, #20]
 800711e:	610c      	str	r4, [r1, #16]
 8007120:	60e5      	str	r5, [r4, #12]
 8007122:	60a5      	str	r5, [r4, #8]
 8007124:	6062      	str	r2, [r4, #4]
 8007126:	50e3      	str	r3, [r4, r3]
 8007128:	e78a      	b.n	8007040 <_free_r+0x84>
 800712a:	2a54      	cmp	r2, #84	; 0x54
 800712c:	d806      	bhi.n	800713c <_free_r+0x180>
 800712e:	0b1a      	lsrs	r2, r3, #12
 8007130:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8007134:	00ff      	lsls	r7, r7, #3
 8007136:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800713a:	e790      	b.n	800705e <_free_r+0xa2>
 800713c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007140:	d806      	bhi.n	8007150 <_free_r+0x194>
 8007142:	0bda      	lsrs	r2, r3, #15
 8007144:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8007148:	00ff      	lsls	r7, r7, #3
 800714a:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800714e:	e786      	b.n	800705e <_free_r+0xa2>
 8007150:	f240 5054 	movw	r0, #1364	; 0x554
 8007154:	4282      	cmp	r2, r0
 8007156:	d806      	bhi.n	8007166 <_free_r+0x1aa>
 8007158:	0c9a      	lsrs	r2, r3, #18
 800715a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800715e:	00ff      	lsls	r7, r7, #3
 8007160:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8007164:	e77b      	b.n	800705e <_free_r+0xa2>
 8007166:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800716a:	257e      	movs	r5, #126	; 0x7e
 800716c:	e777      	b.n	800705e <_free_r+0xa2>
 800716e:	f043 0101 	orr.w	r1, r3, #1
 8007172:	6061      	str	r1, [r4, #4]
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e763      	b.n	8007040 <_free_r+0x84>
 8007178:	20000460 	.word	0x20000460
 800717c:	20000468 	.word	0x20000468
 8007180:	2000086c 	.word	0x2000086c
 8007184:	200008e4 	.word	0x200008e4

08007188 <__retarget_lock_init>:
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop

0800718c <__retarget_lock_init_recursive>:
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop

08007190 <__retarget_lock_close>:
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <__retarget_lock_close_recursive>:
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop

08007198 <__retarget_lock_acquire>:
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop

080071a0 <__retarget_lock_try_acquire>:
 80071a0:	2001      	movs	r0, #1
 80071a2:	4770      	bx	lr

080071a4 <__retarget_lock_try_acquire_recursive>:
 80071a4:	2001      	movs	r0, #1
 80071a6:	4770      	bx	lr

080071a8 <__retarget_lock_release>:
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <__retarget_lock_release_recursive>:
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <cleanup_glue>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	460c      	mov	r4, r1
 80071b4:	6809      	ldr	r1, [r1, #0]
 80071b6:	4605      	mov	r5, r0
 80071b8:	b109      	cbz	r1, 80071be <cleanup_glue+0xe>
 80071ba:	f7ff fff9 	bl	80071b0 <cleanup_glue>
 80071be:	4621      	mov	r1, r4
 80071c0:	4628      	mov	r0, r5
 80071c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c6:	f7ff bef9 	b.w	8006fbc <_free_r>
 80071ca:	bf00      	nop

080071cc <_reclaim_reent>:
 80071cc:	4b20      	ldr	r3, [pc, #128]	; (8007250 <_reclaim_reent+0x84>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4283      	cmp	r3, r0
 80071d2:	d03c      	beq.n	800724e <_reclaim_reent+0x82>
 80071d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80071d6:	b570      	push	{r4, r5, r6, lr}
 80071d8:	4605      	mov	r5, r0
 80071da:	b18b      	cbz	r3, 8007200 <_reclaim_reent+0x34>
 80071dc:	2600      	movs	r6, #0
 80071de:	5999      	ldr	r1, [r3, r6]
 80071e0:	b139      	cbz	r1, 80071f2 <_reclaim_reent+0x26>
 80071e2:	680c      	ldr	r4, [r1, #0]
 80071e4:	4628      	mov	r0, r5
 80071e6:	f7ff fee9 	bl	8006fbc <_free_r>
 80071ea:	4621      	mov	r1, r4
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d1f8      	bne.n	80071e2 <_reclaim_reent+0x16>
 80071f0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80071f2:	3604      	adds	r6, #4
 80071f4:	2e80      	cmp	r6, #128	; 0x80
 80071f6:	d1f2      	bne.n	80071de <_reclaim_reent+0x12>
 80071f8:	4619      	mov	r1, r3
 80071fa:	4628      	mov	r0, r5
 80071fc:	f7ff fede 	bl	8006fbc <_free_r>
 8007200:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007202:	b111      	cbz	r1, 800720a <_reclaim_reent+0x3e>
 8007204:	4628      	mov	r0, r5
 8007206:	f7ff fed9 	bl	8006fbc <_free_r>
 800720a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800720e:	b151      	cbz	r1, 8007226 <_reclaim_reent+0x5a>
 8007210:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8007214:	42b1      	cmp	r1, r6
 8007216:	d006      	beq.n	8007226 <_reclaim_reent+0x5a>
 8007218:	680c      	ldr	r4, [r1, #0]
 800721a:	4628      	mov	r0, r5
 800721c:	f7ff fece 	bl	8006fbc <_free_r>
 8007220:	42a6      	cmp	r6, r4
 8007222:	4621      	mov	r1, r4
 8007224:	d1f8      	bne.n	8007218 <_reclaim_reent+0x4c>
 8007226:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007228:	b111      	cbz	r1, 8007230 <_reclaim_reent+0x64>
 800722a:	4628      	mov	r0, r5
 800722c:	f7ff fec6 	bl	8006fbc <_free_r>
 8007230:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007232:	b903      	cbnz	r3, 8007236 <_reclaim_reent+0x6a>
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007238:	4628      	mov	r0, r5
 800723a:	4798      	blx	r3
 800723c:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8007240:	2900      	cmp	r1, #0
 8007242:	d0f7      	beq.n	8007234 <_reclaim_reent+0x68>
 8007244:	4628      	mov	r0, r5
 8007246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800724a:	f7ff bfb1 	b.w	80071b0 <cleanup_glue>
 800724e:	4770      	bx	lr
 8007250:	20000030 	.word	0x20000030
 8007254:	6c6c6548 	.word	0x6c6c6548
 8007258:	6f57206f 	.word	0x6f57206f
 800725c:	21646c72 	.word	0x21646c72
 8007260:	00000000 	.word	0x00000000

08007264 <DeviceDescriptor>:
 8007264:	01100112 40000002 0058058b 02010010     .......@..X.....
 8007274:	00000100                                ....

08007278 <ConfigurationDescriptor>:
 8007278:	003e0209 80000102 00040932 02020100     ..>.....2.......
 8007288:	24050001 04011000 05060224 01000624     ...$....$...$...
 8007298:	03810507 09ff0008 02000104 0000000a     ................
 80072a8:	02030507 07050040 40028205 00000500     ....@......@....

080072b8 <LanguageString>:
 80072b8:	04090304 00000000                       ........

080072c0 <ManufacturerString>:
 80072c0:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 80072d0:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 80072e0:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 80072f0:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 8007300:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 8007310:	00730000 00000000 00000000              ..s.........

0800731c <ProductString>:
 800731c:	00490320 00460000 00580000 00200000      .I...F...X... .
 800732c:	00430000 00440000 00430000 00000000     ..C...D...C.....
 800733c:	00000000                                ....

08007340 <clock_config>:
 8007340:	01040250 00010000 00000000 00010000     P...............
 8007350:	01010101                                ....

08007354 <Driver_USBD0>:
 8007354:	080022b1 08002319 08002555 08002591     ."...#..U%...%..
 8007364:	080025c5 080025f9 08002801 08002a21     .%...%...(..!*..
 8007374:	08002d11 0800284d 0800265d 080026e5     .-..M(..]&...&..
 8007384:	0800275d 08002999 08002e81 08002ead     ]'...)..........
 8007394:	000020a1 00020000                       . ......

0800739c <_global_impure_ptr>:
 800739c:	20000038                                8.. 
