
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083fc  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  080083fc  0c0083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  00020878  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  00020878  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  00020878  2**0
                  CONTENTS
  6 .data         00000878  20000000  0c008404  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000738  20000878  0c008c7c  00020878  2**2
                  ALLOC
  8 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  9 DSRAM2_DATA   00000000  30000000  30000000  00020878  2**0
                  CONTENTS
 10 DSRAM2_BSS    00000e00  30000000  0c008c7c  00030000  2**2
                  ALLOC
 11 .debug_aranges 00000ad8  00000000  00000000  00020878  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00023291  00000000  00000000  00021350  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032c2  00000000  00000000  000445e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b0b3  00000000  00000000  000478a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002fa8  00000000  00000000  00052958  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00086ab6  00000000  00000000  00055900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005978  00000000  00000000  000dc3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000990  00000000  00000000  000e1d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .build_attributes 0000078f  00000000  00000000  000e26be  2**0
                  CONTENTS, READONLY
 20 .debug_macro  0001d4b8  00000000  00000000  000e2e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 c5 09 00 08     ................
 8000010:	ff 0a 00 08 cb 09 00 08 d1 09 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	75 07 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     u...............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008404 	.word	0x0c008404
 800024c:	20000000 	.word	0x20000000
 8000250:	00000878 	.word	0x00000878
 8000254:	0c008c7c 	.word	0x0c008c7c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008404 	.word	0x0c008404
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008404 	.word	0x0c008404
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000878 	.word	0x20000878
 800027c:	00000738 	.word	0x00000738
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08006d55 	.word	0x08006d55
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080071cd 	.word	0x080071cd
    ldr  r0, =main
 80002ac:	080004c9 	.word	0x080004c9

080002b0 <CAN0_0_IRQHandler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <CAN0_0_IRQHandler>

080002b2 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	78fb      	ldrb	r3, [r7, #3]
 80002c4:	2101      	movs	r1, #1
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	431a      	orrs	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60da      	str	r2, [r3, #12]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	460b      	mov	r3, r1
 8000300:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000302:	887a      	ldrh	r2, [r7, #2]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000320:	887a      	ldrh	r2, [r7, #2]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	611a      	str	r2, [r3, #16]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <append>:
     .dither_limit        = 0U,
     .passive_level       = XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW,
     .timer_concatenation = 0U
    };

uint8_t *append(uint8_t **old, size_t *oldLen, uint8_t *new, size_t newLen) {
 800034e:	b580      	push	{r7, lr}
 8000350:	b086      	sub	sp, #24
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	603b      	str	r3, [r7, #0]
  uint8_t *buf = realloc(*old, (*oldLen) + newLen);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	4413      	add	r3, r2
 8000368:	4619      	mov	r1, r3
 800036a:	f007 fbc1 	bl	8007af0 <realloc>
 800036e:	6178      	str	r0, [r7, #20]
  if(buf) {
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d012      	beq.n	800039c <append+0x4e>
    *old = buf;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	601a      	str	r2, [r3, #0]
    memcpy((*old) + (*oldLen), new, newLen);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4413      	add	r3, r2
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	6879      	ldr	r1, [r7, #4]
 800038a:	4618      	mov	r0, r3
 800038c:	f007 fa58 	bl	8007840 <memcpy>
    *oldLen += newLen;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	441a      	add	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	601a      	str	r2, [r3, #0]
  }
  return buf;
 800039c:	697b      	ldr	r3, [r7, #20]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <ReceiveData>:

int ReceiveData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, uint8_t **buf, size_t *len) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b086      	sub	sp, #24
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	60f8      	str	r0, [r7, #12]
 80003ae:	60b9      	str	r1, [r7, #8]
 80003b0:	607a      	str	r2, [r7, #4]
  int16_t rec = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	82fb      	strh	r3, [r7, #22]

  *len = (size_t) CDC_Device_BytesReceived(CDCInterfaceInfo);
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f003 f9c0 	bl	800373c <CDC_Device_BytesReceived>
 80003bc:	4603      	mov	r3, r0
 80003be:	461a      	mov	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	601a      	str	r2, [r3, #0]
  if(*len == 0) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d101      	bne.n	80003d0 <ReceiveData+0x2a>
    return 1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	e032      	b.n	8000436 <ReceiveData+0x90>
  }

  *buf = (uint8_t *) calloc(*len, sizeof(uint8_t));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2101      	movs	r1, #1
 80003d6:	4618      	mov	r0, r3
 80003d8:	f006 feba 	bl	8007150 <calloc>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	601a      	str	r2, [r3, #0]
  if(*buf == NULL) {
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d101      	bne.n	80003f0 <ReceiveData+0x4a>
    return 2;
 80003ec:	2302      	movs	r3, #2
 80003ee:	e022      	b.n	8000436 <ReceiveData+0x90>
  }

  for(uint16_t i=0; i < *len; i++) {
 80003f0:	2300      	movs	r3, #0
 80003f2:	82bb      	strh	r3, [r7, #20]
 80003f4:	e019      	b.n	800042a <ReceiveData+0x84>
    rec = CDC_Device_ReceiveByte(CDCInterfaceInfo);
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f003 fa1a 	bl	8003830 <CDC_Device_ReceiveByte>
 80003fc:	4603      	mov	r3, r0
 80003fe:	82fb      	strh	r3, [r7, #22]
    if(rec >= 0) {
 8000400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000404:	2b00      	cmp	r3, #0
 8000406:	db07      	blt.n	8000418 <ReceiveData+0x72>
      (*buf)[i] = rec & 0xFF;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	8abb      	ldrh	r3, [r7, #20]
 800040e:	4413      	add	r3, r2
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e005      	b.n	8000424 <ReceiveData+0x7e>
    } else {
      *len = i+1;
 8000418:	8abb      	ldrh	r3, [r7, #20]
 800041a:	3301      	adds	r3, #1
 800041c:	461a      	mov	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
      break;
 8000422:	e007      	b.n	8000434 <ReceiveData+0x8e>
  for(uint16_t i=0; i < *len; i++) {
 8000424:	8abb      	ldrh	r3, [r7, #20]
 8000426:	3301      	adds	r3, #1
 8000428:	82bb      	strh	r3, [r7, #20]
 800042a:	8aba      	ldrh	r2, [r7, #20]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	429a      	cmp	r2, r3
 8000432:	d3e0      	bcc.n	80003f6 <ReceiveData+0x50>
    }
  }
  return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <ProcessData>:

int ProcessData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, uint8_t *buf, size_t len) {
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b091      	sub	sp, #68	; 0x44
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <ProcessData+0x84>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t buff[40] = { 0 };
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	2228      	movs	r2, #40	; 0x28
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f007 faee 	bl	8007a3c <memset>
  for(register size_t i=0; i < len-1; i++) {
 8000460:	2400      	movs	r4, #0
 8000462:	e00b      	b.n	800047c <ProcessData+0x3c>
    buff[i] = buf[len-2-i];
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	1b1b      	subs	r3, r3, r4
 8000468:	3b02      	subs	r3, #2
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	4413      	add	r3, r2
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000474:	4423      	add	r3, r4
 8000476:	f803 2c2c 	strb.w	r2, [r3, #-44]
  for(register size_t i=0; i < len-1; i++) {
 800047a:	3401      	adds	r4, #1
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	42a3      	cmp	r3, r4
 8000482:	d8ef      	bhi.n	8000464 <ProcessData+0x24>
  }
  buff[len-1] = buf[len-1];
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	3a01      	subs	r2, #1
 800048c:	68b9      	ldr	r1, [r7, #8]
 800048e:	440a      	add	r2, r1
 8000490:	7812      	ldrb	r2, [r2, #0]
 8000492:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000496:	440b      	add	r3, r1
 8000498:	f803 2c2c 	strb.w	r2, [r3, #-44]
  return CDC_Device_SendData(CDCInterfaceInfo, buff, len);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	68f8      	ldr	r0, [r7, #12]
 80004a8:	f003 f86e 	bl	8003588 <CDC_Device_SendData>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <ProcessData+0x84>)
 80004b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d001      	beq.n	80004be <ProcessData+0x7e>
 80004ba:	f000 fb39 	bl	8000b30 <__stack_chk_fail>
 80004be:	3744      	adds	r7, #68	; 0x44
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd90      	pop	{r4, r7, pc}
 80004c4:	080083ac 	.word	0x080083ac

080004c8 <main>:

int main(void) {
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b08d      	sub	sp, #52	; 0x34
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <main+0xb8>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  char teststring[] = "Hello World!";
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <main+0xbc>)
 80004d6:	f107 041c 	add.w	r4, r7, #28
 80004da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004dc:	c407      	stmia	r4!, {r0, r1, r2}
 80004de:	7023      	strb	r3, [r4, #0]
  uint8_t *data = NULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
  size_t dataLen = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]

  USB_Init();
 80004e8:	f000 f94e 	bl	8000788 <USB_Init>

  while (1) {
    if(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) > 0) {
 80004ec:	4826      	ldr	r0, [pc, #152]	; (8000588 <main+0xc0>)
 80004ee:	f003 f925 	bl	800373c <CDC_Device_BytesReceived>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d019      	beq.n	800052c <main+0x64>
      uint8_t *new = NULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
      size_t newLen = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
      if(ReceiveData(&VirtualSerial_CDC_Interface, &new, &newLen) == 0) {
 8000500:	f107 0210 	add.w	r2, r7, #16
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	481f      	ldr	r0, [pc, #124]	; (8000588 <main+0xc0>)
 800050c:	f7ff ff4b 	bl	80003a6 <ReceiveData>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d106      	bne.n	8000524 <main+0x5c>
        append(&data, &dataLen, new, newLen);
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	f107 0108 	add.w	r1, r7, #8
 800051e:	1d38      	adds	r0, r7, #4
 8000520:	f7ff ff15 	bl	800034e <append>
      }
      free(new);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fe80 	bl	800722c <free>
    }
    if(dataLen > 0) {
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d021      	beq.n	8000576 <main+0xae>
      uint8_t *lf = memchr(data, '\n', dataLen);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	210a      	movs	r1, #10
 8000538:	4618      	mov	r0, r3
 800053a:	f007 f931 	bl	80077a0 <memchr>
 800053e:	6178      	str	r0, [r7, #20]
      if(lf) {
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d017      	beq.n	8000576 <main+0xae>
        size_t lineLen = lf - data + 1; //+1 to copy the \n with the line
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	3301      	adds	r3, #1
 800054e:	61bb      	str	r3, [r7, #24]
        ProcessData(&VirtualSerial_CDC_Interface, data, lineLen);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	69ba      	ldr	r2, [r7, #24]
 8000554:	4619      	mov	r1, r3
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0xc0>)
 8000558:	f7ff ff72 	bl	8000440 <ProcessData>
        memmove(data, lf + 1, dataLen - lineLen);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	1c59      	adds	r1, r3, #1
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	461a      	mov	r2, r3
 800056a:	f007 fa03 	bl	8007974 <memmove>
        dataLen -= lineLen;
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	60bb      	str	r3, [r7, #8]
      }
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0xc0>)
 8000578:	f002 ff86 	bl	8003488 <CDC_Device_USBTask>
    if(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) > 0) {
 800057c:	e7b6      	b.n	80004ec <main+0x24>
 800057e:	bf00      	nop
 8000580:	080083ac 	.word	0x080083ac
 8000584:	080082a0 	.word	0x080082a0
 8000588:	20000008 	.word	0x20000008

0800058c <blink>:
  }
}

void blink(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  XMC_CCU4_Init(CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8000590:	2100      	movs	r1, #0
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <blink+0x84>)
 8000594:	f005 ff27 	bl	80063e6 <XMC_CCU4_Init>
  XMC_CCU4_SLICE_CompareInit(CCU40_CC42, &CCU_compare_config);
 8000598:	491e      	ldr	r1, [pc, #120]	; (8000614 <blink+0x88>)
 800059a:	481f      	ldr	r0, [pc, #124]	; (8000618 <blink+0x8c>)
 800059c:	f005 ff79 	bl	8006492 <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_CompareInit(CCU40_CC43, &CCU_compare_config);
 80005a0:	491c      	ldr	r1, [pc, #112]	; (8000614 <blink+0x88>)
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <blink+0x90>)
 80005a4:	f005 ff75 	bl	8006492 <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC42, 0x8000);
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	481a      	ldr	r0, [pc, #104]	; (8000618 <blink+0x8c>)
 80005ae:	f7ff feb1 	bl	8000314 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC43, 0x8000);
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	4819      	ldr	r0, [pc, #100]	; (800061c <blink+0x90>)
 80005b8:	f7ff feac 	bl	8000314 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC42, 0xFFFF);
 80005bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <blink+0x8c>)
 80005c2:	f7ff fe98 	bl	80002f6 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC43, 0xFA00);
 80005c6:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <blink+0x90>)
 80005cc:	f7ff fe93 	bl	80002f6 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_EnableShadowTransfer(CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_2 | XMC_CCU4_SHADOW_TRANSFER_SLICE_3);
 80005d0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <blink+0x84>)
 80005d6:	f7ff feac 	bl	8000332 <XMC_CCU4_EnableShadowTransfer>
  XMC_GPIO_Init(XMC_GPIO_PORT1,  0, &LED_config);
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <blink+0x94>)
 80005dc:	2100      	movs	r1, #0
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <blink+0x98>)
 80005e0:	f005 fd80 	bl	80060e4 <XMC_GPIO_Init>
  XMC_GPIO_Init(XMC_GPIO_PORT1,  1, &LED_config);
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <blink+0x94>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	480e      	ldr	r0, [pc, #56]	; (8000624 <blink+0x98>)
 80005ea:	f005 fd7b 	bl	80060e4 <XMC_GPIO_Init>
  XMC_CCU4_EnableClock(CCU40, 2);
 80005ee:	2102      	movs	r1, #2
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <blink+0x84>)
 80005f2:	f7ff fe5e 	bl	80002b2 <XMC_CCU4_EnableClock>
  XMC_CCU4_EnableClock(CCU40, 3);
 80005f6:	2103      	movs	r1, #3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <blink+0x84>)
 80005fa:	f7ff fe5a 	bl	80002b2 <XMC_CCU4_EnableClock>
  XMC_CCU4_SLICE_StartTimer(CCU40_CC42);
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <blink+0x8c>)
 8000600:	f7ff fe6c 	bl	80002dc <XMC_CCU4_SLICE_StartTimer>
  XMC_CCU4_SLICE_StartTimer(CCU40_CC43);
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <blink+0x90>)
 8000606:	f7ff fe69 	bl	80002dc <XMC_CCU4_SLICE_StartTimer>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	4000c000 	.word	0x4000c000
 8000614:	20000000 	.word	0x20000000
 8000618:	4000c300 	.word	0x4000c300
 800061c:	4000c400 	.word	0x4000c400
 8000620:	08008294 	.word	0x08008294
 8000624:	48028100 	.word	0x48028100

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <__NVIC_EnableIRQ+0x38>)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	f002 021f 	and.w	r2, r2, #31
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0c      	blt.n	80006ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <__NVIC_ClearPendingIRQ+0x38>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	3360      	adds	r3, #96	; 0x60
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db0a      	blt.n	80006e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	490d      	ldr	r1, [pc, #52]	; (8000708 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e4:	e00a      	b.n	80006fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	440b      	add	r3, r1
 80006fa:	761a      	strb	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	617b      	str	r3, [r7, #20]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b06      	cmp	r3, #6
 800072c:	bf28      	it	cs
 800072e:	2306      	movcs	r3, #6
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3306      	adds	r3, #6
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3b01      	subs	r3, #1
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	2201      	movs	r2, #1
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	401a      	ands	r2, r3
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000756:	2101      	movs	r1, #1
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	1e59      	subs	r1, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&USB_runtime);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <USB0_0_IRQHandler+0x10>)
 800077a:	f001 fd8b 	bl	8002294 <XMC_USBD_IRQHandler>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028

08000788 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  USBD_Initialize(&USB_runtime);
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <USB_Init+0x4c>)
 800078e:	f000 fe93 	bl	80014b8 <USBD_Initialize>
	
  /* Interrupts configuration*/
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
 8000792:	f7ff ff49 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000796:	4603      	mov	r3, r0
 8000798:	2200      	movs	r2, #0
 800079a:	213f      	movs	r1, #63	; 0x3f
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffb7 	bl	8000710 <NVIC_EncodePriority>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4619      	mov	r1, r3
 80007a6:	206b      	movs	r0, #107	; 0x6b
 80007a8:	f7ff ff88 	bl	80006bc <__NVIC_SetPriority>
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80007ac:	206b      	movs	r0, #107	; 0x6b
 80007ae:	f7ff ff67 	bl	8000680 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 80007b2:	206b      	movs	r0, #107	; 0x6b
 80007b4:	f7ff ff46 	bl	8000644 <__NVIC_EnableIRQ>

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <USB_Init+0x50>)
 80007ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007be:	619a      	str	r2, [r3, #24]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <USB_Init+0x50>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	779a      	strb	r2, [r3, #30]
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <USB_Init+0x54>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000bb0 	.word	0x20000bb0

080007e0 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  if(device.IsConfigured)
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <EVENT_USB_Device_Reset+0x2c>)
 8000802:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <EVENT_USB_Device_Reset+0x26>
  {
    USB_Init();
 8000810:	f7ff ffba 	bl	8000788 <USB_Init>
    device.IsConfigured=0;
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EVENT_USB_Device_Reset+0x2c>)
 8000816:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800081a:	f36f 0300 	bfc	r3, #0, #1
 800081e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
  }
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000bb0 	.word	0x20000bb0

0800082c <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 8000834:	2081      	movs	r0, #129	; 0x81
 8000836:	f000 feb5 	bl	80015a4 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 800083a:	2240      	movs	r2, #64	; 0x40
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <EVENT_USB_Device_ConfigurationChanged+0x40>)
 800083e:	2082      	movs	r0, #130	; 0x82
 8000840:	f000 feb0 	bl	80015a4 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 8000844:	2240      	movs	r2, #64	; 0x40
 8000846:	490a      	ldr	r1, [pc, #40]	; (8000870 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000848:	2003      	movs	r0, #3
 800084a:	f000 feab 	bl	80015a4 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000850:	f002 fdd6 	bl	8003400 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000856:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000930 	.word	0x20000930
 800086c:	20000970 	.word	0x20000970
 8000870:	200008f0 	.word	0x200008f0
 8000874:	20000008 	.word	0x20000008
 8000878:	20000bb0 	.word	0x20000bb0

0800087c <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <EVENT_USB_Device_ControlRequest+0x10>)
 8000882:	f002 fcbd 	bl	8003200 <CDC_Device_ProcessControlRequest>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	603a      	str	r2, [r7, #0]
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	460b      	mov	r3, r1
 80008ca:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	723b      	strb	r3, [r7, #8]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	727b      	strb	r3, [r7, #9]

	const void* Address = NULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 80008dc:	2300      	movs	r3, #0
 80008de:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType)
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d008      	beq.n	80008f8 <CALLBACK_USB_GetDescriptor+0x3c>
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d00b      	beq.n	8000902 <CALLBACK_USB_GetDescriptor+0x46>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d121      	bne.n	8000932 <CALLBACK_USB_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <CALLBACK_USB_GetDescriptor+0x8c>)
 80008f0:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 80008f2:	2312      	movs	r3, #18
 80008f4:	817b      	strh	r3, [r7, #10]
			break;
 80008f6:	e01c      	b.n	8000932 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <CALLBACK_USB_GetDescriptor+0x90>)
 80008fa:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 80008fc:	233e      	movs	r3, #62	; 0x3e
 80008fe:	817b      	strh	r3, [r7, #10]
			break;
 8000900:	e017      	b.n	8000932 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_String:
			switch (DescriptorNumber)
 8000902:	7a7b      	ldrb	r3, [r7, #9]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d009      	beq.n	800091c <CALLBACK_USB_GetDescriptor+0x60>
 8000908:	2b02      	cmp	r3, #2
 800090a:	d00c      	beq.n	8000926 <CALLBACK_USB_GetDescriptor+0x6a>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d000      	beq.n	8000912 <CALLBACK_USB_GetDescriptor+0x56>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000910:	e00e      	b.n	8000930 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &LanguageString;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <CALLBACK_USB_GetDescriptor+0x94>)
 8000914:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 8000916:	2304      	movs	r3, #4
 8000918:	817b      	strh	r3, [r7, #10]
					break;
 800091a:	e009      	b.n	8000930 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ManufacturerString;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <CALLBACK_USB_GetDescriptor+0x98>)
 800091e:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000920:	2358      	movs	r3, #88	; 0x58
 8000922:	817b      	strh	r3, [r7, #10]
					break;
 8000924:	e004      	b.n	8000930 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ProductString;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <CALLBACK_USB_GetDescriptor+0x9c>)
 8000928:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 800092a:	2320      	movs	r3, #32
 800092c:	817b      	strh	r3, [r7, #10]
					break;
 800092e:	bf00      	nop
			break;
 8000930:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	601a      	str	r2, [r3, #0]
	return Size;
 8000938:	897b      	ldrh	r3, [r7, #10]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	080082b0 	.word	0x080082b0
 800094c:	080082c4 	.word	0x080082c4
 8000950:	08008304 	.word	0x08008304
 8000954:	0800830c 	.word	0x0800830c
 8000958:	08008368 	.word	0x08008368

0800095c <SystemCoreClockSetup>:
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
};

void SystemCoreClockSetup(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 8000962:	4815      	ldr	r0, [pc, #84]	; (80009b8 <SystemCoreClockSetup+0x5c>)
 8000964:	f003 fe28 	bl	80045b8 <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 8000968:	f004 faec 	bl	8004f44 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	2002      	movs	r0, #2
 8000970:	f004 fb0c 	bl	8004f8c <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 8000974:	2004      	movs	r0, #4
 8000976:	f004 fa23 	bl	8004dc0 <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800097a:	2000      	movs	r0, #0
 800097c:	f004 f928 	bl	8004bd0 <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000980:	2001      	movs	r0, #1
 8000982:	f004 fa77 	bl	8004e74 <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
 8000986:	f006 fb33 	bl	8006ff0 <SystemCoreClockUpdate>

    /* add some other stuff here to stealthy execute it without leaving trace in the main.c */

    /* Pull P2.10 low to allow the ESS control board to recognize if a system reset was initiated. */
    *((uint32_t *) (0x48028200+0x18)) |= 0x18<<19; /* set P2.10 as open-drain output */
 800098a:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <SystemCoreClockSetup+0x60>)
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <SystemCoreClockSetup+0x60>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000994:	6013      	str	r3, [r2, #0]

    /* setup and enable MPU */
    MPUconfig_t Stack = \
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SystemCoreClockSetup+0x64>)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	ca07      	ldmia	r2, {r0, r1, r2}
 800099c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      {.baseAddress=(void *) 0x10000000, .size=16, .priority=1, \
       .permissions=MPUeasyENABLEREGION | MPUeasyXN | MPUeasy_RW_RW};
//       .permissions=MPUeasyENABLEREGION | MPUeasyXN | MPUeasy_RW_RW};
    configMPU(Stack);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009a6:	f000 f84b 	bl	8000a40 <configMPU>
    enableMPU(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 f813 	bl	80009d6 <enableMPU>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	0800838c 	.word	0x0800838c
 80009bc:	48028218 	.word	0x48028218
 80009c0:	080083a0 	.word	0x080083a0

080009c4 <HardFault_Handler>:

void HardFault_Handler(void) {
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  while(1);
 80009c8:	e7fe      	b.n	80009c8 <HardFault_Handler+0x4>

080009ca <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  while(1);
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  while(1);
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <enableMPU>:
 */

#include <xmc_common.h>
#include "MPUeasy.h"

void enableMPU(int enableBackgroundRegion) {
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	PPB->MPU_CTRL |= (enableBackgroundRegion ? 0x4 : 0x0) | 0x1;
 80009e6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80009ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80009ee:	f8d3 2d94 	ldr.w	r2, [r3, #3476]	; 0xd94
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <enableMPU+0x26>
 80009f8:	2305      	movs	r3, #5
 80009fa:	e000      	b.n	80009fe <enableMPU+0x28>
 80009fc:	2301      	movs	r3, #1
 80009fe:	4313      	orrs	r3, r2
 8000a00:	f8c1 3d94 	str.w	r3, [r1, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a08:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <disableMPU>:

void disableMPU(void) {
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a20:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	PPB->MPU_CTRL = 0;
 8000a24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a32:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <configMPU>:

void configMPU(MPUconfig_t config) {
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* to align baseAddress, we shift right and then left again,
	 * with at least the position of the ADDR bitfield
	 * so other bitfields don't get changed */
	uint8_t addrShift = config.size > PPB_MPU_RBAR_ADDR_Pos ? \
	                    config.size : PPB_MPU_RBAR_ADDR_Pos;
 8000a4c:	7b3b      	ldrb	r3, [r7, #12]
	uint8_t addrShift = config.size > PPB_MPU_RBAR_ADDR_Pos ? \
 8000a4e:	2b09      	cmp	r3, #9
 8000a50:	bf38      	it	cc
 8000a52:	2309      	movcc	r3, #9
 8000a54:	75bb      	strb	r3, [r7, #22]
	/* TEX, S, C, and B field will be set according to recommendation
	 * in table 2-17 of manual */
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a5c:	d30d      	bcc.n	8000a7a <configMPU+0x3a>
	                  config.baseAddress < (void *)0x40000000 ? 0x6 : \
 8000a5e:	687b      	ldr	r3, [r7, #4]
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d307      	bcc.n	8000a76 <configMPU+0x36>
	                  config.baseAddress < (void *)0x60000000 ? 0x5 : \
 8000a66:	687b      	ldr	r3, [r7, #4]
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000a68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8000a6c:	d201      	bcs.n	8000a72 <configMPU+0x32>
 8000a6e:	2305      	movs	r3, #5
 8000a70:	e004      	b.n	8000a7c <configMPU+0x3c>
 8000a72:	2307      	movs	r3, #7
 8000a74:	e002      	b.n	8000a7c <configMPU+0x3c>
 8000a76:	2306      	movs	r3, #6
 8000a78:	e000      	b.n	8000a7c <configMPU+0x3c>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	75fb      	strb	r3, [r7, #23]
	                                                            0x7;
	/* switch to correct priority slot */
	PPB->MPU_RNR = config.priority & 0x7;
 8000a7e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a82:	7b7b      	ldrb	r3, [r7, #13]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	f8c2 3d98 	str.w	r3, [r2, #3480]	; 0xd98
	/* disable region before changing parameters to avoid glitches */
	PPB->MPU_RASR &= ~PPB_MPU_RASR_ENABLE_Msk;
 8000a8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a94:	f8d3 3da0 	ldr.w	r3, [r3, #3488]	; 0xda0
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	f8c2 3da0 	str.w	r3, [r2, #3488]	; 0xda0

	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000aa0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7dbb      	ldrb	r3, [r7, #22]
 8000aaa:	40da      	lsrs	r2, r3
	                                               << addrShift;
 8000aac:	7dbb      	ldrb	r3, [r7, #22]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000ab2:	f8c1 3d9c 	str.w	r3, [r1, #3484]	; 0xd9c
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000ab6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	061b      	lsls	r3, r3, #24
                & (PPB_MPU_RASR_XN_Msk | PPB_MPU_RASR_AP_Msk))  | \
 8000abe:	f003 53b8 	and.w	r3, r3, #385875968	; 0x17000000
	                (autoSet            << PPB_MPU_RASR_B_Pos  )  | \
 8000ac2:	7dfa      	ldrb	r2, [r7, #23]
 8000ac4:	0412      	lsls	r2, r2, #16
                & (PPB_MPU_RASR_XN_Msk | PPB_MPU_RASR_AP_Msk))  | \
 8000ac6:	431a      	orrs	r2, r3
            ((config.size > 0 ? config.size - 1 : config.size)\
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
	                                    << PPB_MPU_RASR_SIZE_Pos\
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <configMPU+0x9a>
            ((config.size > 0 ? config.size - 1 : config.size)\
 8000ace:	7b3b      	ldrb	r3, [r7, #12]
 8000ad0:	3b01      	subs	r3, #1
	                                    << PPB_MPU_RASR_SIZE_Pos\
 8000ad2:	005b      	lsls	r3, r3, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000ad4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ad8:	e003      	b.n	8000ae2 <configMPU+0xa2>
            ((config.size > 0 ? config.size - 1 : config.size)\
 8000ada:	7b3b      	ldrb	r3, [r7, #12]
	                                    << PPB_MPU_RASR_SIZE_Pos\
 8000adc:	005b      	lsls	r3, r3, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000ade:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	                (autoSet            << PPB_MPU_RASR_B_Pos  )  | \
 8000ae2:	431a      	orrs	r2, r3
	                (config.permissions >> 7 \
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	11db      	asrs	r3, r3, #7
	                                     & PPB_MPU_RASR_ENABLE_Msk);
 8000ae8:	f003 0301 	and.w	r3, r3, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000aec:	4313      	orrs	r3, r2
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000aee:	f8c1 3da0 	str.w	r3, [r1, #3488]	; 0xda0
}
 8000af2:	bf00      	nop
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <MemManage_Handler>:

void MemManage_Handler(void) {
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
  uint8_t MMFSR = PPB->CFSR;
 8000b04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b08:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8000b0c:	71fb      	strb	r3, [r7, #7]
  void *MMFAR = (MMFSR & PPB_CFSR_MMARVALID_Msk) ? (void *) PPB->MMFAR : NULL;
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da04      	bge.n	8000b20 <MemManage_Handler+0x22>
 8000b16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b1a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8000b1e:	e000      	b.n	8000b22 <MemManage_Handler+0x24>
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  /* use EXC_FRAME_t with appropriate base address to inspect stacked CPU status before exception */
  EXC_FRAME_t *status = NULL; /* set to correct position using debugger */
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  while(1);
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x2a>

08000b2a <gadget1>:
.syntax unified
.text
.thumb_func
gadget1:
  .fnstart
  SUB sp, #16
 8000b2a:	b084      	sub	sp, #16
  POP {pc}
 8000b2c:	bd00      	pop	{pc}
	...

08000b30 <__stack_chk_fail>:
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	4905      	ldr	r1, [pc, #20]	; (8000b50 <__stack_chk_fail+0x20>)
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <__stack_chk_fail+0x20>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__stack_chk_fail+0x24>)
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60cb      	str	r3, [r1, #12]
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <__stack_chk_fail+0x1c>
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	05fa0004 	.word	0x05fa0004

08000b58 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <USBD_HandleEP0_Stall+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	2101      	movs	r1, #1
 8000b64:	2080      	movs	r0, #128	; 0x80
 8000b66:	4798      	blx	r3
	device.EP0_State = IDLE;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <USBD_HandleEP0_Stall+0x28>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <USBD_HandleEP0_Stall+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b76:	2118      	movs	r1, #24
 8000b78:	2000      	movs	r0, #0
 8000b7a:	4798      	blx	r3
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000bb0 	.word	0x20000bb0

08000b84 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
	uint16_t status = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8000b92:	4bab      	ldr	r3, [pc, #684]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000b94:	885b      	ldrh	r3, [r3, #2]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	71fb      	strb	r3, [r7, #7]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8000b9a:	f7ff fe6f 	bl	800087c <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8000b9e:	4ba9      	ldr	r3, [pc, #676]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000ba0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000ba4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 81fd 	beq.w	8000faa <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000bb0:	4ba3      	ldr	r3, [pc, #652]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	2b0c      	cmp	r3, #12
 8000bb6:	f200 81ea 	bhi.w	8000f8e <USB_Device_ProcessControlRequest+0x40a>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <USB_Device_ProcessControlRequest+0x3c>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000d39 	.word	0x08000d39
 8000bc4:	08000bf5 	.word	0x08000bf5
 8000bc8:	08000f8f 	.word	0x08000f8f
 8000bcc:	08000ec3 	.word	0x08000ec3
 8000bd0:	08000f8f 	.word	0x08000f8f
 8000bd4:	08000e1d 	.word	0x08000e1d
 8000bd8:	08000c9b 	.word	0x08000c9b
 8000bdc:	08000e89 	.word	0x08000e89
 8000be0:	08000c8b 	.word	0x08000c8b
 8000be4:	08000e51 	.word	0x08000e51
 8000be8:	08000d01 	.word	0x08000d01
 8000bec:	08000e8f 	.word	0x08000e8f
 8000bf0:	08000f89 	.word	0x08000f89
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000bf4:	4b92      	ldr	r3, [pc, #584]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d133      	bne.n	8000c68 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000c00:	4b8f      	ldr	r3, [pc, #572]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000c02:	889b      	ldrh	r3, [r3, #4]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000c0c:	4b8e      	ldr	r3, [pc, #568]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d004      	beq.n	8000c20 <USB_Device_ProcessControlRequest+0x9c>
 8000c16:	4b8a      	ldr	r3, [pc, #552]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d120      	bne.n	8000c62 <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8000c20:	897b      	ldrh	r3, [r7, #10]
 8000c22:	4a88      	ldr	r2, [pc, #544]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000c24:	212c      	movs	r1, #44	; 0x2c
 8000c26:	fb01 f303 	mul.w	r3, r1, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	7a1b      	ldrb	r3, [r3, #8]
 8000c2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c32:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d114      	bne.n	8000c62 <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8000c38:	897b      	ldrh	r3, [r7, #10]
 8000c3a:	4a82      	ldr	r2, [pc, #520]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000c3c:	212c      	movs	r1, #44	; 0x2c
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	441a      	add	r2, r3
 8000c44:	7a13      	ldrb	r3, [r2, #8]
 8000c46:	f36f 0382 	bfc	r3, #2, #1
 8000c4a:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000c4c:	4b7d      	ldr	r3, [pc, #500]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	4a7b      	ldr	r2, [pc, #492]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000c54:	8892      	ldrh	r2, [r2, #4]
 8000c56:	b292      	uxth	r2, r2
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8000c60:	e19b      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 8000c62:	f7ff ff79 	bl	8000b58 <USBD_HandleEP0_Stall>
			break;
 8000c66:	e198      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000c68:	4b75      	ldr	r3, [pc, #468]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d107      	bne.n	8000c84 <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8000c74:	4a73      	ldr	r2, [pc, #460]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000c76:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000c7a:	f36f 0382 	bfc	r3, #2, #1
 8000c7e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 8000c82:	e18a      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 8000c84:	f7ff ff68 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000c88:	e187      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000c8a:	4b6e      	ldr	r3, [pc, #440]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	2201      	movs	r2, #1
 8000c92:	496e      	ldr	r1, [pc, #440]	; (8000e4c <USB_Device_ProcessControlRequest+0x2c8>)
 8000c94:	2000      	movs	r0, #0
 8000c96:	4798      	blx	r3
		break;
 8000c98:	e17f      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000c9a:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000c9c:	885b      	ldrh	r3, [r3, #2]
 8000c9e:	b298      	uxth	r0, r3
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000ca2:	889b      	ldrh	r3, [r3, #4]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f107 020c 	add.w	r2, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fe05 	bl	80008bc <CALLBACK_USB_GetDescriptor>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	613b      	str	r3, [r7, #16]
		if (length==0)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <USB_Device_ProcessControlRequest+0x13e>
			USBD_HandleEP0_Stall();
 8000cbc:	f7ff ff4c 	bl	8000b58 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 8000cc0:	e16b      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
					length : USB_ControlRequest.wLength;
 8000cc2:	4b5f      	ldr	r3, [pc, #380]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000cc4:	88db      	ldrh	r3, [r3, #6]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	461a      	mov	r2, r3
			length = length < USB_ControlRequest.wLength ?
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	bf28      	it	cs
 8000cd0:	4613      	movcs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	2000      	movs	r0, #0
 8000ce0:	4798      	blx	r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	617b      	str	r3, [r7, #20]
			device.Endpoints[0].InDataLeft = length - ret;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a55      	ldr	r2, [pc, #340]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000cee:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000cfe:	e14c      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000d00:	4b51      	ldr	r3, [pc, #324]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d10d      	bne.n	8000d26 <USB_Device_ProcessControlRequest+0x1a2>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a4b      	ldr	r2, [pc, #300]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000d12:	8892      	ldrh	r2, [r2, #4]
 8000d14:	b292      	uxth	r2, r2
 8000d16:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8000d1a:	494a      	ldr	r1, [pc, #296]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d1c:	4411      	add	r1, r2
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2000      	movs	r0, #0
 8000d22:	4798      	blx	r3
			break;
 8000d24:	e139      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000d26:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	f040 8131 	bne.w	8000f94 <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8000d32:	f7ff ff11 	bl	8000b58 <USBD_HandleEP0_Stall>
			break;
 8000d36:	e130      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000d38:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11b      	bne.n	8000d7c <USB_Device_ProcessControlRequest+0x1f8>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d46:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000d4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d56:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000d5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f107 0108 	add.w	r1, r7, #8
 8000d74:	2202      	movs	r2, #2
 8000d76:	2000      	movs	r0, #0
 8000d78:	4798      	blx	r3
			break;
 8000d7a:	e10e      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10f      	bne.n	8000da8 <USB_Device_ProcessControlRequest+0x224>
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d10a      	bne.n	8000da8 <USB_Device_ProcessControlRequest+0x224>
			status = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f107 0108 	add.w	r1, r7, #8
 8000da0:	2202      	movs	r2, #2
 8000da2:	2000      	movs	r0, #0
 8000da4:	4798      	blx	r3
			break;
 8000da6:	e0f8      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <USB_Device_ProcessControlRequest+0x292>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d004      	beq.n	8000dd4 <USB_Device_ProcessControlRequest+0x250>
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <USB_Device_ProcessControlRequest+0x2bc>)
 8000dcc:	889b      	ldrh	r3, [r3, #4]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d120      	bne.n	8000e16 <USB_Device_ProcessControlRequest+0x292>
					device.Endpoints[Index].IsConfigured==1) {
 8000dd4:	897b      	ldrh	r3, [r7, #10]
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000dd8:	212c      	movs	r1, #44	; 0x2c
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	7a1b      	ldrb	r3, [r3, #8]
 8000de2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000de6:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d114      	bne.n	8000e16 <USB_Device_ProcessControlRequest+0x292>
				status = device.Endpoints[Index].IsHalted;
 8000dec:	897b      	ldrh	r3, [r7, #10]
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000df0:	212c      	movs	r1, #44	; 0x2c
 8000df2:	fb01 f303 	mul.w	r3, r1, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f107 0108 	add.w	r1, r7, #8
 8000e0e:	2202      	movs	r2, #2
 8000e10:	2000      	movs	r0, #0
 8000e12:	4798      	blx	r3
				break;
 8000e14:	e0c1      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8000e16:	f7ff fe9f 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000e1a:	e0be      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <USB_Device_ProcessControlRequest+0x2a6>
			USB_DeviceState = DEVICE_STATE_Default;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e002      	b.n	8000e30 <USB_Device_ProcessControlRequest+0x2ac>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <USB_Device_ProcessControlRequest+0x2c4>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <USB_Device_ProcessControlRequest+0x2c0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4798      	blx	r3
		break;
 8000e3e:	e0ac      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
 8000e40:	20000f00 	.word	0x20000f00
 8000e44:	20000bb0 	.word	0x20000bb0
 8000e48:	20000efd 	.word	0x20000efd
 8000e4c:	20000ce9 	.word	0x20000ce9

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8000e50:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000e58:	f7ff fce8 	bl	800082c <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	701a      	strb	r2, [r3, #0]
			break;
 8000e68:	e097      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 8000e6a:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000e6c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 8000e80:	e08b      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 8000e82:	f7ff fe69 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000e86:	e088      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 8000e88:	f7ff fe66 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000e8c:	e085      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d10c      	bne.n	8000eb2 <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000e98:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000e9a:	889b      	ldrh	r3, [r3, #4]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000ea2:	885b      	ldrh	r3, [r3, #2]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8000eb0:	e073      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d16d      	bne.n	8000f98 <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 8000ebc:	f7ff fe4c 	bl	8000b58 <USBD_HandleEP0_Stall>
			break;
 8000ec0:	e06b      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d102      	bne.n	8000ece <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 8000ec8:	f7ff fe46 	bl	8000b58 <USBD_HandleEP0_Stall>
			break;
 8000ecc:	e065      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d138      	bne.n	8000f4a <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00a      	beq.n	8000ef4 <USB_Device_ProcessControlRequest+0x370>
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d000      	beq.n	8000ee4 <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 8000ee2:	e05a      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 8000ee4:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000ee6:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8000ef2:	e029      	b.n	8000f48 <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8000f00:	897b      	ldrh	r3, [r7, #10]
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000f04:	212c      	movs	r1, #44	; 0x2c
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	7a1b      	ldrb	r3, [r3, #8]
 8000f0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 8000f18:	f7ff fe1e 	bl	8000b58 <USBD_HandleEP0_Stall>
				break;
 8000f1c:	e013      	b.n	8000f46 <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000f22:	212c      	movs	r1, #44	; 0x2c
 8000f24:	fb01 f303 	mul.w	r3, r1, r3
 8000f28:	441a      	add	r2, r3
 8000f2a:	7a13      	ldrb	r3, [r2, #8]
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000f3a:	8892      	ldrh	r2, [r2, #4]
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	2101      	movs	r1, #1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4798      	blx	r3
				break;
 8000f46:	bf00      	nop
			break;
 8000f48:	e027      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <USB_Device_ProcessControlRequest+0x434>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d116      	bne.n	8000f82 <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d113      	bne.n	8000f82 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10d      	bne.n	8000f82 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <USB_Device_ProcessControlRequest+0x438>)
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000f74:	7a13      	ldrb	r3, [r2, #8]
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8000f7c:	f7ff fdec 	bl	8000b58 <USBD_HandleEP0_Stall>
				break;
 8000f80:	e00b      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 8000f82:	f7ff fde9 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000f86:	e008      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 8000f88:	f7ff fde6 	bl	8000b58 <USBD_HandleEP0_Stall>
		break;
 8000f8c:	e005      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 8000f8e:	f7ff fde3 	bl	8000b58 <USBD_HandleEP0_Stall>
 8000f92:	e002      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <USB_Device_ProcessControlRequest+0x416>
		break;
 8000f98:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <USB_Device_ProcessControlRequest+0x430>)
 8000f9c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000fa0:	f36f 0341 	bfc	r3, #1, #1
 8000fa4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8000fa8:	e000      	b.n	8000fac <USB_Device_ProcessControlRequest+0x428>
		return;
 8000faa:	bf00      	nop
}
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000bb0 	.word	0x20000bb0
 8000fb8:	20000efd 	.word	0x20000efd
 8000fbc:	20000f00 	.word	0x20000f00

08000fc0 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000fc6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d109      	bne.n	8000fe2 <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000fdc:	2205      	movs	r2, #5
 8000fde:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000fe4:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d10b      	bne.n	8001004 <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000ff4:	7912      	ldrb	r2, [r2, #4]
 8000ff6:	2118      	movs	r1, #24
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <USBD_HandleEP0_IN+0x48>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000bb0 	.word	0x20000bb0

0800100c <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001012:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001016:	2b04      	cmp	r3, #4
 8001018:	d10c      	bne.n	8001034 <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 800101a:	f7ff fdb3 	bl	8000b84 <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 800102e:	2203      	movs	r2, #3
 8001030:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001036:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800103a:	2b05      	cmp	r3, #5
 800103c:	d10b      	bne.n	8001056 <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001046:	7912      	ldrb	r2, [r2, #4]
 8001048:	2118      	movs	r1, #24
 800104a:	4610      	mov	r0, r2
 800104c:	4798      	blx	r3
		device.EP0_State = IDLE;
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <USBD_HandleEP0_OUT+0x50>)
 8001050:	2201      	movs	r2, #1
 8001052:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000bb0 	.word	0x20000bb0

08001060 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2208      	movs	r2, #8
 800106e:	4920      	ldr	r1, [pc, #128]	; (80010f0 <USBD_HandleEP0_SETUP+0x90>)
 8001070:	2000      	movs	r0, #0
 8001072:	4798      	blx	r3
 8001074:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 8001078:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d12c      	bne.n	80010e4 <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <USBD_HandleEP0_SETUP+0x90>)
 800108c:	88db      	ldrh	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10d      	bne.n	80010b0 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 8001096:	2203      	movs	r2, #3
 8001098:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 800109c:	f7ff fd72 	bl	8000b84 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	4798      	blx	r3
 80010ae:	e01a      	b.n	80010e6 <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <USBD_HandleEP0_SETUP+0x90>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da06      	bge.n	80010c8 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 80010bc:	2202      	movs	r2, #2
 80010be:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 80010c2:	f7ff fd5f 	bl	8000b84 <USB_Device_ProcessControlRequest>
 80010c6:	e00e      	b.n	80010e6 <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <USBD_HandleEP0_SETUP+0x8c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <USBD_HandleEP0_SETUP+0x90>)
 80010d8:	88d2      	ldrh	r2, [r2, #6]
 80010da:	b292      	uxth	r2, r2
 80010dc:	4611      	mov	r1, r2
 80010de:	2000      	movs	r0, #0
 80010e0:	4798      	blx	r3
 80010e2:	e000      	b.n	80010e6 <USBD_HandleEP0_SETUP+0x86>
		return;
 80010e4:	bf00      	nop
		}
	}
}
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000bb0 	.word	0x20000bb0
 80010f0:	20000f00 	.word	0x20000f00

080010f4 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b09      	cmp	r3, #9
 8001102:	f200 80fd 	bhi.w	8001300 <USBD_SignalDeviceEventHandler+0x20c>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <USBD_SignalDeviceEventHandler+0x18>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001263 	.word	0x08001263
 8001110:	08001251 	.word	0x08001251
 8001114:	0800123f 	.word	0x0800123f
 8001118:	08001245 	.word	0x08001245
 800111c:	08001135 	.word	0x08001135
 8001120:	08001301 	.word	0x08001301
 8001124:	080012e9 	.word	0x080012e9
 8001128:	080012d9 	.word	0x080012d9
 800112c:	08001301 	.word	0x08001301
 8001130:	08001239 	.word	0x08001239
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8001134:	4b74      	ldr	r3, [pc, #464]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800113c:	2201      	movs	r2, #1
 800113e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8001142:	4a72      	ldr	r2, [pc, #456]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001144:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8001148:	f36f 0382 	bfc	r3, #2, #1
 800114c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e050      	b.n	80011f8 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 8001156:	4a6d      	ldr	r2, [pc, #436]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	212c      	movs	r1, #44	; 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	441a      	add	r2, r3
 8001162:	8913      	ldrh	r3, [r2, #8]
 8001164:	f36f 1304 	bfc	r3, #4, #1
 8001168:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 800116a:	4a68      	ldr	r2, [pc, #416]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	441a      	add	r2, r3
 8001176:	8913      	ldrh	r3, [r2, #8]
 8001178:	f36f 03c3 	bfc	r3, #3, #1
 800117c:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 800117e:	4a63      	ldr	r2, [pc, #396]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	212c      	movs	r1, #44	; 0x2c
 8001184:	fb01 f303 	mul.w	r3, r1, r3
 8001188:	441a      	add	r2, r3
 800118a:	7a13      	ldrb	r3, [r2, #8]
 800118c:	f36f 0382 	bfc	r3, #2, #1
 8001190:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02c      	beq.n	80011f2 <USBD_SignalDeviceEventHandler+0xfe>
 8001198:	4a5c      	ldr	r2, [pc, #368]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	212c      	movs	r1, #44	; 0x2c
 800119e:	fb01 f303 	mul.w	r3, r1, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	7a1b      	ldrb	r3, [r3, #8]
 80011a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4955      	ldr	r1, [pc, #340]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	202c      	movs	r0, #44	; 0x2c
 80011bc:	fb00 f202 	mul.w	r2, r0, r2
 80011c0:	440a      	add	r2, r1
 80011c2:	3204      	adds	r2, #4
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	4610      	mov	r0, r2
 80011c8:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 80011ca:	4a50      	ldr	r2, [pc, #320]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	212c      	movs	r1, #44	; 0x2c
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	441a      	add	r2, r3
 80011d6:	7a13      	ldrb	r3, [r2, #8]
 80011d8:	f36f 0300 	bfc	r3, #0, #1
 80011dc:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	212c      	movs	r1, #44	; 0x2c
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	441a      	add	r2, r3
 80011ea:	7a13      	ldrb	r3, [r2, #8]
 80011ec:	f36f 0341 	bfc	r3, #1, #1
 80011f0:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	ddab      	ble.n	8001156 <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e009      	b.n	8001220 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 800120c:	4a3f      	ldr	r2, [pc, #252]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	ddf2      	ble.n	800120c <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800122e:	7912      	ldrb	r2, [r2, #4]
 8001230:	2118      	movs	r1, #24
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
		break;
 8001236:	e064      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8001238:	f7ff fb2a 	bl	8000890 <EVENT_USB_Device_StartOfFrame>
		break;
 800123c:	e061      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 800123e:	f7ff facf 	bl	80007e0 <EVENT_USB_Device_Connect>
		break;
 8001242:	e05e      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 800124a:	f7ff fad0 	bl	80007ee <EVENT_USB_Device_Disconnect>
		break;
 800124e:	e058      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	2000      	movs	r0, #0
 800125e:	4798      	blx	r3
		 break;
 8001260:	e04f      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8001268:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800126c:	2100      	movs	r1, #0
 800126e:	4827      	ldr	r0, [pc, #156]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001270:	f006 fbe4 	bl	8007a3c <memset>
		 device.Driver = &Driver_USBD0;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001276:	4a26      	ldr	r2, [pc, #152]	; (8001310 <USBD_SignalDeviceEventHandler+0x21c>)
 8001278:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001284:	4a23      	ldr	r2, [pc, #140]	; (8001314 <USBD_SignalDeviceEventHandler+0x220>)
 8001286:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 800128a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001292:	4a21      	ldr	r2, [pc, #132]	; (8001318 <USBD_SignalDeviceEventHandler+0x224>)
 8001294:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012a0:	7913      	ldrb	r3, [r2, #4]
 80012a2:	f36f 13c7 	bfc	r3, #7, #1
 80012a6:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012aa:	7a13      	ldrb	r3, [r2, #8]
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012b4:	7a13      	ldrb	r3, [r2, #8]
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012be:	8913      	ldrh	r3, [r2, #8]
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	f361 138c 	bfi	r3, r1, #6, #7
 80012c6:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	2100      	movs	r1, #0
 80012d2:	2000      	movs	r0, #0
 80012d4:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 80012d6:	e014      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012da:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 80012e0:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 80012e2:	f7ff fadc 	bl	800089e <EVENT_USB_Device_WakeUp>
		break;
 80012e6:	e00c      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <USBD_SignalDeviceEventHandler+0x218>)
 80012f0:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <USBD_SignalDeviceEventHandler+0x214>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 80012fa:	f7ff fad7 	bl	80008ac <EVENT_USB_Device_Suspend>
		break;
 80012fe:	e000      	b.n	8001302 <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8001300:	bf00      	nop
	}
}
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000efd 	.word	0x20000efd
 800130c:	20000bb0 	.word	0x20000bb0
 8001310:	080083b0 	.word	0x080083b0
 8001314:	200009b0 	.word	0x200009b0
 8001318:	20000ab0 	.word	0x20000ab0

0800131c <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	222c      	movs	r2, #44	; 0x2c
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 800133a:	4413      	add	r3, r2
 800133c:	3304      	adds	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001342:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001346:	73bb      	strb	r3, [r7, #14]
	temp_dir = device.CurrentDirection;
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 800134a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800134e:	73fb      	strb	r3, [r7, #15]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 800135a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b52      	ldr	r3, [pc, #328]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001368:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d013      	beq.n	800139a <USBD_SignalEndpointEvent_Handler+0x7e>
 8001372:	2b02      	cmp	r3, #2
 8001374:	d03a      	beq.n	80013ec <USBD_SignalEndpointEvent_Handler+0xd0>
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 808e 	bne.w	8001498 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	8893      	ldrh	r3, [r2, #4]
 8001380:	f36f 03c3 	bfc	r3, #3, #1
 8001384:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001388:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d000      	beq.n	8001392 <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 8001390:	e002      	b.n	8001398 <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 8001392:	f7ff fe65 	bl	8001060 <USBD_HandleEP0_SETUP>
			break;
 8001396:	bf00      	nop
		}
		break;
 8001398:	e07e      	b.n	8001498 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	8893      	ldrh	r3, [r2, #4]
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d110      	bne.n	80013ce <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	7810      	ldrb	r0, [r2, #0]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	6911      	ldr	r1, [r2, #16]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	6952      	ldr	r2, [r2, #20]
 80013c4:	4798      	blx	r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	8893      	ldrh	r3, [r2, #4]
 80013d2:	f36f 03c3 	bfc	r3, #3, #1
 80013d6:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 80013da:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d000      	beq.n	80013e4 <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 80013e2:	e002      	b.n	80013ea <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 80013e4:	f7ff fe12 	bl	800100c <USBD_HandleEP0_OUT>
			break;
 80013e8:	bf00      	nop
		}
		break;
 80013ea:	e055      	b.n	8001498 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d017      	beq.n	8001424 <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	7810      	ldrb	r0, [r2, #0]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001406:	4798      	blx	r3
 8001408:	6178      	str	r0, [r7, #20]
			ep->InDataLeft -= data_count;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	441a      	add	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 8001422:	e041      	b.n	80014a8 <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d120      	bne.n	8001474 <USBD_SignalEndpointEvent_Handler+0x158>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01c      	beq.n	8001474 <USBD_SignalEndpointEvent_Handler+0x158>
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8001440:	88d2      	ldrh	r2, [r2, #6]
 8001442:	b292      	uxth	r2, r2
 8001444:	4293      	cmp	r3, r2
 8001446:	d015      	beq.n	8001474 <USBD_SignalEndpointEvent_Handler+0x158>
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	8892      	ldrh	r2, [r2, #4]
 8001450:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	fbb3 f1f2 	udiv	r1, r3, r2
 800145a:	fb02 f201 	mul.w	r2, r2, r1
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	7810      	ldrb	r0, [r2, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	8893      	ldrh	r3, [r2, #4]
 800147e:	f36f 1304 	bfc	r3, #4, #1
 8001482:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001486:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 800148e:	e002      	b.n	8001496 <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 8001490:	f7ff fd96 	bl	8000fc0 <USBD_HandleEP0_IN>
			break;
 8001494:	bf00      	nop
		}
		break;
 8001496:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <USBD_SignalEndpointEvent_Handler+0x194>)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000bb0 	.word	0x20000bb0
 80014b4:	20000f00 	.word	0x20000f00

080014b8 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 80014c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014c8:	2100      	movs	r1, #0
 80014ca:	4829      	ldr	r0, [pc, #164]	; (8001570 <USBD_Initialize+0xb8>)
 80014cc:	f006 fab6 	bl	8007a3c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <USBD_Initialize+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <USBD_Initialize+0xb8>)
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <USBD_Initialize+0xc0>)
 80014da:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <USBD_Initialize+0xb8>)
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <USBD_Initialize+0xb8>)
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <USBD_Initialize+0xc4>)
 80014e8:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <USBD_Initialize+0xb8>)
 80014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <USBD_Initialize+0xb8>)
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <USBD_Initialize+0xc8>)
 80014f6:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <USBD_Initialize+0xb8>)
 80014fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fe:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <USBD_Initialize+0xb8>)
 8001502:	7913      	ldrb	r3, [r2, #4]
 8001504:	f36f 13c7 	bfc	r3, #7, #1
 8001508:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <USBD_Initialize+0xb8>)
 800150c:	7a13      	ldrb	r3, [r2, #8]
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 8001514:	4a16      	ldr	r2, [pc, #88]	; (8001570 <USBD_Initialize+0xb8>)
 8001516:	7a13      	ldrb	r3, [r2, #8]
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <USBD_Initialize+0xb8>)
 8001520:	8913      	ldrh	r3, [r2, #8]
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	f361 138c 	bfi	r3, r1, #6, #7
 8001528:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <USBD_Initialize+0xb8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <USBD_Initialize+0x8c>
		return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001542:	e011      	b.n	8001568 <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <USBD_Initialize+0xb8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <USBD_Initialize+0xb8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4798      	blx	r3
		return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001564:	e000      	b.n	8001568 <USBD_Initialize+0xb0>
	}

	return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000bb0 	.word	0x20000bb0
 8001574:	20000efd 	.word	0x20000efd
 8001578:	080083b0 	.word	0x080083b0
 800157c:	200009b0 	.word	0x200009b0
 8001580:	20000ab0 	.word	0x20000ab0

08001584 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <USB_IsEnumDone+0x1c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	4798      	blx	r3
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <USB_IsEnumDone+0x16>
		return 1;
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <USB_IsEnumDone+0x18>
	else
		return 0;
 800159a:	2300      	movs	r3, #0
 }
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000bb0 	.word	0x20000bb0

080015a4 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da12      	bge.n	80015ea <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <USBD_SetEndpointBuffer+0x78>)
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3320      	adds	r3, #32
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	88ba      	ldrh	r2, [r7, #4]
 80015da:	4910      	ldr	r1, [pc, #64]	; (800161c <USBD_SetEndpointBuffer+0x78>)
 80015dc:	202c      	movs	r0, #44	; 0x2c
 80015de:	fb00 f303 	mul.w	r3, r0, r3
 80015e2:	440b      	add	r3, r1
 80015e4:	3324      	adds	r3, #36	; 0x24
 80015e6:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 80015e8:	e011      	b.n	800160e <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <USBD_SetEndpointBuffer+0x78>)
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	3314      	adds	r3, #20
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	88ba      	ldrh	r2, [r7, #4]
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <USBD_SetEndpointBuffer+0x78>)
 8001602:	202c      	movs	r0, #44	; 0x2c
 8001604:	fb00 f303 	mul.w	r3, r0, r3
 8001608:	440b      	add	r3, r1
 800160a:	3318      	adds	r3, #24
 800160c:	601a      	str	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000bb0 	.word	0x20000bb0

08001620 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	73bb      	strb	r3, [r7, #14]
 8001630:	e01c      	b.n	800166c <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <XMC_USBD_lDeviceActive+0x64>)
 8001636:	2134      	movs	r1, #52	; 0x34
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10b      	bne.n	8001662 <XMC_USBD_lDeviceActive+0x42>
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <XMC_USBD_lDeviceActive+0x64>)
 800164e:	2134      	movs	r1, #52	; 0x34
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	3301      	adds	r3, #1
 800166a:	73bb      	strb	r3, [r7, #14]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	7bba      	ldrb	r2, [r7, #14]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3dd      	bcc.n	8001632 <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000cf4 	.word	0x20000cf4

08001688 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8001688:	b480      	push	{r7}
 800168a:	b08b      	sub	sp, #44	; 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2234      	movs	r2, #52	; 0x34
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4a34      	ldr	r2, [pc, #208]	; (800176c <XMC_USBD_lReadFifo+0xe4>)
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <XMC_USBD_lReadFifo+0xe4>)
 80016a2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80016a6:	61bb      	str	r3, [r7, #24]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 80016a8:	4a30      	ldr	r2, [pc, #192]	; (800176c <XMC_USBD_lReadFifo+0xe4>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3370      	adds	r3, #112	; 0x70
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
  temp_word_count = (word_count << 2U);
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d047      	beq.n	8001760 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d043      	beq.n	8001760 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	e00a      	b.n	80016f4 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3301      	adds	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3f0      	bcc.n	80016de <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	429a      	cmp	r2, r3
 8001702:	d021      	beq.n	8001748 <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e015      	b.n	800173c <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	0099      	lsls	r1, r3, #2
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	440b      	add	r3, r1
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	21ff      	movs	r1, #255	; 0xff
 8001724:	4091      	lsls	r1, r2
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	4011      	ands	r1, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	00d2      	lsls	r2, r2, #3
 800172e:	fa21 f202 	lsr.w	r2, r1, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	3301      	adds	r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	441a      	add	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d3e3      	bcc.n	8001710 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	441a      	add	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	441a      	add	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001760:	bf00      	nop
 8001762:	372c      	adds	r7, #44	; 0x2c
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000cf4 	.word	0x20000cf4

08001770 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <XMC_USBD_lWriteFifo+0xa0>)
 8001784:	3378      	adds	r3, #120	; 0x78
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61fb      	str	r3, [r7, #28]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <XMC_USBD_lWriteFifo+0xa0>)
 8001798:	336a      	adds	r3, #106	; 0x6a
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	60fb      	str	r3, [r7, #12]
  if (!byte_count)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e023      	b.n	8001802 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3303      	adds	r3, #3
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	613b      	str	r3, [r7, #16]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	461a      	mov	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d204      	bcs.n	80017d6 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 80017cc:	893b      	ldrh	r3, [r7, #8]
 80017ce:	613b      	str	r3, [r7, #16]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	60fb      	str	r3, [r7, #12]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	e00c      	b.n	80017f6 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	601a      	str	r2, [r3, #0]
      i++;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1d1a      	adds	r2, r3, #4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d3ee      	bcc.n	80017dc <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	617b      	str	r3, [r7, #20]
  }
  return result;
 8001802:	697b      	ldr	r3, [r7, #20]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	20000cf4 	.word	0x20000cf4

08001814 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f362 138a 	bfi	r3, r2, #6, #5
 8001838:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <XMC_USBD_lFlushTXFifo+0x78>)
 800183c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e002      	b.n	8001850 <XMC_USBD_lFlushTXFifo+0x3c>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001856:	d3f8      	bcc.n	800184a <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <XMC_USBD_lFlushTXFifo+0x78>)
 800185a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f4      	bne.n	8001858 <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001872:	bf00      	nop
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60fa      	str	r2, [r7, #12]
 800187a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187e:	d3f9      	bcc.n	8001874 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20000cf4 	.word	0x20000cf4

08001890 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <XMC_USBD_lFlushRXFifo+0x64>)
 80018a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	e002      	b.n	80018b8 <XMC_USBD_lFlushRXFifo+0x28>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018be:	d3f8      	bcc.n	80018b2 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <XMC_USBD_lFlushRXFifo+0x64>)
 80018c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ea      	bne.n	80018ac <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 80018da:	bf00      	nop
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018e6:	d3f9      	bcc.n	80018dc <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000cf4 	.word	0x20000cf4

080018f8 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80018fe:	2301      	movs	r3, #1
 8001900:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	713b      	strb	r3, [r7, #4]
  uint8_t result = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800190a:	e005      	b.n	8001918 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	80fb      	strh	r3, [r7, #6]
    i++;
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001918:	793b      	ldrb	r3, [r7, #4]
 800191a:	2b06      	cmp	r3, #6
 800191c:	d807      	bhi.n	800192e <XMC_USBD_lAssignTXFifo+0x36>
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001920:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4013      	ands	r3, r2
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ee      	bne.n	800190c <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001930:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4013      	ands	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001940:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4313      	orrs	r3, r2
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <XMC_USBD_lAssignTXFifo+0x6c>)
 800194c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8001950:	793b      	ldrb	r3, [r7, #4]
 8001952:	717b      	strb	r3, [r7, #5]
  }
  return result;
 8001954:	797b      	ldrb	r3, [r7, #5]
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000cf4 	.word	0x20000cf4

08001968 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <XMC_USBD_lUnassignFifo+0x34>)
 8001974:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	4013      	ands	r3, r2
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <XMC_USBD_lUnassignFifo+0x34>)
 800198c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20000cf4 	.word	0x20000cf4

080019a0 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6892      	ldr	r2, [r2, #8]
 80019ba:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80019be:	4293      	cmp	r3, r2
 80019c0:	d909      	bls.n	80019d6 <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6892      	ldr	r2, [r2, #8]
 80019ca:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80019ce:	441a      	add	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
 80019d4:	e003      	b.n	80019de <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d119      	bne.n	8001a20 <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	7893      	ldrb	r3, [r2, #2]
 80019f6:	2101      	movs	r1, #1
 80019f8:	f361 03c4 	bfi	r3, r1, #3, #2
 80019fc:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	78d3      	ldrb	r3, [r2, #3]
 8001a02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a06:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a12:	b2d9      	uxtb	r1, r3
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	7813      	ldrb	r3, [r2, #0]
 8001a18:	f361 0306 	bfi	r3, r1, #0, #7
 8001a1c:	7013      	strb	r3, [r2, #0]
 8001a1e:	e033      	b.n	8001a88 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f36f 0312 	bfc	r3, #0, #19
 8001a2e:	60fb      	str	r3, [r7, #12]
      data.b.pktcnt = 1U;
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f362 03cc 	bfi	r3, r2, #3, #10
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	e025      	b.n	8001a88 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6852      	ldr	r2, [r2, #4]
 8001a4a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b01      	subs	r3, #1
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6852      	ldr	r2, [r2, #4]
 8001a58:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	f362 03cc 	bfi	r3, r2, #3, #10
 8001a70:	81fb      	strh	r3, [r7, #14]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f362 0312 	bfi	r3, r2, #0, #19
 8001a86:	60fb      	str	r3, [r7, #12]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <XMC_USBD_lStartReadXfer+0x170>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	7b5b      	ldrb	r3, [r3, #13]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <XMC_USBD_lStartReadXfer+0x174>)
 8001a9e:	3370      	adds	r3, #112	; 0x70
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aaa:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <XMC_USBD_lStartReadXfer+0x174>)
 8001ab8:	3370      	adds	r3, #112	; 0x70
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <XMC_USBD_lStartReadXfer+0x174>)
 8001ad0:	3370      	adds	r3, #112	; 0x70
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
  epctl.b.cnak = 1U;
 8001adc:	7cfb      	ldrb	r3, [r7, #19]
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	74fb      	strb	r3, [r7, #19]
  epctl.b.epena = 1U;
 8001ae4:	7cfb      	ldrb	r3, [r7, #19]
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aea:	74fb      	strb	r3, [r7, #19]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <XMC_USBD_lStartReadXfer+0x174>)
 8001af8:	3370      	adds	r3, #112	; 0x70
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000cf0 	.word	0x20000cf0
 8001b14:	20000cf4 	.word	0x20000cf4

08001b18 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001b30:	336a      	adds	r3, #106	; 0x6a
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6892      	ldr	r2, [r2, #8]
 8001b48:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d204      	bcs.n	8001b5a <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
 8001b58:	e008      	b.n	8001b6c <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001b66:	441a      	add	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f36f 0312 	bfc	r3, #0, #19
 8001b7a:	60bb      	str	r3, [r7, #8]
    size.b.pktcnt = 1U;
 8001b7c:	897b      	ldrh	r3, [r7, #10]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f362 03cc 	bfi	r3, r2, #3, #10
 8001b84:	817b      	strh	r3, [r7, #10]
 8001b86:	e06a      	b.n	8001c5e <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d110      	bne.n	8001bb8 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f362 03cc 	bfi	r3, r2, #3, #10
 8001b9e:	817b      	strh	r3, [r7, #10]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f362 0312 	bfi	r3, r2, #0, #19
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	e02b      	b.n	8001c10 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f362 0312 	bfi	r3, r2, #0, #19
 8001bcc:	60bb      	str	r3, [r7, #8]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6852      	ldr	r2, [r2, #4]
 8001bf6:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001bfa:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	897b      	ldrh	r3, [r7, #10]
 8001c0a:	f362 03cc 	bfi	r3, r2, #3, #10
 8001c0e:	817b      	strh	r3, [r7, #10]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <XMC_USBD_lStartWriteXfer+0x194>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	7b5b      	ldrb	r3, [r3, #13]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10b      	bne.n	8001c32 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001c26:	336a      	adds	r3, #106	; 0x6a
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c30:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <XMC_USBD_lStartWriteXfer+0x194>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	7b5b      	ldrb	r3, [r3, #13]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d110      	bne.n	8001c5e <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001c3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001c44:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001c48:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	4610      	mov	r0, r2
 8001c56:	2201      	movs	r2, #1
 8001c58:	4082      	lsls	r2, r0
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001c6a:	336a      	adds	r3, #106	; 0x6a
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	73fb      	strb	r3, [r7, #15]
  ctl.b.cnak = 1U;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001c90:	336a      	adds	r3, #106	; 0x6a
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000cf4 	.word	0x20000cf4
 8001cac:	20000cf0 	.word	0x20000cf0

08001cb0 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001cb8:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001cba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
  dctl.b.rmtwkupsig = 1U;
 8001cc2:	7b3b      	ldrb	r3, [r7, #12]
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	733b      	strb	r3, [r7, #12]
  xmc_device.device_register->dctl = dctl.d32;
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001ccc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	e01a      	b.n	8001d10 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001cda:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3370      	adds	r3, #112	; 0x70
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60bb      	str	r3, [r7, #8]
		epctl.b.snak = 1U;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	72fb      	strb	r3, [r7, #11]
		epctl.b.stall = 0U;
 8001cf2:	7abb      	ldrb	r3, [r7, #10]
 8001cf4:	f36f 1345 	bfc	r3, #5, #1
 8001cf8:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001cfa:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3370      	adds	r3, #112	; 0x70
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d9e1      	bls.n	8001cda <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001d18:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8001d24:	2310      	movs	r3, #16
 8001d26:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8001d28:	2340      	movs	r3, #64	; 0x40
 8001d2a:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001d2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e011      	b.n	8001d60 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001d3e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	3204      	adds	r2, #4
 8001d4a:	0192      	lsls	r2, r2, #6
 8001d4c:	0892      	lsrs	r2, r2, #2
 8001d4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d9ea      	bls.n	8001d3c <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001d66:	2010      	movs	r0, #16
 8001d68:	f7ff fd54 	bl	8001814 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fd51 	bl	8001814 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001d72:	f7ff fd8d 	bl	8001890 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  daint.b.inep0 = 1U;
 8001d7a:	7d3b      	ldrb	r3, [r7, #20]
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	753b      	strb	r3, [r7, #20]
  daint.b.outep0 = 1U;
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->daintmsk = daint.d32;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001d8c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001d94:	200f      	movs	r0, #15
 8001d96:	f000 fbe9 	bl	800256c <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 fbfe 	bl	800259c <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001da2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
  dcfg.b.devaddr = 0U;
 8001daa:	8b3b      	ldrh	r3, [r7, #24]
 8001dac:	f36f 130a 	bfc	r3, #4, #7
 8001db0:	833b      	strh	r3, [r7, #24]
  xmc_device.device_register->dcfg = dcfg.d32;
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001db4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7b5b      	ldrb	r3, [r3, #13]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d104      	bne.n	8001dce <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001dc6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001dd0:	6853      	ldr	r3, [r2, #4]
 8001dd2:	f36f 1304 	bfc	r3, #4, #1
 8001dd6:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001dda:	6853      	ldr	r3, [r2, #4]
 8001ddc:	f36f 03c3 	bfc	r3, #3, #1
 8001de0:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <XMC_USBD_lHandleUSBReset+0x14c>)
 8001de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001de8:	2004      	movs	r0, #4
 8001dea:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001dec:	2004      	movs	r0, #4
 8001dee:	f000 fb11 	bl	8002414 <XMC_USBD_ClearEvent>
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000cf4 	.word	0x20000cf4

08001e00 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <XMC_USBD_lHandleOTGInt+0x44>)
 8001e08:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8001e10:	793b      	ldrb	r3, [r7, #4]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8001e1c:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <XMC_USBD_lHandleOTGInt+0x44>)
 8001e1e:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001e22:	f36f 0382 	bfc	r3, #2, #1
 8001e26:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <XMC_USBD_lHandleOTGInt+0x44>)
 8001e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e30:	2001      	movs	r0, #1
 8001e32:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fb52 	bl	80024e0 <XMC_USBD_lClearEventOTG>

}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000cf4 	.word	0x20000cf4

08001e48 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e50:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	603b      	str	r3, [r7, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001e58:	883b      	ldrh	r3, [r7, #0]
 8001e5a:	f36f 030a 	bfc	r3, #0, #11
 8001e5e:	803b      	strh	r3, [r7, #0]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e62:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e6c:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e7a:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001e92:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	607b      	str	r3, [r7, #4]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	2209      	movs	r2, #9
 8001e9e:	f362 0385 	bfi	r3, r2, #2, #4
 8001ea2:	717b      	strb	r3, [r7, #5]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <XMC_USBD_lHandleEnumDone+0x74>)
 8001ea6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001eae:	200b      	movs	r0, #11
 8001eb0:	f000 fab0 	bl	8002414 <XMC_USBD_ClearEvent>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000cf4 	.word	0x20000cf4

08001ec0 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8001ec8:	4b66      	ldr	r3, [pc, #408]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001eca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	617b      	str	r3, [r7, #20]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001ed2:	4b64      	ldr	r3, [pc, #400]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001ed4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001ede:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	61fb      	str	r3, [r7, #28]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8001ee6:	8afa      	ldrh	r2, [r7, #22]
 8001ee8:	8b7b      	ldrh	r3, [r7, #26]
 8001eea:	4013      	ands	r3, r2
 8001eec:	81fb      	strh	r3, [r7, #14]
  ep_num = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	737b      	strb	r3, [r7, #13]
  doeptsiz.d32 = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 
  while ((uint16_t)mask >> ep_num)
 8001ef6:	e0a7      	b.n	8002048 <XMC_USBD_lHandleOEPInt+0x188>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8001ef8:	89fa      	ldrh	r2, [r7, #14]
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	fa42 f303 	asr.w	r3, r2, r3
 8001f00:	823b      	strh	r3, [r7, #16]
    temp = temp1 & 0x1U;
 8001f02:	8a3b      	ldrh	r3, [r7, #16]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	827b      	strh	r3, [r7, #18]
    if (temp)
 8001f0a:	8a7b      	ldrh	r3, [r7, #18]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8098 	beq.w	8002042 <XMC_USBD_lHandleOEPInt+0x182>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8001f12:	7b7b      	ldrb	r3, [r7, #13]
 8001f14:	2234      	movs	r2, #52	; 0x34
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a52      	ldr	r2, [pc, #328]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001f1c:	4413      	add	r3, r2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001f20:	7b7b      	ldrb	r3, [r7, #13]
 8001f22:	4a50      	ldr	r2, [pc, #320]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001f24:	3370      	adds	r3, #112	; 0x70
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4013      	ands	r3, r2
 8001f32:	623b      	str	r3, [r7, #32]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7b5b      	ldrb	r3, [r3, #13]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <XMC_USBD_lHandleOEPInt+0x8c>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	4a49      	ldr	r2, [pc, #292]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001f40:	3370      	adds	r3, #112	; 0x70
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8001f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d032      	beq.n	8001fc0 <XMC_USBD_lHandleOEPInt+0x100>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5c:	7913      	ldrb	r3, [r2, #4]
 8001f5e:	f36f 1345 	bfc	r3, #5, #1
 8001f62:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b5b      	ldrb	r3, [r3, #13]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10e      	bne.n	8001f8a <XMC_USBD_lHandleOEPInt+0xca>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	075b      	lsls	r3, r3, #29
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	f103 0218 	add.w	r2, r3, #24
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7b5b      	ldrb	r3, [r3, #13]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <XMC_USBD_lHandleOEPInt+0xe0>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	441a      	add	r2, r3
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8001fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa2:	6853      	ldr	r3, [r2, #4]
 8001fa4:	f36f 1304 	bfc	r3, #4, #1
 8001fa8:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8001fac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 8001fb6:	7b7b      	ldrb	r3, [r7, #13]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2008      	movs	r0, #8
 8001fbc:	f000 fabe 	bl	800253c <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8001fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d033      	beq.n	8002036 <XMC_USBD_lHandleOEPInt+0x176>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7b5b      	ldrb	r3, [r3, #13]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <XMC_USBD_lHandleOEPInt+0x142>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xferCount += bytes;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	441a      	add	r2, r3
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	441a      	add	r2, r3
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	429a      	cmp	r2, r3
 800200c:	d110      	bne.n	8002030 <XMC_USBD_lHandleOEPInt+0x170>
        {
          ep->outBytesAvailable = ep->xferCount;
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8002016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002018:	6853      	ldr	r3, [r2, #4]
 800201a:	f36f 1304 	bfc	r3, #4, #1
 800201e:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <XMC_USBD_lHandleOEPInt+0x1a4>)
 8002022:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002026:	7b7a      	ldrb	r2, [r7, #13]
 8002028:	2101      	movs	r1, #1
 800202a:	4610      	mov	r0, r2
 800202c:	4798      	blx	r3
 800202e:	e002      	b.n	8002036 <XMC_USBD_lHandleOEPInt+0x176>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8002030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002032:	f7ff fcb5 	bl	80019a0 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	7b7a      	ldrb	r2, [r7, #13]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fa7d 	bl	800253c <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8002042:	7b7b      	ldrb	r3, [r7, #13]
 8002044:	3301      	adds	r3, #1
 8002046:	737b      	strb	r3, [r7, #13]
  while ((uint16_t)mask >> ep_num)
 8002048:	89fa      	ldrh	r2, [r7, #14]
 800204a:	7b7b      	ldrb	r3, [r7, #13]
 800204c:	fa42 f303 	asr.w	r3, r2, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f af51 	bne.w	8001ef8 <XMC_USBD_lHandleOEPInt+0x38>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8002056:	200d      	movs	r0, #13
 8002058:	f000 f9dc 	bl	8002414 <XMC_USBD_ClearEvent>
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000cf4 	.word	0x20000cf4

08002068 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 8002072:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800207a:	4b64      	ldr	r3, [pc, #400]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 800207c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	617b      	str	r3, [r7, #20]
  
  dieptsiz.d32 = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  mask = daint.ep.in;
 8002088:	8a3b      	ldrh	r3, [r7, #16]
 800208a:	817b      	strh	r3, [r7, #10]
  ep_num = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	727b      	strb	r3, [r7, #9]
  
  while ((uint16_t)mask >> ep_num)
 8002090:	e0ad      	b.n	80021ee <XMC_USBD_lHandleIEPInt+0x186>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8002092:	897a      	ldrh	r2, [r7, #10]
 8002094:	7a7b      	ldrb	r3, [r7, #9]
 8002096:	fa42 f303 	asr.w	r3, r2, r3
 800209a:	81bb      	strh	r3, [r7, #12]
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 800209c:	89bb      	ldrh	r3, [r7, #12]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	81fb      	strh	r3, [r7, #14]
    if ((uint16_t)temp)
 80020a4:	89fb      	ldrh	r3, [r7, #14]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 809e 	beq.w	80021e8 <XMC_USBD_lHandleIEPInt+0x180>
    {
      ep = &xmc_device.ep[ep_num];
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	2234      	movs	r2, #52	; 0x34
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80020b6:	4413      	add	r3, r2
 80020b8:	623b      	str	r3, [r7, #32]
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80020ba:	7a7b      	ldrb	r3, [r7, #9]
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80020be:	336a      	adds	r3, #106	; 0x6a
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80020ca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80020dc:	01db      	lsls	r3, r3, #7
 80020de:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7b5b      	ldrb	r3, [r3, #13]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <XMC_USBD_lHandleIEPInt+0x9a>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80020f4:	7a7b      	ldrb	r3, [r7, #9]
 80020f6:	4a45      	ldr	r2, [pc, #276]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80020f8:	336a      	adds	r3, #106	; 0x6a
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	61fb      	str	r3, [r7, #28]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7b5b      	ldrb	r3, [r3, #13]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d115      	bne.n	8002136 <XMC_USBD_lHandleIEPInt+0xce>
      {
        if (diepint.b.emptyintr)
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00f      	beq.n	8002136 <XMC_USBD_lHandleIEPInt+0xce>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8002116:	6a38      	ldr	r0, [r7, #32]
 8002118:	f7ff fb2a 	bl	8001770 <XMC_USBD_lWriteFifo>
 800211c:	62b8      	str	r0, [r7, #40]	; 0x28
          ep->xferCount += bytes;
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	441a      	add	r2, r3
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	441a      	add	r2, r3
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8002136:	7e3b      	ldrb	r3, [r7, #24]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d04c      	beq.n	80021dc <XMC_USBD_lHandleIEPInt+0x174>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7b5b      	ldrb	r3, [r3, #13]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11d      	bne.n	8002186 <XMC_USBD_lHandleIEPInt+0x11e>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800214a:	8bfa      	ldrh	r2, [r7, #30]
 800214c:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8002150:	4013      	ands	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <XMC_USBD_lHandleIEPInt+0x11e>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d111      	bne.n	8002186 <XMC_USBD_lHandleIEPInt+0x11e>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
            ep->xferCount += Bytes;
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	441a      	add	r2, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	441a      	add	r2, r3
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	429a      	cmp	r2, r3
 8002190:	d121      	bne.n	80021d6 <XMC_USBD_lHandleIEPInt+0x16e>
        {
          ep->inInUse = 0U;
 8002192:	6a3a      	ldr	r2, [r7, #32]
 8002194:	6853      	ldr	r3, [r2, #4]
 8002196:	f36f 03c3 	bfc	r3, #3, #1
 800219a:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7b5b      	ldrb	r3, [r3, #13]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10d      	bne.n	80021c0 <XMC_USBD_lHandleIEPInt+0x158>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80021a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 80021aa:	4a18      	ldr	r2, [pc, #96]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80021ac:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 80021b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80021b2:	7a7a      	ldrb	r2, [r7, #9]
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	43d2      	mvns	r2, r2
 80021bc:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <XMC_USBD_lHandleIEPInt+0x1a4>)
 80021c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021c6:	7a7a      	ldrb	r2, [r7, #9]
 80021c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	2102      	movs	r1, #2
 80021d0:	4610      	mov	r0, r2
 80021d2:	4798      	blx	r3
 80021d4:	e002      	b.n	80021dc <XMC_USBD_lHandleIEPInt+0x174>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 80021d6:	6a38      	ldr	r0, [r7, #32]
 80021d8:	f7ff fc9e 	bl	8001b18 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	7a7a      	ldrb	r2, [r7, #9]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f992 	bl	800250c <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 80021e8:	7a7b      	ldrb	r3, [r7, #9]
 80021ea:	3301      	adds	r3, #1
 80021ec:	727b      	strb	r3, [r7, #9]
  while ((uint16_t)mask >> ep_num)
 80021ee:	897a      	ldrh	r2, [r7, #10]
 80021f0:	7a7b      	ldrb	r3, [r7, #9]
 80021f2:	fa42 f303 	asr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f af4b 	bne.w	8002092 <XMC_USBD_lHandleIEPInt+0x2a>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80021fc:	200e      	movs	r0, #14
 80021fe:	f000 f909 	bl	8002414 <XMC_USBD_ClearEvent>
}
 8002202:	bf00      	nop
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000cf4 	.word	0x20000cf4

08002210 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <XMC_USBD_lHandleRxFLvl+0x80>)
 8002218:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	2b05      	cmp	r3, #5
 800222c:	d82a      	bhi.n	8002284 <XMC_USBD_lHandleRxFLvl+0x74>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <XMC_USBD_lHandleRxFLvl+0x24>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002285 	.word	0x08002285
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002285 	.word	0x08002285
 8002240:	08002285 	.word	0x08002285
 8002244:	08002285 	.word	0x08002285
 8002248:	08002269 	.word	0x08002269
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800224c:	793b      	ldrb	r3, [r7, #4]
 800224e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	88bb      	ldrh	r3, [r7, #4]
 8002258:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800225c:	b29b      	uxth	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7ff fa11 	bl	8001688 <XMC_USBD_lReadFifo>
      break;
 8002266:	e00e      	b.n	8002286 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002278:	b29b      	uxth	r3, r3
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff fa03 	bl	8001688 <XMC_USBD_lReadFifo>
      break;
 8002282:	e000      	b.n	8002286 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8002284:	bf00      	nop
	}
  /* no need to clear */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000cf4 	.word	0x20000cf4

08002294 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 800229e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	60bb      	str	r3, [r7, #8]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 80022a6:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 80022a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
	
  if (data.b.sofintr)
 80022b4:	7b3b      	ldrb	r3, [r7, #12]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 80022c0:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 80022c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c6:	2009      	movs	r0, #9
 80022c8:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 80022ca:	2009      	movs	r0, #9
 80022cc:	f000 f8a2 	bl	8002414 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b5b      	ldrb	r3, [r3, #13]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d119      	bne.n	800230c <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 80022e4:	7a3b      	ldrb	r3, [r7, #8]
 80022e6:	f36f 1304 	bfc	r3, #4, #1
 80022ea:	723b      	strb	r3, [r7, #8]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 80022ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 80022f6:	f7ff ff8b 	bl	8002210 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 80022fa:	7a3b      	ldrb	r3, [r7, #8]
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	723b      	strb	r3, [r7, #8]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 8002304:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8002318:	200a      	movs	r0, #10
 800231a:	f000 f87b 	bl	8002414 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 800231e:	7b7b      	ldrb	r3, [r7, #13]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 800232c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002330:	2006      	movs	r0, #6
 8002332:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8002334:	2006      	movs	r0, #6
 8002336:	f000 f86d 	bl	8002414 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 8002348:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800234c:	2008      	movs	r0, #8
 800234e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002350:	2008      	movs	r0, #8
 8002352:	f000 f85f 	bl	8002414 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 8002364:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <XMC_USBD_IRQHandler+0x14c>)
 8002372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002376:	2000      	movs	r0, #0
 8002378:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f84a 	bl	8002414 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8002380:	7b7b      	ldrb	r3, [r7, #13]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fc8f 	bl	8001cb0 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8002392:	7b7b      	ldrb	r3, [r7, #13]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 800239e:	f7ff fd53 	bl	8001e48 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe5a 	bl	8002068 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fd7d 	bl	8001ec0 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 80023c6:	7b3b      	ldrb	r3, [r7, #12]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 80023d2:	f7ff fd15 	bl	8001e00 <XMC_USBD_lHandleOTGInt>
  }

}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000cf4 	.word	0x20000cf4

080023e4 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <XMC_USBD_Enable+0x14>)
 80023ea:	f002 fa59 	bl	80048a0 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80023ee:	f002 fe3d 	bl	800506c <XMC_SCU_POWER_EnableUsb>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000080 	.word	0x20000080

080023fc <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <XMC_USBD_Disable+0x14>)
 8002402:	f002 fa2f 	bl	8004864 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8002406:	f002 fe3f 	bl	8005088 <XMC_SCU_POWER_DisableUsb>
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000080 	.word	0x20000080

08002414 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  switch(event)
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b0d      	cmp	r3, #13
 8002426:	d84c      	bhi.n	80024c2 <XMC_USBD_ClearEvent+0xae>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <XMC_USBD_ClearEvent+0x1c>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002469 	.word	0x08002469
 8002434:	080024c3 	.word	0x080024c3
 8002438:	080024c3 	.word	0x080024c3
 800243c:	080024c3 	.word	0x080024c3
 8002440:	08002473 	.word	0x08002473
 8002444:	080024c3 	.word	0x080024c3
 8002448:	0800247d 	.word	0x0800247d
 800244c:	08002487 	.word	0x08002487
 8002450:	08002491 	.word	0x08002491
 8002454:	0800249b 	.word	0x0800249b
 8002458:	080024a5 	.word	0x080024a5
 800245c:	080024af 	.word	0x080024af
 8002460:	080024c3 	.word	0x080024c3
 8002464:	080024b9 	.word	0x080024b9
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246e:	73fb      	strb	r3, [r7, #15]
	  break;
 8002470:	e028      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8002472:	7b7b      	ldrb	r3, [r7, #13]
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	737b      	strb	r3, [r7, #13]
	  break;
 800247a:	e023      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 800247c:	7b7b      	ldrb	r3, [r7, #13]
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	737b      	strb	r3, [r7, #13]
	  break;
 8002484:	e01e      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	73fb      	strb	r3, [r7, #15]
	  break;
 800248e:	e019      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	73fb      	strb	r3, [r7, #15]
	  break;
 8002498:	e014      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 800249a:	7b3b      	ldrb	r3, [r7, #12]
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	733b      	strb	r3, [r7, #12]
	  break;
 80024a2:	e00f      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 80024a4:	7b7b      	ldrb	r3, [r7, #13]
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	737b      	strb	r3, [r7, #13]
	  break;
 80024ac:	e00a      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	f043 0320 	orr.w	r3, r3, #32
 80024b4:	737b      	strb	r3, [r7, #13]
	  break;
 80024b6:	e005      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	73bb      	strb	r3, [r7, #14]
	  break;
 80024c0:	e000      	b.n	80024c4 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 80024c2:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <XMC_USBD_ClearEvent+0xc8>)
 80024c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	615a      	str	r2, [r3, #20]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000cf4 	.word	0x20000cf4

080024e0 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <XMC_USBD_lClearEventOTG+0x28>)
 80024f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	605a      	str	r2, [r3, #4]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000cf4 	.word	0x20000cf4

0800250c <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	4a06      	ldr	r2, [pc, #24]	; (8002538 <XMC_USBD_ClearEventINEP+0x2c>)
 8002520:	336a      	adds	r3, #106	; 0x6a
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000cf4 	.word	0x20000cf4

0800253c <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	4a06      	ldr	r2, [pc, #24]	; (8002568 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8002550:	3370      	adds	r3, #112	; 0x70
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	20000cf4 	.word	0x20000cf4

0800256c <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <XMC_USBD_EnableEventOUTEP+0x2c>)
 800257a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800257e:	4a06      	ldr	r2, [pc, #24]	; (8002598 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002580:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002584:	6951      	ldr	r1, [r2, #20]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	430a      	orrs	r2, r1
 800258a:	615a      	str	r2, [r3, #20]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000cf4 	.word	0x20000cf4

0800259c <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <XMC_USBD_EnableEventINEP+0x2c>)
 80025aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80025ae:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <XMC_USBD_EnableEventINEP+0x2c>)
 80025b0:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 80025b4:	6911      	ldr	r1, [r2, #16]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000cf4 	.word	0x20000cf4

080025cc <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 80025d6:	793b      	ldrb	r3, [r7, #4]
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 80025de:	793b      	ldrb	r3, [r7, #4]
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 80025e6:	793b      	ldrb	r3, [r7, #4]
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 80025ee:	793b      	ldrb	r3, [r7, #4]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 80025f6:	793b      	ldrb	r3, [r7, #4]
 80025f8:	f36f 1345 	bfc	r3, #5, #1
 80025fc:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80025fe:	797b      	ldrb	r3, [r7, #5]
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8002606:	793b      	ldrb	r3, [r7, #4]
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 800260e:	793b      	ldrb	r3, [r7, #4]
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8002616:	793b      	ldrb	r3, [r7, #4]
 8002618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261c:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f36f 235f 	bfc	r3, #9, #23
 8002624:	607b      	str	r3, [r7, #4]
  return cap;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 800263c:	f7ff fed2 	bl	80023e4 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8002640:	4a87      	ldr	r2, [pc, #540]	; (8002860 <XMC_USBD_Init+0x22c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	e00c      	b.n	8002666 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800264c:	4a85      	ldr	r2, [pc, #532]	; (8002864 <XMC_USBD_Init+0x230>)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2140      	movs	r1, #64	; 0x40
 8002652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8002656:	4a84      	ldr	r2, [pc, #528]	; (8002868 <XMC_USBD_Init+0x234>)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	3301      	adds	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b06      	cmp	r3, #6
 800266a:	d9ef      	bls.n	800264c <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800266c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002670:	2100      	movs	r1, #0
 8002672:	487e      	ldr	r0, [pc, #504]	; (800286c <XMC_USBD_Init+0x238>)
 8002674:	f005 f9e2 	bl	8007a3c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a7b      	ldr	r2, [pc, #492]	; (800286c <XMC_USBD_Init+0x238>)
 800267e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4a79      	ldr	r2, [pc, #484]	; (800286c <XMC_USBD_Init+0x238>)
 8002688:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <XMC_USBD_Init+0x238>)
 8002698:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a2:	4a72      	ldr	r2, [pc, #456]	; (800286c <XMC_USBD_Init+0x238>)
 80026a4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	e00c      	b.n	80026c8 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	3348      	adds	r3, #72	; 0x48
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	441a      	add	r2, r3
 80026b8:	496c      	ldr	r1, [pc, #432]	; (800286c <XMC_USBD_Init+0x238>)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	336a      	adds	r3, #106	; 0x6a
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	3301      	adds	r3, #1
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d9ef      	bls.n	80026ae <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	e00d      	b.n	80026f0 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	3358      	adds	r3, #88	; 0x58
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80026de:	4963      	ldr	r1, [pc, #396]	; (800286c <XMC_USBD_Init+0x238>)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	3370      	adds	r3, #112	; 0x70
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	3301      	adds	r3, #1
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d9ee      	bls.n	80026d4 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	e00c      	b.n	8002716 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	3301      	adds	r3, #1
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8002706:	4959      	ldr	r1, [pc, #356]	; (800286c <XMC_USBD_Init+0x238>)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	3378      	adds	r3, #120	; 0x78
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	3301      	adds	r3, #1
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d9ef      	bls.n	80026fc <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <XMC_USBD_Init+0x238>)
 800271e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	60fb      	str	r3, [r7, #12]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	733b      	strb	r3, [r7, #12]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800272e:	7b3b      	ldrb	r3, [r7, #12]
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7b5b      	ldrb	r3, [r3, #13]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800273e:	7b3b      	ldrb	r3, [r7, #12]
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	733b      	strb	r3, [r7, #12]
 8002746:	e003      	b.n	8002750 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002748:	7b3b      	ldrb	r3, [r7, #12]
 800274a:	f36f 1345 	bfc	r3, #5, #1
 800274e:	733b      	strb	r3, [r7, #12]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002750:	4b46      	ldr	r3, [pc, #280]	; (800286c <XMC_USBD_Init+0x238>)
 8002752:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <XMC_USBD_Init+0x238>)
 800275c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	613b      	str	r3, [r7, #16]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276a:	74fb      	strb	r3, [r7, #19]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 800276c:	7c7b      	ldrb	r3, [r7, #17]
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	747b      	strb	r3, [r7, #17]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <XMC_USBD_Init+0x238>)
 8002776:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <XMC_USBD_Init+0x238>)
 8002780:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002788:	7d3b      	ldrb	r3, [r7, #20]
 800278a:	f043 0303 	orr.w	r3, r3, #3
 800278e:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002790:	7dbb      	ldrb	r3, [r7, #22]
 8002792:	f36f 13c7 	bfc	r3, #7, #1
 8002796:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <XMC_USBD_Init+0x238>)
 800279a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <XMC_USBD_Init+0x238>)
 80027a4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 80027ac:	7e3b      	ldrb	r3, [r7, #24]
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	763b      	strb	r3, [r7, #24]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <XMC_USBD_Init+0x238>)
 80027b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 80027be:	2010      	movs	r0, #16
 80027c0:	f7ff f828 	bl	8001814 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80027c4:	f7ff f864 	bl	8001890 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <XMC_USBD_Init+0x238>)
 80027ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <XMC_USBD_Init+0x238>)
 80027d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027dc:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80027e2:	7f3b      	ldrb	r3, [r7, #28]
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	773b      	strb	r3, [r7, #28]
  gintmsk.b.otgintr = 1U;
 80027ea:	7f3b      	ldrb	r3, [r7, #28]
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	773b      	strb	r3, [r7, #28]
  gintmsk.b.sessreqintr = 1U;
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f8:	77fb      	strb	r3, [r7, #31]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80027fa:	7f7b      	ldrb	r3, [r7, #29]
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	777b      	strb	r3, [r7, #29]
  gintmsk.b.enumdone = 1U;
 8002802:	7f7b      	ldrb	r3, [r7, #29]
 8002804:	f043 0320 	orr.w	r3, r3, #32
 8002808:	777b      	strb	r3, [r7, #29]
  gintmsk.b.erlysuspend = 1U;
 800280a:	7f7b      	ldrb	r3, [r7, #29]
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	777b      	strb	r3, [r7, #29]
  gintmsk.b.usbsuspend = 1U;
 8002812:	7f7b      	ldrb	r3, [r7, #29]
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	777b      	strb	r3, [r7, #29]
  gintmsk.b.wkupintr = 1U;
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	77fb      	strb	r3, [r7, #31]
  gintmsk.b.sofintr = 1U;
 8002822:	7f3b      	ldrb	r3, [r7, #28]
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b5b      	ldrb	r3, [r3, #13]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d103      	bne.n	800283a <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8002832:	7f3b      	ldrb	r3, [r7, #28]
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	773b      	strb	r3, [r7, #28]
  }
  gintmsk.b.outepintr = 1U;
 800283a:	7fbb      	ldrb	r3, [r7, #30]
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	77bb      	strb	r3, [r7, #30]
  gintmsk.b.inepintr = 1U;
 8002842:	7fbb      	ldrb	r3, [r7, #30]
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	77bb      	strb	r3, [r7, #30]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <XMC_USBD_Init+0x238>)
 800284c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000cf0 	.word	0x20000cf0
 8002864:	20000878 	.word	0x20000878
 8002868:	20000894 	.word	0x20000894
 800286c:	20000cf4 	.word	0x20000cf4

08002870 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <XMC_USBD_Uninitialize+0x38>)
 8002878:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002880:	793b      	ldrb	r3, [r7, #4]
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <XMC_USBD_Uninitialize+0x38>)
 800288a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002892:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002896:	2100      	movs	r1, #0
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <XMC_USBD_Uninitialize+0x38>)
 800289a:	f005 f8cf 	bl	8007a3c <memset>
  return XMC_USBD_STATUS_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000cf4 	.word	0x20000cf4

080028ac <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <XMC_USBD_DeviceConnect+0x30>)
 80028b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 80028bc:	793b      	ldrb	r3, [r7, #4]
 80028be:	f36f 0341 	bfc	r3, #1, #1
 80028c2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <XMC_USBD_DeviceConnect+0x30>)
 80028c6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	20000cf4 	.word	0x20000cf4

080028e0 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <XMC_USBD_DeviceDisconnect+0x30>)
 80028e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80028f0:	793b      	ldrb	r3, [r7, #4]
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <XMC_USBD_DeviceDisconnect+0x30>)
 80028fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	20000cf4 	.word	0x20000cf4

08002914 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8002920:	7b3b      	ldrb	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f362 03c4 	bfi	r3, r2, #3, #2
 8002928:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <XMC_USBD_DeviceGetState+0x60>)
 800292c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	7b3b      	ldrb	r3, [r7, #12]
 8002938:	f362 0341 	bfi	r3, r2, #1, #1
 800293c:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fe6e 	bl	8001620 <XMC_USBD_lDeviceActive>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	7b3b      	ldrb	r3, [r7, #12]
 800294e:	f362 0382 	bfi	r3, r2, #2, #1
 8002952:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <XMC_USBD_DeviceGetState+0x60>)
 8002956:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800295a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	7b3b      	ldrb	r3, [r7, #12]
 8002962:	f362 0300 	bfi	r3, r2, #0, #1
 8002966:	733b      	strb	r3, [r7, #12]
  return state;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000cf4 	.word	0x20000cf4

08002978 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	2234      	movs	r2, #52	; 0x34
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <XMC_USBD_EndpointReadStart+0x84>)
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <XMC_USBD_EndpointReadStart+0x3a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	72fb      	strb	r3, [r7, #11]
 80029b6:	e01c      	b.n	80029f2 <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d202      	bcs.n	80029c8 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7fe ffd9 	bl	80019a0 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	72fb      	strb	r3, [r7, #11]
  }
  return result;
 80029f2:	7afb      	ldrb	r3, [r7, #11]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000cf4 	.word	0x20000cf4

08002a00 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2234      	movs	r2, #52	; 0x34
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <XMC_USBD_EndpointRead+0x74>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d202      	bcs.n	8002a2c <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	68b8      	ldr	r0, [r7, #8]
 8002a3c:	f004 ff00 	bl	8007840 <memcpy>
  ep->outBytesAvailable -= length;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	e002      	b.n	8002a68 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8002a68:	687b      	ldr	r3, [r7, #4]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000cf4 	.word	0x20000cf4

08002a78 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	2234      	movs	r2, #52	; 0x34
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <XMC_USBD_EndpointWrite+0xa0>)
 8002a94:	4413      	add	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
  int32_t result;
  if (!ep->isConfigured)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e030      	b.n	8002b0e <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	e026      	b.n	8002b0e <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d202      	bcs.n	8002ad0 <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 feb1 	bl	8007840 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6853      	ldr	r3, [r2, #4]
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff f808 	bl	8001b18 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	613b      	str	r3, [r7, #16]
  }
  return result;
 8002b0e:	693b      	ldr	r3, [r7, #16]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000cf4 	.word	0x20000cf4

08002b1c <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <XMC_USBD_DeviceSetAddress+0x48>)
 8002b2e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	89bb      	ldrh	r3, [r7, #12]
 8002b46:	f362 130a 	bfi	r3, r2, #4, #7
 8002b4a:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <XMC_USBD_DeviceSetAddress+0x48>)
 8002b4e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	20000cf4 	.word	0x20000cf4

08002b68 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460a      	mov	r2, r1
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2234      	movs	r2, #52	; 0x34
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002b86:	4413      	add	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  if (stall)
 8002b8a:	79bb      	ldrb	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d040      	beq.n	8002c12 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da1a      	bge.n	8002bce <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002ba4:	336a      	adds	r3, #106	; 0x6a
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002bae:	7abb      	ldrb	r3, [r7, #10]
 8002bb0:	f043 0320 	orr.w	r3, r3, #32
 8002bb4:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002bc2:	336a      	adds	r3, #106	; 0x6a
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e01b      	b.n	8002c06 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002bda:	3370      	adds	r3, #112	; 0x70
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002be6:	7abb      	ldrb	r3, [r7, #10]
 8002be8:	f043 0320 	orr.w	r3, r3, #32
 8002bec:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002bfa:	3370      	adds	r3, #112	; 0x70
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	7913      	ldrb	r3, [r2, #4]
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	7113      	strb	r3, [r2, #4]
 8002c10:	e047      	b.n	8002ca2 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da1e      	bge.n	8002c58 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002c26:	336a      	adds	r3, #106	; 0x6a
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002c30:	7abb      	ldrb	r3, [r7, #10]
 8002c32:	f36f 1345 	bfc	r3, #5, #1
 8002c36:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002c38:	7afb      	ldrb	r3, [r7, #11]
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002c4c:	336a      	adds	r3, #106	; 0x6a
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e01f      	b.n	8002c98 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002c64:	3370      	adds	r3, #112	; 0x70
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002c70:	7abb      	ldrb	r3, [r7, #10]
 8002c72:	f36f 1345 	bfc	r3, #5, #1
 8002c76:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	f043 0310 	orr.w	r3, r3, #16
 8002c7e:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <XMC_USBD_EndpointStall+0x148>)
 8002c8c:	3370      	adds	r3, #112	; 0x70
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	7913      	ldrb	r3, [r2, #4]
 8002c9c:	f36f 1345 	bfc	r3, #5, #1
 8002ca0:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20000cf4 	.word	0x20000cf4

08002cb4 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	2234      	movs	r2, #52	; 0x34
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <XMC_USBD_EndpointAbort+0x84>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	6853      	ldr	r3, [r2, #4]
 8002ce2:	f36f 03c3 	bfc	r3, #3, #1
 8002ce6:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	6853      	ldr	r3, [r2, #4]
 8002cfa:	f36f 1304 	bfc	r3, #4, #1
 8002cfe:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	7913      	ldrb	r3, [r2, #4]
 8002d04:	f36f 1345 	bfc	r3, #5, #1
 8002d08:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000cf4 	.word	0x20000cf4

08002d3c <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
 8002d46:	460b      	mov	r3, r1
 8002d48:	71bb      	strb	r3, [r7, #6]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002d4e:	4b97      	ldr	r3, [pc, #604]	; (8002fac <XMC_USBD_EndpointConfigure+0x270>)
 8002d50:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	60fb      	str	r3, [r7, #12]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	2234      	movs	r2, #52	; 0x34
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	4a91      	ldr	r2, [pc, #580]	; (8002fac <XMC_USBD_EndpointConfigure+0x270>)
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8002d6a:	2234      	movs	r2, #52	; 0x34
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f004 fe64 	bl	8007a3c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	7913      	ldrb	r3, [r2, #4]
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8002d84:	88bb      	ldrh	r3, [r7, #4]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	b2d9      	uxtb	r1, r3
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	6853      	ldr	r3, [r2, #4]
 8002d92:	f361 23d1 	bfi	r3, r1, #11, #7
 8002d96:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	6893      	ldr	r3, [r2, #8]
 8002da4:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8002da8:	f361 0312 	bfi	r3, r1, #0, #19
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	e005      	b.n	8002dbc <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	6893      	ldr	r3, [r2, #8]
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	f361 0312 	bfi	r3, r1, #0, #19
 8002dba:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4a79      	ldr	r2, [pc, #484]	; (8002fb0 <XMC_USBD_EndpointConfigure+0x274>)
 8002dca:	441a      	add	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	4a75      	ldr	r2, [pc, #468]	; (8002fb4 <XMC_USBD_EndpointConfigure+0x278>)
 8002dde:	441a      	add	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <XMC_USBD_EndpointConfigure+0x27c>)
 8002df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <XMC_USBD_EndpointConfigure+0x280>)
 8002e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <XMC_USBD_EndpointConfigure+0xe8>
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d179      	bne.n	8002f18 <XMC_USBD_EndpointConfigure+0x1dc>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	4a5f      	ldr	r2, [pc, #380]	; (8002fac <XMC_USBD_EndpointConfigure+0x270>)
 8002e30:	336a      	adds	r3, #106	; 0x6a
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	613b      	str	r3, [r7, #16]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002e3a:	7c7b      	ldrb	r3, [r7, #17]
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	747b      	strb	r3, [r7, #17]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	7cbb      	ldrb	r3, [r7, #18]
 8002e4c:	f362 0383 	bfi	r3, r2, #2, #2
 8002e50:	74bb      	strb	r3, [r7, #18]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d123      	bne.n	8002ea0 <XMC_USBD_EndpointConfigure+0x164>
    {
			switch(ep_max_packet_size)
 8002e58:	88bb      	ldrh	r3, [r7, #4]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d014      	beq.n	8002e88 <XMC_USBD_EndpointConfigure+0x14c>
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	dc02      	bgt.n	8002e68 <XMC_USBD_EndpointConfigure+0x12c>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d016      	beq.n	8002e94 <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002e66:	e023      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
			switch(ep_max_packet_size)
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d007      	beq.n	8002e7c <XMC_USBD_EndpointConfigure+0x140>
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d000      	beq.n	8002e72 <XMC_USBD_EndpointConfigure+0x136>
				break;
 8002e70:	e01e      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x0U;
 8002e72:	8a3b      	ldrh	r3, [r7, #16]
 8002e74:	f36f 030a 	bfc	r3, #0, #11
 8002e78:	823b      	strh	r3, [r7, #16]
				break;
 8002e7a:	e019      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x1U;
 8002e7c:	8a3b      	ldrh	r3, [r7, #16]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f362 030a 	bfi	r3, r2, #0, #11
 8002e84:	823b      	strh	r3, [r7, #16]
				break;
 8002e86:	e013      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x2U;
 8002e88:	8a3b      	ldrh	r3, [r7, #16]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f362 030a 	bfi	r3, r2, #0, #11
 8002e90:	823b      	strh	r3, [r7, #16]
				break;
 8002e92:	e00d      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
				data.b.mps = 0x3U;
 8002e94:	8a3b      	ldrh	r3, [r7, #16]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f362 030a 	bfi	r3, r2, #0, #11
 8002e9c:	823b      	strh	r3, [r7, #16]
				break;
 8002e9e:	e007      	b.n	8002eb0 <XMC_USBD_EndpointConfigure+0x174>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	8a3b      	ldrh	r3, [r7, #16]
 8002eaa:	f362 030a 	bfi	r3, r2, #0, #11
 8002eae:	823b      	strh	r3, [r7, #16]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	74fb      	strb	r3, [r7, #19]
		/* clear stall */
		data.b.stall = 0U;
 8002eb8:	7cbb      	ldrb	r3, [r7, #18]
 8002eba:	f36f 1345 	bfc	r3, #5, #1
 8002ebe:	74bb      	strb	r3, [r7, #18]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8002ec0:	f7fe fd1a 	bl	80018f8 <XMC_USBD_lAssignTXFifo>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2d9      	uxtb	r1, r3
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	8893      	ldrh	r3, [r2, #4]
 8002ed0:	f361 1389 	bfi	r3, r1, #6, #4
 8002ed4:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	8a7b      	ldrh	r3, [r7, #18]
 8002ee2:	f362 1389 	bfi	r3, r2, #6, #4
 8002ee6:	827b      	strh	r3, [r7, #18]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4a2e      	ldr	r2, [pc, #184]	; (8002fac <XMC_USBD_EndpointConfigure+0x270>)
 8002ef4:	336a      	adds	r3, #106	; 0x6a
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8002efe:	89ba      	ldrh	r2, [r7, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	408b      	lsls	r3, r1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4313      	orrs	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	81bb      	strh	r3, [r7, #12]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <XMC_USBD_EndpointConfigure+0x1f0>
 8002f26:	79bb      	ldrb	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d172      	bne.n	8003012 <XMC_USBD_EndpointConfigure+0x2d6>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <XMC_USBD_EndpointConfigure+0x270>)
 8002f38:	3370      	adds	r3, #112	; 0x70
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002f44:	7c7b      	ldrb	r3, [r7, #17]
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	747b      	strb	r3, [r7, #17]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	7cbb      	ldrb	r3, [r7, #18]
 8002f56:	f362 0383 	bfi	r3, r2, #2, #2
 8002f5a:	74bb      	strb	r3, [r7, #18]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002f5c:	79bb      	ldrb	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12e      	bne.n	8002fc0 <XMC_USBD_EndpointConfigure+0x284>
		{
			switch(ep_max_packet_size)
 8002f62:	88bb      	ldrh	r3, [r7, #4]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d014      	beq.n	8002f92 <XMC_USBD_EndpointConfigure+0x256>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	dc02      	bgt.n	8002f72 <XMC_USBD_EndpointConfigure+0x236>
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d016      	beq.n	8002f9e <XMC_USBD_EndpointConfigure+0x262>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8002f70:	e02e      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
			switch(ep_max_packet_size)
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d007      	beq.n	8002f86 <XMC_USBD_EndpointConfigure+0x24a>
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d000      	beq.n	8002f7c <XMC_USBD_EndpointConfigure+0x240>
					break;
 8002f7a:	e029      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x0U;
 8002f7c:	8a3b      	ldrh	r3, [r7, #16]
 8002f7e:	f36f 030a 	bfc	r3, #0, #11
 8002f82:	823b      	strh	r3, [r7, #16]
					break;
 8002f84:	e024      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x1U;
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f362 030a 	bfi	r3, r2, #0, #11
 8002f8e:	823b      	strh	r3, [r7, #16]
					break;
 8002f90:	e01e      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x2U;
 8002f92:	8a3b      	ldrh	r3, [r7, #16]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f362 030a 	bfi	r3, r2, #0, #11
 8002f9a:	823b      	strh	r3, [r7, #16]
					break;
 8002f9c:	e018      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
					data.b.mps = 0x3U;
 8002f9e:	8a3b      	ldrh	r3, [r7, #16]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 030a 	bfi	r3, r2, #0, #11
 8002fa6:	823b      	strh	r3, [r7, #16]
					break;
 8002fa8:	e012      	b.n	8002fd0 <XMC_USBD_EndpointConfigure+0x294>
 8002faa:	bf00      	nop
 8002fac:	20000cf4 	.word	0x20000cf4
 8002fb0:	30000700 	.word	0x30000700
 8002fb4:	30000000 	.word	0x30000000
 8002fb8:	20000894 	.word	0x20000894
 8002fbc:	20000878 	.word	0x20000878
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002fc0:	88bb      	ldrh	r3, [r7, #4]
 8002fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	8a3b      	ldrh	r3, [r7, #16]
 8002fca:	f362 030a 	bfi	r3, r2, #0, #11
 8002fce:	823b      	strh	r3, [r7, #16]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	74fb      	strb	r3, [r7, #19]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8002fd8:	7cbb      	ldrb	r3, [r7, #18]
 8002fda:	f36f 1345 	bfc	r3, #5, #1
 8002fde:	74bb      	strb	r3, [r7, #18]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <XMC_USBD_EndpointConfigure+0x2ec>)
 8002fec:	3370      	adds	r3, #112	; 0x70
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8002ff8:	89fa      	ldrh	r2, [r7, #14]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	2301      	movs	r3, #1
 8003008:	408b      	lsls	r3, r1
 800300a:	b29b      	uxth	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	81fb      	strh	r3, [r7, #14]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <XMC_USBD_EndpointConfigure+0x2ec>)
 8003014:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000cf4 	.word	0x20000cf4

0800302c <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	2234      	movs	r2, #52	; 0x34
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4a54      	ldr	r2, [pc, #336]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003044:	4413      	add	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 800304e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	617b      	str	r3, [r7, #20]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	2301      	movs	r3, #1
 8003064:	4093      	lsls	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	791b      	ldrb	r3, [r3, #4]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e085      	b.n	8003188 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800307c:	7c7b      	ldrb	r3, [r7, #17]
 800307e:	f36f 13c7 	bfc	r3, #7, #1
 8003082:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308a:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8003094:	7cbb      	ldrb	r3, [r7, #18]
 8003096:	f36f 1345 	bfc	r3, #5, #1
 800309a:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	7913      	ldrb	r3, [r2, #4]
 80030a0:	f36f 0382 	bfc	r3, #2, #1
 80030a4:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	7913      	ldrb	r3, [r2, #4]
 80030aa:	f36f 1345 	bfc	r3, #5, #1
 80030ae:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	6853      	ldr	r3, [r2, #4]
 80030b4:	f36f 1304 	bfc	r3, #4, #1
 80030b8:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	6853      	ldr	r3, [r2, #4]
 80030be:	f36f 03c3 	bfc	r3, #3, #1
 80030c2:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <XMC_USBD_EndpointUnconfigure+0xb4>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	791b      	ldrb	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 80030ec:	336a      	adds	r3, #106	; 0x6a
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80030f6:	8aba      	ldrh	r2, [r7, #20]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4013      	ands	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	82bb      	strh	r3, [r7, #20]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <XMC_USBD_EndpointUnconfigure+0xf6>
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	791b      	ldrb	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d123      	bne.n	800316a <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 800312e:	3370      	adds	r3, #112	; 0x70
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800313a:	8afa      	ldrh	r2, [r7, #22]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	b29b      	uxth	r3, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	82fb      	strh	r3, [r7, #22]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <XMC_USBD_EndpointUnconfigure+0x16c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	7b5b      	ldrb	r3, [r3, #13]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10a      	bne.n	800316a <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003156:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 800315c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8003160:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	43d2      	mvns	r2, r2
 8003166:	400a      	ands	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <XMC_USBD_EndpointUnconfigure+0x168>)
 800316c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	889b      	ldrh	r3, [r3, #4]
 8003178:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fbf2 	bl	8001968 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000cf4 	.word	0x20000cf4
 8003198:	20000cf0 	.word	0x20000cf0

0800319c <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <XMC_USBD_GetFrameNumber+0x28>)
 80031a4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	607b      	str	r3, [r7, #4]
  result = (uint16_t)dsts.b.soffn;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	807b      	strh	r3, [r7, #2]
  return result;
 80031b6:	887b      	ldrh	r3, [r7, #2]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20000cf4 	.word	0x20000cf4

080031c8 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <XMC_USBD_IsEnumDone+0x34>)
 80031ce:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <XMC_USBD_IsEnumDone+0x28>
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <XMC_USBD_IsEnumDone+0x34>)
 80031de:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <XMC_USBD_IsEnumDone+0x28>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <XMC_USBD_IsEnumDone+0x2a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20000cf4 	.word	0x20000cf4

08003200 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8003208:	4b7a      	ldr	r3, [pc, #488]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 800320a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800320e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 800321e:	f083 0301 	eor.w	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 80d4 	bne.w	80033d2 <CDC_Device_ProcessControlRequest+0x1d2>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 800322c:	889b      	ldrh	r3, [r3, #4]
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	429a      	cmp	r2, r3
 8003238:	f040 80cd 	bne.w	80033d6 <CDC_Device_ProcessControlRequest+0x1d6>
	  return;

	switch (USB_ControlRequest.bRequest)
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	3b20      	subs	r3, #32
 8003242:	2b03      	cmp	r3, #3
 8003244:	f200 80d2 	bhi.w	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <CDC_Device_ProcessControlRequest+0x50>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	080032f1 	.word	0x080032f1
 8003254:	08003261 	.word	0x08003261
 8003258:	08003381 	.word	0x08003381
 800325c:	080033a9 	.word	0x080033a9
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8003260:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2ba1      	cmp	r3, #161	; 0xa1
 8003266:	f040 80b8 	bne.w	80033da <CDC_Device_ProcessControlRequest+0x1da>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800326a:	4a62      	ldr	r2, [pc, #392]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 800326c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003270:	f36f 0341 	bfc	r3, #1, #1
 8003274:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 8003278:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800327a:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 800327c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003280:	461a      	mov	r2, r3
 8003282:	232c      	movs	r3, #44	; 0x2c
 8003284:	fb03 f302 	mul.w	r3, r3, r2
 8003288:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <CDC_Device_ProcessControlRequest+0xb0>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	791b      	ldrb	r3, [r3, #4]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <CDC_Device_ProcessControlRequest+0xb0>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <CDC_Device_ProcessControlRequest+0xb2>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1db      	bne.n	800327a <CDC_Device_ProcessControlRequest+0x7a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fe10 	bl	8003eec <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7f1b      	ldrb	r3, [r3, #28]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd9f 	bl	8003e14 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7f5b      	ldrb	r3, [r3, #29]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fd9a 	bl	8003e14 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7f9b      	ldrb	r3, [r3, #30]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd95 	bl	8003e14 <Endpoint_Write_8>

				Endpoint_ClearIN();
 80032ea:	f000 fce9 	bl	8003cc0 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 80032ee:	e074      	b.n	80033da <CDC_Device_ProcessControlRequest+0x1da>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b21      	cmp	r3, #33	; 0x21
 80032f6:	d172      	bne.n	80033de <CDC_Device_ProcessControlRequest+0x1de>
		device.IsSetupRecieved = 0;
 80032f8:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 80032fa:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80032fe:	f36f 0341 	bfc	r3, #1, #1
 8003302:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 8003306:	e004      	b.n	8003312 <CDC_Device_ProcessControlRequest+0x112>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003308:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <CDC_Device_ProcessControlRequest+0x1fc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d067      	beq.n	80033e2 <CDC_Device_ProcessControlRequest+0x1e2>
	 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003314:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003318:	461a      	mov	r2, r3
 800331a:	232c      	movs	r3, #44	; 0x2c
 800331c:	fb03 f302 	mul.w	r3, r3, r2
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
		return ep->IsOutRecieved;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
				while (!(Endpoint_IsOUTReceived()))
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e0      	bne.n	8003308 <CDC_Device_ProcessControlRequest+0x108>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8003346:	f000 fe05 	bl	8003f54 <Endpoint_Read_32_LE>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8003350:	f000 fd94 	bl	8003e7c <Endpoint_Read_8>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	771a      	strb	r2, [r3, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 800335c:	f000 fd8e 	bl	8003e7c <Endpoint_Read_8>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	775a      	strb	r2, [r3, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8003368:	f000 fd88 	bl	8003e7c <Endpoint_Read_8>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	779a      	strb	r2, [r3, #30]

				Endpoint_ClearOUT();
 8003374:	f000 fc58 	bl	8003c28 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb1b 	bl	80039b4 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
 800337e:	e02e      	b.n	80033de <CDC_Device_ProcessControlRequest+0x1de>
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b21      	cmp	r3, #33	; 0x21
 8003386:	d12e      	bne.n	80033e6 <CDC_Device_ProcessControlRequest+0x1e6>
		device.IsSetupRecieved = 0;
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 800338a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800338e:	f36f 0341 	bfc	r3, #1, #1
 8003392:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 8003398:	885b      	ldrh	r3, [r3, #2]
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	829a      	strh	r2, [r3, #20]

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fb11 	bl	80039c8 <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
 80033a6:	e01e      	b.n	80033e6 <CDC_Device_ProcessControlRequest+0x1e6>
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b21      	cmp	r3, #33	; 0x21
 80033ae:	d11c      	bne.n	80033ea <CDC_Device_ProcessControlRequest+0x1ea>
 80033b0:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <CDC_Device_ProcessControlRequest+0x1f4>)
 80033b2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80033b6:	f36f 0341 	bfc	r3, #1, #1
 80033ba:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <CDC_Device_ProcessControlRequest+0x1f8>)
 80033c0:	885b      	ldrh	r3, [r3, #2]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb07 	bl	80039dc <EVENT_CDC_Device_BreakSent>
			}

			break;
 80033ce:	bf00      	nop
 80033d0:	e00b      	b.n	80033ea <CDC_Device_ProcessControlRequest+0x1ea>
	  return;
 80033d2:	bf00      	nop
 80033d4:	e00a      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
	  return;
 80033d6:	bf00      	nop
 80033d8:	e008      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80033da:	bf00      	nop
 80033dc:	e006      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80033de:	bf00      	nop
 80033e0:	e004      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
					  return;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 80033ea:	bf00      	nop
	}
}
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000bb0 	.word	0x20000bb0
 80033f8:	20000f00 	.word	0x20000f00
 80033fc:	20000efd 	.word	0x20000efd

08003400 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3314      	adds	r3, #20
 800340c:	220c      	movs	r2, #12
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fb13 	bl	8007a3c <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	719a      	strb	r2, [r3, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	731a      	strb	r2, [r3, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2203      	movs	r2, #3
 8003426:	749a      	strb	r2, [r3, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3302      	adds	r3, #2
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fdc8 	bl	8003fc4 <Endpoint_ConfigureEndpointTable>
 8003434:	4603      	mov	r3, r0
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <CDC_Device_ConfigureEndpoints+0x44>
	  return false;
 8003440:	2300      	movs	r3, #0
 8003442:	e01c      	b.n	800347e <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3308      	adds	r3, #8
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fdba 	bl	8003fc4 <Endpoint_ConfigureEndpointTable>
 8003450:	4603      	mov	r3, r0
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <CDC_Device_ConfigureEndpoints+0x60>
	  return false;
 800345c:	2300      	movs	r3, #0
 800345e:	e00e      	b.n	800347e <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	330e      	adds	r3, #14
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fdac 	bl	8003fc4 <Endpoint_ConfigureEndpointTable>
 800346c:	4603      	mov	r3, r0
 800346e:	f083 0301 	eor.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <CDC_Device_ConfigureEndpoints+0x7c>
	  return false;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <CDC_Device_ConfigureEndpoints+0x7e>

	return true;
 800347c:	2301      	movs	r3, #1
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <CDC_Device_USBTask+0x90>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b04      	cmp	r3, #4
 8003498:	d139      	bne.n	800350e <CDC_Device_USBTask+0x86>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d035      	beq.n	800350e <CDC_Device_USBTask+0x86>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	789b      	ldrb	r3, [r3, #2]
 80034a6:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80034a8:	7afb      	ldrb	r3, [r7, #11]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <CDC_Device_USBTask+0x94>)
 80034b2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80034b6:	7afb      	ldrb	r3, [r7, #11]
 80034b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <CDC_Device_USBTask+0x94>)
 80034c0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <CDC_Device_USBTask+0x94>)
 80034c6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80034ca:	461a      	mov	r2, r3
 80034cc:	232c      	movs	r3, #44	; 0x2c
 80034ce:	fb03 f302 	mul.w	r3, r3, r2
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <CDC_Device_USBTask+0x94>)
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <CDC_Device_USBTask+0x72>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <CDC_Device_USBTask+0x72>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <CDC_Device_USBTask+0x74>
 80034fa:	2300      	movs	r3, #0
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3

	if (Endpoint_IsINReady())
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <CDC_Device_USBTask+0x88>
	  CDC_Device_Flush(CDCInterfaceInfo);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8b2 	bl	8003670 <CDC_Device_Flush>
 800350c:	e000      	b.n	8003510 <CDC_Device_USBTask+0x88>
	  return;
 800350e:	bf00      	nop
	#endif
}
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000efd 	.word	0x20000efd
 800351c:	20000bb0 	.word	0x20000bb0

08003520 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <CDC_Device_SendString+0x60>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b04      	cmp	r3, #4
 8003532:	d103      	bne.n	800353c <CDC_Device_SendString+0x1c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <CDC_Device_SendString+0x20>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800353c:	2302      	movs	r3, #2
 800353e:	e01b      	b.n	8003578 <CDC_Device_SendString+0x58>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	789b      	ldrb	r3, [r3, #2]
 8003544:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <CDC_Device_SendString+0x64>)
 8003550:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <CDC_Device_SendString+0x64>)
 800355e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f004 fc8c 	bl	8007e80 <strlen>
 8003568:	4603      	mov	r3, r0
 800356a:	b29b      	uxth	r3, r3
 800356c:	2200      	movs	r2, #0
 800356e:	4619      	mov	r1, r3
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	f002 fa29 	bl	80059c8 <Endpoint_Write_Stream_LE>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000efd 	.word	0x20000efd
 8003584:	20000bb0 	.word	0x20000bb0

08003588 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <CDC_Device_SendData+0x5c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b04      	cmp	r3, #4
 800359e:	d103      	bne.n	80035a8 <CDC_Device_SendData+0x20>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <CDC_Device_SendData+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80035a8:	2302      	movs	r3, #2
 80035aa:	e017      	b.n	80035dc <CDC_Device_SendData+0x54>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <CDC_Device_SendData+0x60>)
 80035bc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <CDC_Device_SendData+0x60>)
 80035ca:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2200      	movs	r2, #0
 80035d2:	4619      	mov	r1, r3
 80035d4:	68b8      	ldr	r0, [r7, #8]
 80035d6:	f002 f9f7 	bl	80059c8 <Endpoint_Write_Stream_LE>
 80035da:	4603      	mov	r3, r0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000efd 	.word	0x20000efd
 80035e8:	20000bb0 	.word	0x20000bb0

080035ec <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <CDC_Device_SendByte+0x7c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d103      	bne.n	800360a <CDC_Device_SendByte+0x1e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <CDC_Device_SendByte+0x22>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800360a:	2302      	movs	r3, #2
 800360c:	e028      	b.n	8003660 <CDC_Device_SendByte+0x74>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	789b      	ldrb	r3, [r3, #2]
 8003612:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <CDC_Device_SendByte+0x80>)
 800361e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <CDC_Device_SendByte+0x80>)
 800362c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8003630:	f000 fbbe 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8003634:	4603      	mov	r3, r0
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <CDC_Device_SendByte+0x6a>
	{
		Endpoint_ClearIN();
 8003640:	f000 fb3e 	bl	8003cc0 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003644:	f000 fa5e 	bl	8003b04 <Endpoint_WaitUntilReady>
 8003648:	4603      	mov	r3, r0
 800364a:	73bb      	strb	r3, [r7, #14]
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <CDC_Device_SendByte+0x6a>
		  return ErrorCode;
 8003652:	7bbb      	ldrb	r3, [r7, #14]
 8003654:	e004      	b.n	8003660 <CDC_Device_SendByte+0x74>
	}

	Endpoint_Write_8(Data);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fbdb 	bl	8003e14 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000efd 	.word	0x20000efd
 800366c:	20000bb0 	.word	0x20000bb0

08003670 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003678:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <CDC_Device_Flush+0xc4>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b04      	cmp	r3, #4
 8003680:	d103      	bne.n	800368a <CDC_Device_Flush+0x1a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <CDC_Device_Flush+0x1e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800368a:	2302      	movs	r3, #2
 800368c:	e04e      	b.n	800372c <CDC_Device_Flush+0xbc>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	789b      	ldrb	r3, [r3, #2]
 8003692:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	b2da      	uxtb	r2, r3
 800369c:	4b26      	ldr	r3, [pc, #152]	; (8003738 <CDC_Device_Flush+0xc8>)
 800369e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <CDC_Device_Flush+0xc8>)
 80036ac:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <CDC_Device_Flush+0xc8>)
 80036b2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80036b6:	461a      	mov	r2, r3
 80036b8:	232c      	movs	r3, #44	; 0x2c
 80036ba:	fb03 f302 	mul.w	r3, r3, r2
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <CDC_Device_Flush+0xc8>)
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <CDC_Device_Flush+0x6c>
			return ep->InBytesAvailable;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	e002      	b.n	80036e2 <CDC_Device_Flush+0x72>
		else
			return ep->OutBytesAvailable;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	b29b      	uxth	r3, r3

	if (!(Endpoint_BytesInEndpoint()))
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <CDC_Device_Flush+0x7a>
	  return ENDPOINT_READYWAIT_NoError;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e020      	b.n	800372c <CDC_Device_Flush+0xbc>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 80036ea:	f000 fb61 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	727b      	strb	r3, [r7, #9]
 8003702:	7a7b      	ldrb	r3, [r7, #9]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	727b      	strb	r3, [r7, #9]

	Endpoint_ClearIN();
 800370a:	f000 fad9 	bl	8003cc0 <Endpoint_ClearIN>

	if (BankFull)
 800370e:	7a7b      	ldrb	r3, [r7, #9]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <CDC_Device_Flush+0xba>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003714:	f000 f9f6 	bl	8003b04 <Endpoint_WaitUntilReady>
 8003718:	4603      	mov	r3, r0
 800371a:	72bb      	strb	r3, [r7, #10]
 800371c:	7abb      	ldrb	r3, [r7, #10]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <CDC_Device_Flush+0xb6>
		  return ErrorCode;
 8003722:	7abb      	ldrb	r3, [r7, #10]
 8003724:	e002      	b.n	800372c <CDC_Device_Flush+0xbc>

		Endpoint_ClearIN();
 8003726:	f000 facb 	bl	8003cc0 <Endpoint_ClearIN>
	}

	return ENDPOINT_READYWAIT_NoError;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000efd 	.word	0x20000efd
 8003738:	20000bb0 	.word	0x20000bb0

0800373c <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003744:	4b38      	ldr	r3, [pc, #224]	; (8003828 <CDC_Device_BytesReceived+0xec>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b04      	cmp	r3, #4
 800374c:	d103      	bne.n	8003756 <CDC_Device_BytesReceived+0x1a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <CDC_Device_BytesReceived+0x1e>
	  return 0;
 8003756:	2300      	movs	r3, #0
 8003758:	e061      	b.n	800381e <CDC_Device_BytesReceived+0xe2>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7a1b      	ldrb	r3, [r3, #8]
 800375e:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b30      	ldr	r3, [pc, #192]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 800376a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 8003778:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 800377e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003782:	461a      	mov	r2, r3
 8003784:	232c      	movs	r3, #44	; 0x2c
 8003786:	fb03 f302 	mul.w	r3, r3, r2
 800378a:	4a28      	ldr	r2, [pc, #160]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
		return ep->IsOutRecieved;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d038      	beq.n	800381c <CDC_Device_BytesReceived+0xe0>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 80037ac:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80037b0:	461a      	mov	r2, r3
 80037b2:	232c      	movs	r3, #44	; 0x2c
 80037b4:	fb03 f302 	mul.w	r3, r3, r2
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <CDC_Device_BytesReceived+0x9a>
			return ep->InBytesAvailable;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	e002      	b.n	80037dc <CDC_Device_BytesReceived+0xa0>
			return ep->OutBytesAvailable;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	b29b      	uxth	r3, r3
	{
		if (!(Endpoint_BytesInEndpoint()))
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <CDC_Device_BytesReceived+0xac>
		{
			Endpoint_ClearOUT();
 80037e0:	f000 fa22 	bl	8003c28 <Endpoint_ClearOUT>
			return 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e01a      	b.n	800381e <CDC_Device_BytesReceived+0xe2>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 80037ea:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80037ee:	461a      	mov	r2, r3
 80037f0:	232c      	movs	r3, #44	; 0x2c
 80037f2:	fb03 f302 	mul.w	r3, r3, r2
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <CDC_Device_BytesReceived+0xf0>)
 80037f8:	4413      	add	r3, r2
 80037fa:	3304      	adds	r3, #4
 80037fc:	617b      	str	r3, [r7, #20]
		if (ep->Direction)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <CDC_Device_BytesReceived+0xd8>
			return ep->InBytesAvailable;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	b29b      	uxth	r3, r3
		}
		else
		{
			return Endpoint_BytesInEndpoint();
 8003812:	e004      	b.n	800381e <CDC_Device_BytesReceived+0xe2>
			return ep->OutBytesAvailable;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	b29b      	uxth	r3, r3
 800381a:	e000      	b.n	800381e <CDC_Device_BytesReceived+0xe2>
		}
	}
	else
	{
		return 0;
 800381c:	2300      	movs	r3, #0
	}
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000efd 	.word	0x20000efd
 800382c:	20000bb0 	.word	0x20000bb0

08003830 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003838:	4b3c      	ldr	r3, [pc, #240]	; (800392c <CDC_Device_ReceiveByte+0xfc>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b04      	cmp	r3, #4
 8003840:	d103      	bne.n	800384a <CDC_Device_ReceiveByte+0x1a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <CDC_Device_ReceiveByte+0x20>
	  return -1;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384e:	e068      	b.n	8003922 <CDC_Device_ReceiveByte+0xf2>

	int16_t ReceivedByte = -1;
 8003850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003854:	817b      	strh	r3, [r7, #10]

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7a1b      	ldrb	r3, [r3, #8]
 800385a:	727b      	strb	r3, [r7, #9]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800385c:	7a7b      	ldrb	r3, [r7, #9]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 8003866:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800386a:	7a7b      	ldrb	r3, [r7, #9]
 800386c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 8003874:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 800387a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800387e:	461a      	mov	r2, r3
 8003880:	232c      	movs	r3, #44	; 0x2c
 8003882:	fb03 f302 	mul.w	r3, r3, r2
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
		return ep->IsOutRecieved;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d03b      	beq.n	800391e <CDC_Device_ReceiveByte+0xee>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 80038a8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80038ac:	461a      	mov	r2, r3
 80038ae:	232c      	movs	r3, #44	; 0x2c
 80038b0:	fb03 f302 	mul.w	r3, r3, r2
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <CDC_Device_ReceiveByte+0xa2>
			return ep->InBytesAvailable;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	e002      	b.n	80038d8 <CDC_Device_ReceiveByte+0xa8>
			return ep->OutBytesAvailable;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	b29b      	uxth	r3, r3
	{
		if (Endpoint_BytesInEndpoint())
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <CDC_Device_ReceiveByte+0xb4>
		  ReceivedByte = Endpoint_Read_8();
 80038dc:	f000 face 	bl	8003e7c <Endpoint_Read_8>
 80038e0:	4603      	mov	r3, r0
 80038e2:	817b      	strh	r3, [r7, #10]
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 80038e6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80038ea:	461a      	mov	r2, r3
 80038ec:	232c      	movs	r3, #44	; 0x2c
 80038ee:	fb03 f302 	mul.w	r3, r3, r2
 80038f2:	4a0f      	ldr	r2, [pc, #60]	; (8003930 <CDC_Device_ReceiveByte+0x100>)
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	617b      	str	r3, [r7, #20]
		if (ep->Direction)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <CDC_Device_ReceiveByte+0xe0>
			return ep->InBytesAvailable;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	b29b      	uxth	r3, r3
 800390e:	e002      	b.n	8003916 <CDC_Device_ReceiveByte+0xe6>
			return ep->OutBytesAvailable;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	b29b      	uxth	r3, r3

		if (!(Endpoint_BytesInEndpoint()))
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <CDC_Device_ReceiveByte+0xee>
		  Endpoint_ClearOUT();
 800391a:	f000 f985 	bl	8003c28 <Endpoint_ClearOUT>
	}

	return ReceivedByte;
 800391e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000efd 	.word	0x20000efd
 8003930:	20000bb0 	.word	0x20000bb0

08003934 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <CDC_Device_SendControlLineStateChange+0x74>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b04      	cmp	r3, #4
 8003944:	d12c      	bne.n	80039a0 <CDC_Device_SendControlLineStateChange+0x6c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d028      	beq.n	80039a0 <CDC_Device_SendControlLineStateChange+0x6c>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7b9b      	ldrb	r3, [r3, #14]
 8003952:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	b2da      	uxtb	r2, r3
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <CDC_Device_SendControlLineStateChange+0x78>)
 800395e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <CDC_Device_SendControlLineStateChange+0x78>)
 800396c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <CDC_Device_SendControlLineStateChange+0x7c>)
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800397a:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 800397e:	f107 0310 	add.w	r3, r7, #16
 8003982:	2200      	movs	r2, #0
 8003984:	2108      	movs	r1, #8
 8003986:	4618      	mov	r0, r3
 8003988:	f002 f81e 	bl	80059c8 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3316      	adds	r3, #22
 8003990:	2200      	movs	r2, #0
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f002 f817 	bl	80059c8 <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 800399a:	f000 f991 	bl	8003cc0 <Endpoint_ClearIN>
 800399e:	e000      	b.n	80039a2 <CDC_Device_SendControlLineStateChange+0x6e>
	  return;
 80039a0:	bf00      	nop
}
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000efd 	.word	0x20000efd
 80039ac:	20000bb0 	.word	0x20000bb0
 80039b0:	080083f0 	.word	0x080083f0

080039b4 <EVENT_CDC_Device_LineEncodingChanged>:
	return ReceivedByte;
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 80039f8:	f000 f802 	bl	8003a00 <USB_DeviceTask>
	#endif
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <USB_DeviceTask+0x7c>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d030      	beq.n	8003a72 <USB_DeviceTask+0x72>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a12:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8003a20:	71bb      	strb	r3, [r7, #6]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003a22:	2200      	movs	r2, #0
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a26:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a2e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a34:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003a38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 8003a4c:	f7fd f89a 	bl	8000b84 <USB_Device_ProcessControlRequest>
 8003a50:	79bb      	ldrb	r3, [r7, #6]
 8003a52:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a5e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <USB_DeviceTask+0x80>)
 8003a6c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 8003a70:	e000      	b.n	8003a74 <USB_DeviceTask+0x74>
	  return;
 8003a72:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000efd 	.word	0x20000efd
 8003a80:	20000bb0 	.word	0x20000bb0

08003a84 <__NVIC_EnableIRQ>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db0b      	blt.n	8003aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a96:	4909      	ldr	r1, [pc, #36]	; (8003abc <__NVIC_EnableIRQ+0x38>)
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	f002 021f 	and.w	r2, r2, #31
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000e100 	.word	0xe000e100

08003ac0 <__NVIC_DisableIRQ>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db10      	blt.n	8003af4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003ad2:	490b      	ldr	r1, [pc, #44]	; (8003b00 <__NVIC_DisableIRQ+0x40>)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	79fa      	ldrb	r2, [r7, #7]
 8003adc:	f002 021f 	and.w	r2, r2, #31
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	3320      	adds	r3, #32
 8003ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003af0:	f3bf 8f6f 	isb	sy
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8003b0a:	2364      	movs	r3, #100	; 0x64
 8003b0c:	71bb      	strb	r3, [r7, #6]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8003b0e:	4b44      	ldr	r3, [pc, #272]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	4798      	blx	r3
 8003b16:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8003b18:	813b      	strh	r3, [r7, #8]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b1c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b20:	461a      	mov	r2, r3
 8003b22:	232c      	movs	r3, #44	; 0x2c
 8003b24:	fb03 f302 	mul.w	r3, r3, r2
 8003b28:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b38:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	d122      	bne.n	8003b84 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003b3e:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b40:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b44:	461a      	mov	r2, r3
 8003b46:	232c      	movs	r3, #44	; 0x2c
 8003b48:	fb03 f302 	mul.w	r3, r3, r2
 8003b4c:	4a34      	ldr	r2, [pc, #208]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	613b      	str	r3, [r7, #16]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <Endpoint_WaitUntilReady+0x70>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	791b      	ldrb	r3, [r3, #4]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <Endpoint_WaitUntilReady+0x70>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <Endpoint_WaitUntilReady+0x72>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01a      	beq.n	8003bb6 <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e048      	b.n	8003c16 <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b86:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	232c      	movs	r3, #44	; 0x2c
 8003b8e:	fb03 f302 	mul.w	r3, r3, r2
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	617b      	str	r3, [r7, #20]
		return ep->IsOutRecieved;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e02f      	b.n	8003c16 <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <Endpoint_WaitUntilReady+0x120>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e027      	b.n	8003c16 <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d101      	bne.n	8003bd0 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e022      	b.n	8003c16 <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003bd2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003bda:	232c      	movs	r3, #44	; 0x2c
 8003bdc:	fb03 f301 	mul.w	r3, r3, r1
 8003be0:	4413      	add	r3, r2
 8003be2:	7a1b      	ldrb	r3, [r3, #8]
 8003be4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003be8:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e011      	b.n	8003c16 <Endpoint_WaitUntilReady+0x112>
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <Endpoint_WaitUntilReady+0x11c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4798      	blx	r3
 8003bfa:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003bfc:	817b      	strh	r3, [r7, #10]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8003bfe:	897a      	ldrh	r2, [r7, #10]
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d089      	beq.n	8003b1a <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	813b      	strh	r3, [r7, #8]

			if (!(TimeoutMSRem--))
 8003c0a:	79bb      	ldrb	r3, [r7, #6]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	71ba      	strb	r2, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d182      	bne.n	8003b1a <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 8003c14:	2304      	movs	r3, #4
		}
	}
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000bb0 	.word	0x20000bb0
 8003c24:	20000efd 	.word	0x20000efd

08003c28 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003c2e:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <Endpoint_ClearOUT+0x94>)
 8003c30:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c34:	461a      	mov	r2, r3
 8003c36:	232c      	movs	r3, #44	; 0x2c
 8003c38:	fb03 f302 	mul.w	r3, r3, r2
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <Endpoint_ClearOUT+0x94>)
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	791b      	ldrb	r3, [r3, #4]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02f      	beq.n	8003cb2 <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <Endpoint_ClearOUT+0x94>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	7810      	ldrb	r0, [r2, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6911      	ldr	r1, [r2, #16]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6952      	ldr	r2, [r2, #20]
 8003c64:	4798      	blx	r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <Endpoint_ClearOUT+0x8c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d114      	bne.n	8003cb4 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	8893      	ldrh	r3, [r2, #4]
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	8893      	ldrh	r3, [r2, #4]
 8003c98:	f36f 1345 	bfc	r3, #5, #1
 8003c9c:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <Endpoint_ClearOUT+0x94>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	7810      	ldrb	r0, [r2, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6952      	ldr	r2, [r2, #20]
 8003cac:	4611      	mov	r1, r2
 8003cae:	4798      	blx	r3
 8003cb0:	e000      	b.n	8003cb4 <Endpoint_ClearOUT+0x8c>
		return;
 8003cb2:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000bb0 	.word	0x20000bb0

08003cc0 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <Endpoint_ClearIN+0xe8>)
 8003cc8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ccc:	461a      	mov	r2, r3
 8003cce:	232c      	movs	r3, #44	; 0x2c
 8003cd0:	fb03 f302 	mul.w	r3, r3, r2
 8003cd4:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <Endpoint_ClearIN+0xe8>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	603b      	str	r3, [r7, #0]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d059      	beq.n	8003d9e <Endpoint_ClearIN+0xde>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d052      	beq.n	8003d9e <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	8893      	ldrh	r3, [r2, #4]
 8003cfc:	f043 0310 	orr.w	r3, r3, #16
 8003d00:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8003d18:	206b      	movs	r0, #107	; 0x6b
 8003d1a:	f7ff fed1 	bl	8003ac0 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <Endpoint_ClearIN+0xe8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d30:	4798      	blx	r3
 8003d32:	6078      	str	r0, [r7, #4]
	ep->InDataBuffer += data_count;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	441a      	add	r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8003d4c:	206b      	movs	r0, #107	; 0x6b
 8003d4e:	f7ff fe99 	bl	8003a84 <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <Endpoint_ClearIN+0xec>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d121      	bne.n	8003da0 <Endpoint_ClearIN+0xe0>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01a      	beq.n	8003da0 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8003d6a:	bf00      	nop
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f8      	bne.n	8003d6c <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	8893      	ldrh	r3, [r2, #4]
 8003d7e:	f043 0310 	orr.w	r3, r3, #16
 8003d82:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <Endpoint_ClearIN+0xe8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 8003d92:	2200      	movs	r2, #0
 8003d94:	4798      	blx	r3
	  zlp_flag = false;
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <Endpoint_ClearIN+0xec>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e000      	b.n	8003da0 <Endpoint_ClearIN+0xe0>
		return;
 8003d9e:	bf00      	nop
	}
}
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000bb0 	.word	0x20000bb0
 8003dac:	200008b0 	.word	0x200008b0

08003db0 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <Endpoint_IsReadWriteAllowed+0x60>)
 8003db8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	232c      	movs	r3, #44	; 0x2c
 8003dc0:	fb03 f302 	mul.w	r3, r3, r2
 8003dc4:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <Endpoint_IsReadWriteAllowed+0x60>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	607b      	str	r3, [r7, #4]
	bool Retval = false;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	70fb      	strb	r3, [r7, #3]

	if(EndPoint->Direction)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf34      	ite	cc
 8003dea:	2301      	movcc	r3, #1
 8003dec:	2300      	movcs	r3, #0
 8003dee:	70fb      	strb	r3, [r7, #3]
 8003df0:	e006      	b.n	8003e00 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	70fb      	strb	r3, [r7, #3]
	}
	return Retval;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000bb0 	.word	0x20000bb0

08003e14 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <Endpoint_Write_8+0x64>)
 8003e20:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e24:	461a      	mov	r2, r3
 8003e26:	232c      	movs	r3, #44	; 0x2c
 8003e28:	fb03 f302 	mul.w	r3, r3, r2
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <Endpoint_Write_8+0x64>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
	bool Success = false;
 8003e34:	2300      	movs	r3, #0
 8003e36:	72fb      	strb	r3, [r7, #11]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d20d      	bcs.n	8003e60 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	79fa      	ldrb	r2, [r7, #7]
 8003e50:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	619a      	str	r2, [r3, #24]

	      Success = true;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	72fb      	strb	r3, [r7, #11]
	    }
	  }while(!Success);
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	f083 0301 	eor.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <Endpoint_Write_8+0x24>
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000bb0 	.word	0x20000bb0

08003e7c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003e82:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <Endpoint_Read_8+0x6c>)
 8003e84:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e88:	461a      	mov	r2, r3
 8003e8a:	232c      	movs	r3, #44	; 0x2c
 8003e8c:	fb03 f302 	mul.w	r3, r3, r2
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <Endpoint_Read_8+0x6c>)
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	70bb      	strb	r3, [r7, #2]
	uint8_t data = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	70fb      	strb	r3, [r7, #3]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	70fb      	strb	r3, [r7, #3]
          EndPoint->OutOffset++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	1e5a      	subs	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
		  Success = true;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	70bb      	strb	r3, [r7, #2]
		}
	  }while(!Success);
 8003ece:	78bb      	ldrb	r3, [r7, #2]
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e2      	bne.n	8003ea0 <Endpoint_Read_8+0x24>
	 return data;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000bb0 	.word	0x20000bb0

08003eec <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <Endpoint_Write_32_LE+0x64>)
 8003ef6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003efa:	461a      	mov	r2, r3
 8003efc:	232c      	movs	r3, #44	; 0x2c
 8003efe:	fb03 f302 	mul.w	r3, r3, r2
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <Endpoint_Write_32_LE+0x64>)
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
	bool Success = false;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	72fb      	strb	r3, [r7, #11]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	3b03      	subs	r3, #3
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d20d      	bcs.n	8003f38 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	619a      	str	r2, [r3, #24]

			Success = true;
 8003f34:	2301      	movs	r3, #1
 8003f36:	72fb      	strb	r3, [r7, #11]
		}
	}while(!Success);
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	f083 0301 	eor.w	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e4      	bne.n	8003f0e <Endpoint_Write_32_LE+0x22>
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000bb0 	.word	0x20000bb0

08003f54 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <Endpoint_Read_32_LE+0x6c>)
 8003f5c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f60:	461a      	mov	r2, r3
 8003f62:	232c      	movs	r3, #44	; 0x2c
 8003f64:	fb03 f302 	mul.w	r3, r3, r2
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <Endpoint_Read_32_LE+0x6c>)
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
	bool Success = false;
 8003f70:	2300      	movs	r3, #0
 8003f72:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d912      	bls.n	8003fa6 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	1f1a      	subs	r2, r3, #4
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	609a      	str	r2, [r3, #8]

			Success = true;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	71fb      	strb	r3, [r7, #7]
		}
	} while(!Success);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e2      	bne.n	8003f78 <Endpoint_Read_32_LE+0x24>
	return data;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000bb0 	.word	0x20000bb0

08003fc4 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73bb      	strb	r3, [r7, #14]
 8003fd4:	e092      	b.n	80040fc <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8003fd6:	7bba      	ldrb	r2, [r7, #14]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	73fb      	strb	r3, [r7, #15]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8003fee:	4b48      	ldr	r3, [pc, #288]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69dc      	ldr	r4, [r3, #28]
 8003ff4:	7bba      	ldrb	r2, [r7, #14]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	7818      	ldrb	r0, [r3, #0]
 8004006:	7bba      	ldrb	r2, [r7, #14]
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	461a      	mov	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	7919      	ldrb	r1, [r3, #4]
 8004018:	7bba      	ldrb	r2, [r7, #14]
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	885b      	ldrh	r3, [r3, #2]
 800402a:	461a      	mov	r2, r3
 800402c:	47a0      	blx	r4
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 8004034:	2300      	movs	r3, #0
 8004036:	e067      	b.n	8004108 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8004038:	7bf9      	ldrb	r1, [r7, #15]
 800403a:	7bba      	ldrb	r2, [r7, #14]
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	7818      	ldrb	r0, [r3, #0]
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 800404e:	232c      	movs	r3, #44	; 0x2c
 8004050:	fb03 f301 	mul.w	r3, r3, r1
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	4602      	mov	r2, r0
 800405a:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 800405c:	7bf8      	ldrb	r0, [r7, #15]
 800405e:	7bba      	ldrb	r2, [r7, #14]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	885b      	ldrh	r3, [r3, #2]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004076:	b2d9      	uxtb	r1, r3
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 800407a:	232c      	movs	r3, #44	; 0x2c
 800407c:	fb03 f300 	mul.w	r3, r3, r0
 8004080:	441a      	add	r2, r3
 8004082:	8913      	ldrh	r3, [r2, #8]
 8004084:	f361 138c 	bfi	r3, r1, #6, #7
 8004088:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	441a      	add	r2, r3
 8004096:	7a13      	ldrb	r3, [r2, #8]
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	441a      	add	r2, r3
 80040aa:	7a13      	ldrb	r3, [r2, #8]
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 80040b2:	7bba      	ldrb	r2, [r7, #14]
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	461a      	mov	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	db15      	blt.n	80040f6 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80040d0:	7bba      	ldrb	r2, [r7, #14]
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	7818      	ldrb	r0, [r3, #0]
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <Endpoint_ConfigureEndpointTable+0x14c>)
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	3318      	adds	r3, #24
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73bb      	strb	r3, [r7, #14]
 80040fc:	7bba      	ldrb	r2, [r7, #14]
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	429a      	cmp	r2, r3
 8004102:	f4ff af68 	bcc.w	8003fd6 <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	20000bb0 	.word	0x20000bb0

08004114 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	50004600 	.word	0x50004600

08004130 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	50004600 	.word	0x50004600

0800414c <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	b2db      	uxtb	r3, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	50004600 	.word	0x50004600

0800416c <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000ffc0 	.word	0x2000ffc0
 8004190:	50004600 	.word	0x50004600

08004194 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000ffc0 	.word	0x2000ffc0

080041ac <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <XMC_SCU_GetMirrorStatus+0x14>)
 80041b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	50004000 	.word	0x50004000

080041c4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80041cc:	f002 ff10 	bl	8006ff0 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <XMC_SCU_lDelay+0x40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <XMC_SCU_lDelay+0x44>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9a      	lsrs	r2, r3, #18
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e003      	b.n	80041f2 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80041ea:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d3f7      	bcc.n	80041ea <XMC_SCU_lDelay+0x26>
  }
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	2000ffc0 	.word	0x2000ffc0
 8004208:	431bde83 	.word	0x431bde83

0800420c <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8004214:	4905      	ldr	r1, [pc, #20]	; (800422c <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	50004074 	.word	0x50004074

08004230 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	43db      	mvns	r3, r3
 8004242:	4013      	ands	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	50004074 	.word	0x50004074

08004258 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8004260:	4905      	ldr	r1, [pc, #20]	; (8004278 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4313      	orrs	r3, r2
 800426a:	610b      	str	r3, [r1, #16]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	50004074 	.word	0x50004074

0800427c <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8004282:	685b      	ldr	r3, [r3, #4]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	50004074 	.word	0x50004074

08004294 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800429c:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60d3      	str	r3, [r2, #12]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	50004074 	.word	0x50004074

080042b4 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <XMC_SCU_GetBootMode+0x18>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	50004000 	.word	0x50004000

080042d0 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 80042da:	4a04      	ldr	r2, [pc, #16]	; (80042ec <XMC_SCU_SetBootMode+0x1c>)
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	6113      	str	r3, [r2, #16]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	50004000 	.word	0x50004000

080042f0 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 80042f8:	4a05      	ldr	r2, [pc, #20]	; (8004310 <XMC_SCU_ReadGPR+0x20>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	330a      	adds	r3, #10
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	685b      	ldr	r3, [r3, #4]
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	50004000 	.word	0x50004000

08004314 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 800431e:	4a06      	ldr	r2, [pc, #24]	; (8004338 <XMC_SCU_WriteGPR+0x24>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	330a      	adds	r3, #10
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	50004000 	.word	0x50004000

0800433c <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8004346:	490a      	ldr	r1, [pc, #40]	; (8004370 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3328      	adds	r3, #40	; 0x28
 800434e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004352:	2001      	movs	r0, #1
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	fa00 f303 	lsl.w	r3, r0, r3
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3328      	adds	r3, #40	; 0x28
 8004360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	50004000 	.word	0x50004000

08004374 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 800437e:	490b      	ldr	r1, [pc, #44]	; (80043ac <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3328      	adds	r3, #40	; 0x28
 8004386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800438a:	2001      	movs	r0, #1
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	fa00 f303 	lsl.w	r3, r0, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	401a      	ands	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3328      	adds	r3, #40	; 0x28
 800439a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	50004000 	.word	0x50004000

080043b0 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80043ba:	4908      	ldr	r1, [pc, #32]	; (80043dc <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80043c4:	4313      	orrs	r3, r2
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 80043c6:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80043ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	50004000 	.word	0x50004000

080043e0 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <XMC_SCU_EnableTemperatureSensor+0x20>)
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <XMC_SCU_EnableTemperatureSensor+0x20>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	50004000 	.word	0x50004000

08004404 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8004408:	4a06      	ldr	r2, [pc, #24]	; (8004424 <XMC_SCU_DisableTemperatureSensor+0x20>)
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <XMC_SCU_DisableTemperatureSensor+0x20>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	50004000 	.word	0x50004000

08004428 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 800442e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	50004000 	.word	0x50004000

08004450 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	50004000 	.word	0x50004000

08004478 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8004482:	f7ff ffd1 	bl	8004428 <XMC_SCU_IsTemperatureSensorEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8004496:	f000 f831 	bl	80044fc <XMC_SCU_IsTemperatureSensorBusy>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 80044a0:	2302      	movs	r3, #2
 80044a2:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 80044a4:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 80044b4:	79fb      	ldrb	r3, [r7, #7]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	50004000 	.word	0x50004000

080044c4 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80044ca:	f7ff ffad 	bl	8004428 <XMC_SCU_IsTemperatureSensorEnabled>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f083 0301 	eor.w	r3, r3, #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 80044da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	e005      	b.n	80044ee <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ec:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 80044ee:	687b      	ldr	r3, [r7, #4]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	50004000 	.word	0x50004000

080044fc <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	50004000 	.word	0x50004000

08004524 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004536:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8004548:	4a08      	ldr	r2, [pc, #32]	; (800456c <XMC_SCU_WriteToRetentionMemory+0x48>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004550:	bf00      	nop
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004554:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f8      	bne.n	8004552 <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	50004000 	.word	0x50004000

08004570 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004580:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8004592:	bf00      	nop
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8004596:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800459a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f8      	bne.n	8004594 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80045a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	50004000 	.word	0x50004000

080045b8 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f000 faf1 	bl	8004ba8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80045c6:	f000 fd7f 	bl	80050c8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	79db      	ldrb	r3, [r3, #7]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80045d2:	f000 ff75 	bl	80054c0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80045d6:	bf00      	nop
 80045d8:	f000 ff60 	bl	800549c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80045dc:	4603      	mov	r3, r0
 80045de:	f083 0301 	eor.w	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f7      	bne.n	80045d8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	7a5b      	ldrb	r3, [r3, #9]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fb6f 	bl	8004cd0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80045f2:	bf00      	nop
 80045f4:	f7ff fdda 	bl	80041ac <XMC_SCU_GetMirrorStatus>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1fa      	bne.n	80045f4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7a1b      	ldrb	r3, [r3, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd0c 	bl	8005020 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7c1b      	ldrb	r3, [r3, #16]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fb7f 	bl	8004d10 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	7c5b      	ldrb	r3, [r3, #17]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fba6 	bl	8004d68 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7c9b      	ldrb	r3, [r3, #18]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb8b 	bl	8004d3c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7cdb      	ldrb	r3, [r3, #19]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fbb2 	bl	8004d94 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	799b      	ldrb	r3, [r3, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8004638:	f000 ffd6 	bl	80055e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800463c:	bf00      	nop
 800463e:	f000 fffb 	bl	8005638 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8004642:	4603      	mov	r3, r0
 8004644:	f083 0301 	eor.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f7      	bne.n	800463e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	78db      	ldrb	r3, [r3, #3]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8004656:	f001 f853 	bl	8005700 <XMC_SCU_CLOCK_DisableSystemPll>
 800465a:	e011      	b.n	8004680 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800465c:	f001 f83e 	bl	80056dc <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8898      	ldrh	r0, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800466c:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004672:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4623      	mov	r3, r4
 800467c:	f001 f852 	bl	8005724 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d103      	bne.n	8004692 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800468a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800468e:	f000 fa8b 	bl	8004ba8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8004692:	f002 fcad 	bl	8006ff0 <SystemCoreClockUpdate>
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bd90      	pop	{r4, r7, pc}
	...

080046a0 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80046a8:	4906      	ldr	r1, [pc, #24]	; (80046c4 <XMC_SCU_TRAP_Enable+0x24>)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <XMC_SCU_TRAP_Enable+0x24>)
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	4013      	ands	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	50004160 	.word	0x50004160

080046c8 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80046d0:	4905      	ldr	r1, [pc, #20]	; (80046e8 <XMC_SCU_TRAP_Disable+0x20>)
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <XMC_SCU_TRAP_Disable+0x20>)
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	50004160 	.word	0x50004160

080046ec <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <XMC_SCU_TRAP_GetStatus+0x14>)
 80046f2:	685b      	ldr	r3, [r3, #4]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	50004160 	.word	0x50004160

08004704 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <XMC_SCU_TRAP_Trigger+0x1c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6113      	str	r3, [r2, #16]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	50004160 	.word	0x50004160

08004724 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60d3      	str	r3, [r2, #12]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	50004160 	.word	0x50004160

08004744 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 800474c:	4905      	ldr	r1, [pc, #20]	; (8004764 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	5000413c 	.word	0x5000413c

08004768 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <XMC_SCU_PARITY_GetStatus+0x14>)
 800476e:	695b      	ldr	r3, [r3, #20]
} 
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	5000413c 	.word	0x5000413c

08004780 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8004788:	4905      	ldr	r1, [pc, #20]	; (80047a0 <XMC_SCU_PARITY_Enable+0x20>)
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <XMC_SCU_PARITY_Enable+0x20>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	5000413c 	.word	0x5000413c

080047a4 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80047ac:	4906      	ldr	r1, [pc, #24]	; (80047c8 <XMC_SCU_PARITY_Disable+0x24>)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <XMC_SCU_PARITY_Disable+0x24>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	4013      	ands	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	5000413c 	.word	0x5000413c

080047cc <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80047d4:	4905      	ldr	r1, [pc, #20]	; (80047ec <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	5000413c 	.word	0x5000413c

080047f0 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80047f8:	4906      	ldr	r1, [pc, #24]	; (8004814 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	43db      	mvns	r3, r3
 8004802:	4013      	ands	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	5000413c 	.word	0x5000413c

08004818 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8004820:	4905      	ldr	r1, [pc, #20]	; (8004838 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	614b      	str	r3, [r1, #20]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	50004074 	.word	0x50004074

0800483c <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8004844:	4906      	ldr	r1, [pc, #24]	; (8004860 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	43db      	mvns	r3, r3
 800484e:	4013      	ands	r3, r2
 8004850:	614b      	str	r3, [r1, #20]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	50004074 	.word	0x50004074

08004864 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0f1b      	lsrs	r3, r3, #28
 8004870:	60bb      	str	r3, [r7, #8]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004878:	60fb      	str	r3, [r7, #12]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	461a      	mov	r2, r3
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8004888:	4413      	add	r3, r2
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	50004410 	.word	0x50004410

080048a0 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0f1b      	lsrs	r3, r3, #28
 80048ac:	60bb      	str	r3, [r7, #8]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048b4:	60fb      	str	r3, [r7, #12]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80048c4:	4413      	add	r3, r2
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	50004414 	.word	0x50004414

080048dc <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0f1b      	lsrs	r3, r3, #28
 80048e8:	60bb      	str	r3, [r7, #8]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048f0:	60fb      	str	r3, [r7, #12]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8004900:	4413      	add	r3, r2
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	5000440c 	.word	0x5000440c

08004924 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800492a:	f000 f839 	bl	80049a0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 800492e:	6038      	str	r0, [r7, #0]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004944:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	e01f      	b.n	8004990 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	0e1b      	lsrs	r3, r3, #24
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	3301      	adds	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	fb02 f203 	mul.w	r2, r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	603b      	str	r3, [r7, #0]
  }

  return (clock_frequency);
 8004990:	683b      	ldr	r3, [r7, #0]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	50004710 	.word	0x50004710

080049a0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80049b2:	f002 fb87 	bl	80070c4 <OSCHP_GetFrequency>
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	e001      	b.n	80049be <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80049bc:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80049be:	687b      	ldr	r3, [r7, #4]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	50004710 	.word	0x50004710
 80049cc:	016e3600 	.word	0x016e3600

080049d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80049d6:	f002 fb75 	bl	80070c4 <OSCHP_GetFrequency>
 80049da:	6078      	str	r0, [r7, #4]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d116      	bne.n	8004a16 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	3301      	adds	r3, #1
 80049f4:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	0e1b      	lsrs	r3, r3, #24
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	fb02 f203 	mul.w	r2, r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	607b      	str	r3, [r7, #4]
  }
  return (clock_frequency);
 8004a16:	687b      	ldr	r3, [r7, #4]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	50004710 	.word	0x50004710

08004a24 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004a2e:	f7ff fb9d 	bl	800416c <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004a32:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	50004600 	.word	0x50004600

08004a50 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	603b      	str	r3, [r7, #0]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8004a5a:	f7ff fb5b 	bl	8004114 <XMC_SCU_CLOCK_GetUsbClockSource>
 8004a5e:	6078      	str	r0, [r7, #4]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d103      	bne.n	8004a70 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004a68:	f7ff ff5c 	bl	8004924 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004a6c:	6038      	str	r0, [r7, #0]
 8004a6e:	e005      	b.n	8004a7c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8004a76:	f7ff ffab 	bl	80049d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8004a7a:	6038      	str	r0, [r7, #0]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8004a84:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	50004600 	.word	0x50004600

08004a98 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004a9e:	f7ff ff41 	bl	8004924 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004aa2:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8004aac:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	50004600 	.word	0x50004600

08004ac0 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	603b      	str	r3, [r7, #0]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8004aca:	f7ff fb31 	bl	8004130 <XMC_SCU_CLOCK_GetWdtClockSource>
 8004ace:	6078      	str	r0, [r7, #4]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad6:	d103      	bne.n	8004ae0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004ad8:	f7ff ff24 	bl	8004924 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004adc:	6038      	str	r0, [r7, #0]
 8004ade:	e00c      	b.n	8004afa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	e006      	b.n	8004afa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d102      	bne.n	8004afa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8004af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af8:	603b      	str	r3, [r7, #0]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8004b00:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	016e3600 	.word	0x016e3600
 8004b14:	50004600 	.word	0x50004600

08004b18 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8004b22:	f7ff fb13 	bl	800414c <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d10d      	bne.n	8004b4c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004b30:	f7ff fef8 	bl	8004924 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004b34:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004b40:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e016      	b.n	8004b7a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004b52:	f7ff fb0b 	bl	800416c <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	e00f      	b.n	8004b7a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d10c      	bne.n	8004b7a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8004b60:	f7ff ff36 	bl	80049d0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8004b64:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004b70:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8004b7a:	687b      	ldr	r3, [r7, #4]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	50004600 	.word	0x50004600

08004b88 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8004b8c:	f7ff fb02 	bl	8004194 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8004b90:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	50004600 	.word	0x50004600

08004ba8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8004bb0:	4906      	ldr	r1, [pc, #24]	; (8004bcc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	50004600 	.word	0x50004600

08004bd0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8004bd8:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	50004600 	.word	0x50004600

08004bf8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8004c00:	4906      	ldr	r1, [pc, #24]	; (8004c1c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	50004600 	.word	0x50004600

08004c20 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8004c2a:	4907      	ldr	r1, [pc, #28]	; (8004c48 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8004c34:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8004c36:	4313      	orrs	r3, r2
 8004c38:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	50004600 	.word	0x50004600

08004c4c <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8004c6c:	e007      	b.n	8004c7e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	60d3      	str	r3, [r2, #12]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	50004710 	.word	0x50004710

08004c90 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004c9a:	bf00      	nop
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8004c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f8      	bne.n	8004c9c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8004caa:	4908      	ldr	r1, [pc, #32]	; (8004ccc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60cb      	str	r3, [r1, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	50004000 	.word	0x50004000
 8004ccc:	50004300 	.word	0x50004300

08004cd0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004cda:	bf00      	nop
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8004cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f8      	bne.n	8004cdc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8004cea:	4908      	ldr	r1, [pc, #32]	; (8004d0c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60cb      	str	r3, [r1, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	50004000 	.word	0x50004000
 8004d0c:	50004300 	.word	0x50004300

08004d10 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8004d18:	4907      	ldr	r1, [pc, #28]	; (8004d38 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	50004600 	.word	0x50004600

08004d3c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004d44:	4907      	ldr	r1, [pc, #28]	; (8004d64 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004d52:	4313      	orrs	r3, r2
 8004d54:	620b      	str	r3, [r1, #32]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	50004600 	.word	0x50004600

08004d68 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8004d70:	4907      	ldr	r1, [pc, #28]	; (8004d90 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	50004600 	.word	0x50004600

08004d94 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004d9c:	4907      	ldr	r1, [pc, #28]	; (8004dbc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004daa:	4313      	orrs	r3, r2
 8004dac:	614b      	str	r3, [r1, #20]
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	50004600 	.word	0x50004600

08004dc0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8004dc8:	4907      	ldr	r1, [pc, #28]	; (8004de8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	618b      	str	r3, [r1, #24]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	50004600 	.word	0x50004600

08004dec <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8004df4:	4907      	ldr	r1, [pc, #28]	; (8004e14 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61cb      	str	r3, [r1, #28]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	50004600 	.word	0x50004600

08004e18 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8004e20:	4907      	ldr	r1, [pc, #28]	; (8004e40 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	50004600 	.word	0x50004600

08004e44 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8004e4c:	4908      	ldr	r1, [pc, #32]	; (8004e70 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8004e4e:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8004e60:	4313      	orrs	r3, r2
 8004e62:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	50004600 	.word	0x50004600

08004e74 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	6053      	str	r3, [r2, #4]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	50004600 	.word	0x50004600

08004e94 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	6093      	str	r3, [r2, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	50004600 	.word	0x50004600

08004eb4 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	50004600 	.word	0x50004600

08004ee0 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f0c <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8004ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004efa:	ee17 3a90 	vmov	r3, s15
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	50004200 	.word	0x50004200
 8004f0c:	3bbe0ded 	.word	0x3bbe0ded

08004f10 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f40 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8004f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f2c:	ee17 3a90 	vmov	r3, s15
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	50004200 	.word	0x50004200
 8004f40:	3cb851ec 	.word	0x3cb851ec

08004f44 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8004f48:	4a06      	ldr	r2, [pc, #24]	; (8004f64 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	f023 0302 	bic.w	r3, r3, #2
 8004f56:	6153      	str	r3, [r2, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	50004710 	.word	0x50004710

08004f68 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8004f6c:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	6153      	str	r3, [r2, #20]
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	50004710 	.word	0x50004710

08004f8c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8004f96:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f043 0310 	orr.w	r3, r3, #16
 8004fac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8004fae:	4914      	ldr	r1, [pc, #80]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8004fc0:	4a0f      	ldr	r2, [pc, #60]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fca:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8004fcc:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8004fe4:	bf00      	nop
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f9      	beq.n	8004fe6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	50004710 	.word	0x50004710

08005004 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 800500c:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	50004710 	.word	0x50004710
 800501c:	00010003 	.word	0x00010003

08005020 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800502a:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005034:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10e      	bne.n	800505a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800503c:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005046:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8005048:	2064      	movs	r0, #100	; 0x64
 800504a:	f7ff f8bb 	bl	80041c4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005058:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800505a:	2064      	movs	r0, #100	; 0x64
 800505c:	f7ff f8b2 	bl	80041c4 <XMC_SCU_lDelay>
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	50004710 	.word	0x50004710

0800506c <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <XMC_SCU_POWER_EnableUsb+0x18>)
 8005072:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005076:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	50004200 	.word	0x50004200

08005088 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <XMC_SCU_POWER_DisableUsb+0x18>)
 800508e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005092:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	50004200 	.word	0x50004200

080050a4 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	50004710 	.word	0x50004710

080050c8 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80050da:	2201      	movs	r2, #1
 80050dc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80050de:	bf00      	nop
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f9      	beq.n	80050e0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80050fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fe:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8005100:	bf00      	nop
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f9      	bne.n	8005102 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	50004200 	.word	0x50004200
 800511c:	50004400 	.word	0x50004400

08005120 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8005126:	2201      	movs	r2, #1
 8005128:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 800512c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005130:	605a      	str	r2, [r3, #4]
}
 8005132:	bf00      	nop
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	50004200 	.word	0x50004200
 8005140:	50004400 	.word	0x50004400

08005144 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8005164:	2300      	movs	r3, #0
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	b2db      	uxtb	r3, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	50004200 	.word	0x50004200
 800517c:	50004400 	.word	0x50004400

08005180 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8005184:	bf00      	nop
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8005188:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f8      	bne.n	8005186 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8005194:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	6153      	str	r3, [r2, #20]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	50004000 	.word	0x50004000
 80051b0:	50004300 	.word	0x50004300

080051b4 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80051b8:	bf00      	nop
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 80051bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f8      	bne.n	80051ba <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6153      	str	r3, [r2, #20]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	50004000 	.word	0x50004000
 80051e4:	50004300 	.word	0x50004300

080051e8 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80051f0:	bf00      	nop
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 80051f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f8      	bne.n	80051f2 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8005200:	4a05      	ldr	r2, [pc, #20]	; (8005218 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6053      	str	r3, [r2, #4]
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	50004000 	.word	0x50004000
 8005218:	50004300 	.word	0x50004300

0800521c <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8005224:	bf00      	nop
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8005228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f8      	bne.n	8005226 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8005234:	4a05      	ldr	r2, [pc, #20]	; (800524c <XMC_SCU_HIB_TriggerEvent+0x30>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6093      	str	r3, [r2, #8]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	50004000 	.word	0x50004000
 800524c:	50004300 	.word	0x50004300

08005250 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005258:	bf00      	nop
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <XMC_SCU_HIB_EnableEvent+0x30>)
 800525c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f8      	bne.n	800525a <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8005268:	4906      	ldr	r1, [pc, #24]	; (8005284 <XMC_SCU_HIB_EnableEvent+0x34>)
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <XMC_SCU_HIB_EnableEvent+0x34>)
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4313      	orrs	r3, r2
 8005272:	60cb      	str	r3, [r1, #12]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	50004000 	.word	0x50004000
 8005284:	50004300 	.word	0x50004300

08005288 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005290:	bf00      	nop
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <XMC_SCU_HIB_DisableEvent+0x34>)
 8005294:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f8      	bne.n	8005292 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80052a0:	4907      	ldr	r1, [pc, #28]	; (80052c0 <XMC_SCU_HIB_DisableEvent+0x38>)
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <XMC_SCU_HIB_DisableEvent+0x38>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	43d2      	mvns	r2, r2
 80052aa:	4013      	ands	r3, r2
 80052ac:	60cb      	str	r3, [r1, #12]
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	50004000 	.word	0x50004000
 80052c0:	50004300 	.word	0x50004300

080052c4 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80052c8:	bf00      	nop
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 80052cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f8      	bne.n	80052ca <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 80052d8:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f043 0310 	orr.w	r3, r3, #16
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	50004000 	.word	0x50004000
 80052f4:	50004300 	.word	0x50004300

080052f8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8005308:	f7ff ffdc 	bl	80052c4 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800531e:	bf00      	nop
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8005322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f8      	bne.n	8005320 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8005340:	e005      	b.n	800534e <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534c:	60d3      	str	r3, [r2, #12]
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	50004000 	.word	0x50004000
 8005360:	50004300 	.word	0x50004300

08005364 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005370:	bf00      	nop
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8005374:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f8      	bne.n	8005372 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8005380:	480c      	ldr	r0, [pc, #48]	; (80053b4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60c3      	str	r3, [r0, #12]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	50004000 	.word	0x50004000
 80053b4:	50004300 	.word	0x50004300

080053b8 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	460a      	mov	r2, r1
 80053c2:	71fb      	strb	r3, [r7, #7]
 80053c4:	4613      	mov	r3, r2
 80053c6:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80053c8:	bf00      	nop
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <XMC_SCU_HIB_SetPinOutputLevel+0x4c>)
 80053cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f8      	bne.n	80053ca <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80053d8:	480b      	ldr	r0, [pc, #44]	; (8005408 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	4013      	ands	r3, r2
                        (level << pin);
 80053ec:	88b9      	ldrh	r1, [r7, #4]
 80053ee:	79fa      	ldrb	r2, [r7, #7]
 80053f0:	fa01 f202 	lsl.w	r2, r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60c3      	str	r3, [r0, #12]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	50004000 	.word	0x50004000
 8005408:	50004300 	.word	0x50004300

0800540c <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005416:	bf00      	nop
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <XMC_SCU_HIB_SetInput0+0x48>)
 800541a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f8      	bne.n	8005418 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <XMC_SCU_HIB_SetInput0+0x4c>)
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005436:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8005438:	e005      	b.n	8005446 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 800543a:	4a07      	ldr	r2, [pc, #28]	; (8005458 <XMC_SCU_HIB_SetInput0+0x4c>)
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <XMC_SCU_HIB_SetInput0+0x4c>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005444:	60d3      	str	r3, [r2, #12]
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	50004000 	.word	0x50004000
 8005458:	50004300 	.word	0x50004300

0800545c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005466:	bf00      	nop
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800546a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f8      	bne.n	8005468 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8005476:	4908      	ldr	r1, [pc, #32]	; (8005498 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	4313      	orrs	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	50004000 	.word	0x50004000
 8005498:	50004300 	.word	0x50004300

0800549c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	50004300 	.word	0x50004300

080054c0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80054c4:	bf00      	nop
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80054c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f8      	bne.n	80054c6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80054de:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80054e0:	bf00      	nop
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80054e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f8      	bne.n	80054e2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80054f0:	4a0d      	ldr	r2, [pc, #52]	; (8005528 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80054f2:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 0308 	orr.w	r3, r3, #8
 80054fa:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80054fc:	bf00      	nop
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005500:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f8      	bne.n	80054fe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800550e:	2208      	movs	r2, #8
 8005510:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8005512:	bf00      	nop
 8005514:	f7fe fe4a 	bl	80041ac <XMC_SCU_GetMirrorStatus>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1fa      	bne.n	8005514 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 800551e:	bf00      	nop
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	50004000 	.word	0x50004000
 8005528:	50004300 	.word	0x50004300

0800552c <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005530:	bf00      	nop
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8005534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f8      	bne.n	8005532 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005540:	4a06      	ldr	r2, [pc, #24]	; (800555c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800554a:	61d3      	str	r3, [r2, #28]
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	50004000 	.word	0x50004000
 800555c:	50004300 	.word	0x50004300

08005560 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005564:	bf00      	nop
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8005568:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f8      	bne.n	8005566 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 800557e:	61d3      	str	r3, [r2, #28]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	50004000 	.word	0x50004000
 8005590:	50004300 	.word	0x50004300

08005594 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005598:	bf00      	nop
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800559c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f8      	bne.n	800559a <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80055a8:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80055b2:	f043 0320 	orr.w	r3, r3, #32
 80055b6:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	50004000 	.word	0x50004000
 80055c8:	50004300 	.word	0x50004300

080055cc <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0301 	and.w	r3, r3, #1
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	50004300 	.word	0x50004300

080055e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80055e8:	b5b0      	push	{r4, r5, r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80055ec:	4a0f      	ldr	r2, [pc, #60]	; (800562c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80055f8:	4d0d      	ldr	r5, [pc, #52]	; (8005630 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8005602:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8005606:	f001 fd5d 	bl	80070c4 <OSCHP_GetFrequency>
 800560a:	4602      	mov	r2, r0
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800560e:	fba3 2302 	umull	r2, r3, r3, r2
 8005612:	0d1b      	lsrs	r3, r3, #20
 8005614:	3b01      	subs	r3, #1
 8005616:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8005618:	4323      	orrs	r3, r4
 800561a:	606b      	str	r3, [r5, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005626:	6053      	str	r3, [r2, #4]
}
 8005628:	bf00      	nop
 800562a:	bdb0      	pop	{r4, r5, r7, pc}
 800562c:	50004710 	.word	0x50004710
 8005630:	50004700 	.word	0x50004700
 8005634:	6b5fca6b 	.word	0x6b5fca6b

08005638 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005644:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	50004710 	.word	0x50004710

08005660 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8005664:	4a05      	ldr	r2, [pc, #20]	; (800567c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800566e:	6053      	str	r3, [r2, #4]
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	50004700 	.word	0x50004700

08005680 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8005684:	4a05      	ldr	r2, [pc, #20]	; (800569c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6053      	str	r3, [r2, #4]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	50004700 	.word	0x50004700

080056a0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80056a4:	4a05      	ldr	r2, [pc, #20]	; (80056bc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6053      	str	r3, [r2, #4]
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	50004700 	.word	0x50004700

080056c0 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	50004700 	.word	0x50004700

080056dc <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80056e0:	4a06      	ldr	r2, [pc, #24]	; (80056fc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	f023 0302 	bic.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	50004710 	.word	0x50004710

08005700 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005704:	4a06      	ldr	r2, [pc, #24]	; (8005720 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	6053      	str	r3, [r2, #4]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	50004710 	.word	0x50004710

08005724 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60ba      	str	r2, [r7, #8]
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	4603      	mov	r3, r0
 8005730:	81fb      	strh	r3, [r7, #14]
 8005732:	460b      	mov	r3, r1
 8005734:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fa87 	bl	8004c4c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800573e:	7b7b      	ldrb	r3, [r7, #13]
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 8084 	bne.w	800584e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8005746:	89fb      	ldrh	r3, [r7, #14]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 800574c:	f001 fcba 	bl	80070c4 <OSCHP_GetFrequency>
 8005750:	4602      	mov	r2, r0
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8005754:	fba3 2302 	umull	r2, r3, r3, r2
 8005758:	0c9b      	lsrs	r3, r3, #18
 800575a:	059b      	lsls	r3, r3, #22
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e002      	b.n	8005766 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8005760:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005764:	613b      	str	r3, [r7, #16]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	fb02 f203 	mul.w	r2, r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	613b      	str	r3, [r7, #16]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4a43      	ldr	r2, [pc, #268]	; (8005888 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	0d9b      	lsrs	r3, r3, #22
 8005782:	617b      	str	r3, [r7, #20]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005784:	4a41      	ldr	r2, [pc, #260]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8005790:	4a3e      	ldr	r2, [pc, #248]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005792:	4b3e      	ldr	r3, [pc, #248]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f043 0310 	orr.w	r3, r3, #16
 800579a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800579c:	493b      	ldr	r1, [pc, #236]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800579e:	4b3b      	ldr	r3, [pc, #236]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80057a4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	3a01      	subs	r2, #1
 80057aa:	0212      	lsls	r2, r2, #8
 80057ac:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80057b4:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80057c0:	4a32      	ldr	r2, [pc, #200]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057c2:	4b32      	ldr	r3, [pc, #200]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ca:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80057cc:	4a2f      	ldr	r2, [pc, #188]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f023 0310 	bic.w	r3, r3, #16
 80057d6:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80057d8:	4a2c      	ldr	r2, [pc, #176]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057da:	4b2c      	ldr	r3, [pc, #176]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80057e4:	bf00      	nop
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f9      	beq.n	80057e6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80057fe:	bf00      	nop
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f9      	bne.n	8005800 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4a21      	ldr	r2, [pc, #132]	; (8005894 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	0d9b      	lsrs	r3, r3, #22
 8005818:	617b      	str	r3, [r7, #20]
    if (kdiv < kdiv_temp)
 800581a:	6a3a      	ldr	r2, [r7, #32]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	429a      	cmp	r2, r3
 8005820:	d202      	bcs.n	8005828 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005822:	6978      	ldr	r0, [r7, #20]
 8005824:	f000 f84a 	bl	80058bc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	0d9b      	lsrs	r3, r3, #22
 8005836:	617b      	str	r3, [r7, #20]
    if (kdiv < kdiv_temp)
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	429a      	cmp	r2, r3
 800583e:	d202      	bcs.n	8005846 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005840:	6978      	ldr	r0, [r7, #20]
 8005842:	f000 f83b 	bl	80058bc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8005846:	6a38      	ldr	r0, [r7, #32]
 8005848:	f000 f838 	bl	80058bc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 800584c:	e015      	b.n	800587a <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800584e:	490f      	ldr	r1, [pc, #60]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800586c:	bf00      	nop
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f9      	beq.n	800586e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 800587a:	bf00      	nop
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	431bde83 	.word	0x431bde83
 8005888:	aaaaaaab 	.word	0xaaaaaaab
 800588c:	50004710 	.word	0x50004710
 8005890:	f08080ff 	.word	0xf08080ff
 8005894:	88888889 	.word	0x88888889
 8005898:	b60b60b7 	.word	0xb60b60b7

0800589c <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80058a0:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058aa:	6053      	str	r3, [r2, #4]
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	50004710 	.word	0x50004710

080058bc <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80058c4:	4908      	ldr	r1, [pc, #32]	; (80058e8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80058d4:	4313      	orrs	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 80058d8:	2032      	movs	r0, #50	; 0x32
 80058da:	f7fe fc73 	bl	80041c4 <XMC_SCU_lDelay>
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	50004710 	.word	0x50004710

080058ec <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
}
 8005902:	4618      	mov	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	50004710 	.word	0x50004710

08005910 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800591e:	e002      	b.n	8005926 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b1f      	cmp	r3, #31
 800593a:	d9f1      	bls.n	8005920 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b20      	cmp	r3, #32
 8005940:	d102      	bne.n	8005948 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	72fb      	strb	r3, [r7, #11]
 8005946:	e006      	b.n	8005956 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8005948:	4906      	ldr	r1, [pc, #24]	; (8005964 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8005952:	2300      	movs	r3, #0
 8005954:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8005956:	7afb      	ldrb	r3, [r7, #11]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000f08 	.word	0x20000f08

08005968 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8005974:	f7fe fc82 	bl	800427c <XMC_SCU_INTERUPT_GetEventStatus>
 8005978:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800597a:	e01c      	b.n	80059b6 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 800598c:	4a0d      	ldr	r2, [pc, #52]	; (80059c4 <XMC_SCU_IRQHandler+0x5c>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005994:	617b      	str	r3, [r7, #20]
      if (event_handler != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80059a0:	2201      	movs	r2, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fc73 	bl	8004294 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80059ae:	e005      	b.n	80059bc <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b1f      	cmp	r3, #31
 80059ba:	d9df      	bls.n	800597c <XMC_SCU_IRQHandler+0x14>
  }
}
 80059bc:	bf00      	nop
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000f08 	.word	0x20000f08

080059c8 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80059d6:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <Endpoint_Write_Stream_LE+0x10c>)
 80059d8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80059dc:	461a      	mov	r2, r3
 80059de:	232c      	movs	r3, #44	; 0x2c
 80059e0:	fb03 f302 	mul.w	r3, r3, r2
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <Endpoint_Write_Stream_LE+0x10c>)
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	61fb      	str	r3, [r7, #28]
	uint16_t Bytes = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	837b      	strh	r3, [r7, #26]
	uint16_t BytesTransfered = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	82fb      	strh	r3, [r7, #22]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	833b      	strh	r3, [r7, #24]
	if (BytesProcessed!=NULL) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d052      	beq.n	8005aa4 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	897a      	ldrh	r2, [r7, #10]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	82fb      	strh	r3, [r7, #22]
	}

	while (Length) {
 8005a0e:	e049      	b.n	8005aa4 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d000      	beq.n	8005a20 <Endpoint_Write_Stream_LE+0x58>
			continue;
 8005a1e:	e041      	b.n	8005aa4 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8005a20:	f7fe f9c6 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d029      	beq.n	8005a7e <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	897b      	ldrh	r3, [r7, #10]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bf28      	it	cs
 8005a3a:	4613      	movcs	r3, r2
 8005a3c:	837b      	strh	r3, [r7, #26]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	461a      	mov	r2, r3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	8afa      	ldrh	r2, [r7, #22]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	8b7b      	ldrh	r3, [r7, #26]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fac0 	bl	8005fdc <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	8b7b      	ldrh	r3, [r7, #26]
 8005a62:	441a      	add	r2, r3
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8005a68:	8afa      	ldrh	r2, [r7, #22]
 8005a6a:	8b7b      	ldrh	r3, [r7, #26]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	82fb      	strh	r3, [r7, #22]
			prev_length = Length;
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	833b      	strh	r3, [r7, #24]
			Length -= Bytes;
 8005a74:	897a      	ldrh	r2, [r7, #10]
 8005a76:	8b7b      	ldrh	r3, [r7, #26]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	817b      	strh	r3, [r7, #10]
 8005a7c:	e012      	b.n	8005aa4 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 8005a7e:	f7fe f91f 	bl	8003cc0 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8afa      	ldrh	r2, [r7, #22]
 8005a8c:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005a8e:	2305      	movs	r3, #5
 8005a90:	e01b      	b.n	8005aca <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005a92:	f7fe f837 	bl	8003b04 <Endpoint_WaitUntilReady>
 8005a96:	4603      	mov	r3, r0
 8005a98:	757b      	strb	r3, [r7, #21]
 8005a9a:	7d7b      	ldrb	r3, [r7, #21]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8005aa0:	7d7b      	ldrb	r3, [r7, #21]
 8005aa2:	e012      	b.n	8005aca <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8005aa4:	897b      	ldrh	r3, [r7, #10]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1b2      	bne.n	8005a10 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <Endpoint_Write_Stream_LE+0x100>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	889b      	ldrh	r3, [r3, #4]
 8005ab4:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8b3a      	ldrh	r2, [r7, #24]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d102      	bne.n	8005ac8 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <Endpoint_Write_Stream_LE+0x110>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000bb0 	.word	0x20000bb0
 8005ad8:	200008b0 	.word	0x200008b0

08005adc <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8005aec:	e00e      	b.n	8005b0c <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4619      	mov	r1, r3
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	700b      	strb	r3, [r1, #0]
		i++;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3ec      	bcc.n	8005aee <SwapCopy+0x12>
	}
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005b2e:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <Endpoint_Write_Stream_BE+0xe4>)
 8005b30:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005b34:	461a      	mov	r2, r3
 8005b36:	232c      	movs	r3, #44	; 0x2c
 8005b38:	fb03 f302 	mul.w	r3, r3, r2
 8005b3c:	4a31      	ldr	r2, [pc, #196]	; (8005c04 <Endpoint_Write_Stream_BE+0xe4>)
 8005b3e:	4413      	add	r3, r2
 8005b40:	3304      	adds	r3, #4
 8005b42:	61fb      	str	r3, [r7, #28]
	uint16_t Bytes = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	837b      	strh	r3, [r7, #26]
	uint16_t BytesTransfered = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	833b      	strh	r3, [r7, #24]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d050      	beq.n	8005bf4 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	897a      	ldrh	r2, [r7, #10]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	833b      	strh	r3, [r7, #24]
	}

	while (Length) {
 8005b62:	e047      	b.n	8005bf4 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d000      	beq.n	8005b74 <Endpoint_Write_Stream_BE+0x54>
			continue;
 8005b72:	e03f      	b.n	8005bf4 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8005b74:	f7fe f91c 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d027      	beq.n	8005bce <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bf28      	it	cs
 8005b8e:	4613      	movcs	r3, r2
 8005b90:	837b      	strh	r3, [r7, #26]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	461a      	mov	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	8b3a      	ldrh	r2, [r7, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	8b7b      	ldrh	r3, [r7, #26]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7ff ff96 	bl	8005adc <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	8b7b      	ldrh	r3, [r7, #26]
 8005bb6:	441a      	add	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8005bbc:	8b3a      	ldrh	r2, [r7, #24]
 8005bbe:	8b7b      	ldrh	r3, [r7, #26]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	833b      	strh	r3, [r7, #24]
			Length -= Bytes;
 8005bc4:	897a      	ldrh	r2, [r7, #10]
 8005bc6:	8b7b      	ldrh	r3, [r7, #26]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	817b      	strh	r3, [r7, #10]
 8005bcc:	e012      	b.n	8005bf4 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 8005bce:	f7fe f877 	bl	8003cc0 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8b3a      	ldrh	r2, [r7, #24]
 8005bdc:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005bde:	2305      	movs	r3, #5
 8005be0:	e00c      	b.n	8005bfc <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005be2:	f7fd ff8f 	bl	8003b04 <Endpoint_WaitUntilReady>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	e003      	b.n	8005bfc <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 8005bf4:	897b      	ldrh	r3, [r7, #10]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1b4      	bne.n	8005b64 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000bb0 	.word	0x20000bb0

08005c08 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	460b      	mov	r3, r1
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005c16:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <Endpoint_Read_Stream_LE+0xec>)
 8005c18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	232c      	movs	r3, #44	; 0x2c
 8005c20:	fb03 f302 	mul.w	r3, r3, r2
 8005c24:	4a33      	ldr	r2, [pc, #204]	; (8005cf4 <Endpoint_Read_Stream_LE+0xec>)
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	61fb      	str	r3, [r7, #28]
	uint16_t Bytes = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	837b      	strh	r3, [r7, #26]
	uint16_t BytesTransfered = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	833b      	strh	r3, [r7, #24]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d053      	beq.n	8005ce2 <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	897a      	ldrh	r2, [r7, #10]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	833b      	strh	r3, [r7, #24]
	}

	while (Length) {
 8005c4a:	e04a      	b.n	8005ce2 <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d000      	beq.n	8005c5c <Endpoint_Read_Stream_LE+0x54>
			continue;
 8005c5a:	e042      	b.n	8005ce2 <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8005c5c:	f7fe f8a8 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02a      	beq.n	8005cbc <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bf28      	it	cs
 8005c70:	4613      	movcs	r3, r2
 8005c72:	837b      	strh	r3, [r7, #26]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8005c74:	8b3a      	ldrh	r2, [r7, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	461a      	mov	r2, r3
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	8b7b      	ldrh	r3, [r7, #26]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f000 f9a5 	bl	8005fdc <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	8b7b      	ldrh	r3, [r7, #26]
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8005caa:	8b3a      	ldrh	r2, [r7, #24]
 8005cac:	8b7b      	ldrh	r3, [r7, #26]
 8005cae:	4413      	add	r3, r2
 8005cb0:	833b      	strh	r3, [r7, #24]
			Length -= Bytes;
 8005cb2:	897a      	ldrh	r2, [r7, #10]
 8005cb4:	8b7b      	ldrh	r3, [r7, #26]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	e012      	b.n	8005ce2 <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8005cbc:	f7fd ffb4 	bl	8003c28 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8b3a      	ldrh	r2, [r7, #24]
 8005cca:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005ccc:	2305      	movs	r3, #5
 8005cce:	e00c      	b.n	8005cea <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005cd0:	f7fd ff18 	bl	8003b04 <Endpoint_WaitUntilReady>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	e003      	b.n	8005cea <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 8005ce2:	897b      	ldrh	r3, [r7, #10]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1b1      	bne.n	8005c4c <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000bb0 	.word	0x20000bb0

08005cf8 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	460b      	mov	r3, r1
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005d06:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <Endpoint_Read_Stream_BE+0xec>)
 8005d08:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	232c      	movs	r3, #44	; 0x2c
 8005d10:	fb03 f302 	mul.w	r3, r3, r2
 8005d14:	4a33      	ldr	r2, [pc, #204]	; (8005de4 <Endpoint_Read_Stream_BE+0xec>)
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	61fb      	str	r3, [r7, #28]
	uint16_t Bytes = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	837b      	strh	r3, [r7, #26]
	uint16_t BytesTransfered = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	833b      	strh	r3, [r7, #24]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d053      	beq.n	8005dd2 <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	897a      	ldrh	r2, [r7, #10]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	833b      	strh	r3, [r7, #24]
	}

	while (Length) {
 8005d3a:	e04a      	b.n	8005dd2 <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d000      	beq.n	8005d4c <Endpoint_Read_Stream_BE+0x54>
			continue;
 8005d4a:	e042      	b.n	8005dd2 <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8005d4c:	f7fe f830 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02a      	beq.n	8005dac <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bf28      	it	cs
 8005d60:	4613      	movcs	r3, r2
 8005d62:	837b      	strh	r3, [r7, #26]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8005d64:	8b3a      	ldrh	r2, [r7, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	461a      	mov	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	8b7b      	ldrh	r3, [r7, #26]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f7ff fead 	bl	8005adc <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	8b7b      	ldrh	r3, [r7, #26]
 8005d88:	1ad2      	subs	r2, r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	8b7b      	ldrh	r3, [r7, #26]
 8005d94:	441a      	add	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8005d9a:	8b3a      	ldrh	r2, [r7, #24]
 8005d9c:	8b7b      	ldrh	r3, [r7, #26]
 8005d9e:	4413      	add	r3, r2
 8005da0:	833b      	strh	r3, [r7, #24]
			Length -= Bytes;
 8005da2:	897a      	ldrh	r2, [r7, #10]
 8005da4:	8b7b      	ldrh	r3, [r7, #26]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	817b      	strh	r3, [r7, #10]
 8005daa:	e012      	b.n	8005dd2 <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8005dac:	f7fd ff3c 	bl	8003c28 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d004      	beq.n	8005dc0 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8b3a      	ldrh	r2, [r7, #24]
 8005dba:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005dbc:	2305      	movs	r3, #5
 8005dbe:	e00c      	b.n	8005dda <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005dc0:	f7fd fea0 	bl	8003b04 <Endpoint_WaitUntilReady>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	e003      	b.n	8005dda <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1b1      	bne.n	8005d3c <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000bb0 	.word	0x20000bb0

08005de8 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8005df4:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <Endpoint_Write_Control_Stream_LE+0x6c>)
 8005df6:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 8005df8:	e024      	b.n	8005e44 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11d      	bne.n	8005e44 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	e002      	b.n	8005e1e <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	817b      	strh	r3, [r7, #10]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	897a      	ldrh	r2, [r7, #10]
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f8d8 	bl	8005fdc <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8005e38:	887a      	ldrh	r2, [r7, #2]
 8005e3a:	897b      	ldrh	r3, [r7, #10]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 8005e40:	f7fd ff3e 	bl	8003cc0 <Endpoint_ClearIN>
	while (Length) {
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1d7      	bne.n	8005dfa <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000bb4 	.word	0x20000bb4

08005e58 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ffbd 	bl	8005de8 <Endpoint_Write_Control_Stream_LE>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <Endpoint_Read_Control_Stream_LE+0x64>)
 8005e86:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 8005e88:	e020      	b.n	8005ecc <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	887b      	ldrh	r3, [r7, #2]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bf28      	it	cs
 8005ea2:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8005ea4:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	897a      	ldrh	r2, [r7, #10]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f894 	bl	8005fdc <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	897b      	ldrh	r3, [r7, #10]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8005ec0:	887a      	ldrh	r2, [r7, #2]
 8005ec2:	897b      	ldrh	r3, [r7, #10]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8005ec8:	f7fd feae 	bl	8003c28 <Endpoint_ClearOUT>
	while (Length) {
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1db      	bne.n	8005e8a <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000bb4 	.word	0x20000bb4

08005ee0 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8005eec:	887b      	ldrh	r3, [r7, #2]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ffc1 	bl	8005e78 <Endpoint_Read_Control_Stream_LE>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	6039      	str	r1, [r7, #0]
 8005f0a:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005f0c:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <Endpoint_Null_Stream+0xd8>)
 8005f0e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005f12:	461a      	mov	r2, r3
 8005f14:	232c      	movs	r3, #44	; 0x2c
 8005f16:	fb03 f302 	mul.w	r3, r3, r2
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <Endpoint_Null_Stream+0xd8>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	617b      	str	r3, [r7, #20]
		uint16_t Bytes = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	827b      	strh	r3, [r7, #18]
		uint16_t BytesTransfered = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	823b      	strh	r3, [r7, #16]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d04b      	beq.n	8005fc8 <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	823b      	strh	r3, [r7, #16]
		}

		while (Length) {
 8005f40:	e042      	b.n	8005fc8 <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d000      	beq.n	8005f52 <Endpoint_Null_Stream+0x52>
				continue;
 8005f50:	e03a      	b.n	8005fc8 <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 8005f52:	f7fd ff2d 	bl	8003db0 <Endpoint_IsReadWriteAllowed>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d022      	beq.n	8005fa2 <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf28      	it	cs
 8005f6c:	4613      	movcs	r3, r2
 8005f6e:	827b      	strh	r3, [r7, #18]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	4413      	add	r3, r2
 8005f7a:	8a7a      	ldrh	r2, [r7, #18]
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fd5c 	bl	8007a3c <memset>
				ep->InBytesAvailable += Bytes;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	8a7b      	ldrh	r3, [r7, #18]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 8005f90:	8a3a      	ldrh	r2, [r7, #16]
 8005f92:	8a7b      	ldrh	r3, [r7, #18]
 8005f94:	4413      	add	r3, r2
 8005f96:	823b      	strh	r3, [r7, #16]
				Length -= Bytes;
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	8a7b      	ldrh	r3, [r7, #18]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	80fb      	strh	r3, [r7, #6]
 8005fa0:	e012      	b.n	8005fc8 <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 8005fa2:	f7fd fe8d 	bl	8003cc0 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	8a3a      	ldrh	r2, [r7, #16]
 8005fb0:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005fb2:	2305      	movs	r3, #5
 8005fb4:	e00c      	b.n	8005fd0 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005fb6:	f7fd fda5 	bl	8003b04 <Endpoint_WaitUntilReady>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	e003      	b.n	8005fd0 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1b9      	bne.n	8005f42 <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000bb0 	.word	0x20000bb0

08005fdc <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8005fdc:	0913      	lsrs	r3, r2, #4
 8005fde:	d011      	beq.n	8006004 <thumb2_memcpy+0x28>
 8005fe0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005fe4:	f840 cb04 	str.w	ip, [r0], #4
 8005fe8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005fec:	f840 cb04 	str.w	ip, [r0], #4
 8005ff0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ff4:	f840 cb04 	str.w	ip, [r0], #4
 8005ff8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ffc:	f840 cb04 	str.w	ip, [r0], #4
 8006000:	3b01      	subs	r3, #1
 8006002:	d1ed      	bne.n	8005fe0 <thumb2_memcpy+0x4>
 8006004:	f012 030f 	ands.w	r3, r2, #15
 8006008:	d005      	beq.n	8006016 <thumb2_memcpy+0x3a>
 800600a:	f811 cb01 	ldrb.w	ip, [r1], #1
 800600e:	f800 cb01 	strb.w	ip, [r0], #1
 8006012:	3b01      	subs	r3, #1
 8006014:	d1f9      	bne.n	800600a <thumb2_memcpy+0x2e>
 8006016:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8006018:	bf00      	nop

0800601a <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
 8006026:	4613      	mov	r3, r2
 8006028:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4618      	mov	r0, r3
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3204      	adds	r2, #4
 800603e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	21f8      	movs	r1, #248	; 0xf8
 800604c:	fa01 f303 	lsl.w	r3, r1, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	ea02 0103 	and.w	r1, r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	1d02      	adds	r2, r0, #4
 800605a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4618      	mov	r0, r3
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3204      	adds	r2, #4
 8006072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006076:	78b9      	ldrb	r1, [r7, #2]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	ea42 0103 	orr.w	r1, r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	1d02      	adds	r2, r0, #4
 800608c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
 80060a8:	4613      	mov	r3, r2
 80060aa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	2103      	movs	r1, #3
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	401a      	ands	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80060c6:	78b9      	ldrb	r1, [r7, #2]
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	460b      	mov	r3, r1
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80060f2:	7afb      	ldrb	r3, [r7, #11]
 80060f4:	089b      	lsrs	r3, r3, #2
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4618      	mov	r0, r3
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	089b      	lsrs	r3, r3, #2
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3204      	adds	r2, #4
 8006106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	21f8      	movs	r1, #248	; 0xf8
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	ea02 0103 	and.w	r1, r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1d02      	adds	r2, r0, #4
 8006122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	2103      	movs	r1, #3
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <XMC_GPIO_Init+0x13c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <XMC_GPIO_Init+0x68>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a37      	ldr	r2, [pc, #220]	; (8006224 <XMC_GPIO_Init+0x140>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10a      	bne.n	8006162 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	2101      	movs	r1, #1
 8006154:	fa01 f303 	lsl.w	r3, r1, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	401a      	ands	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	661a      	str	r2, [r3, #96]	; 0x60
 8006160:	e03c      	b.n	80061dc <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	409a      	lsls	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	08db      	lsrs	r3, r3, #3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	4618      	mov	r0, r3
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3210      	adds	r2, #16
 8006182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	2107      	movs	r1, #7
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	ea02 0103 	and.w	r1, r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f100 0210 	add.w	r2, r0, #16
 80061a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	4618      	mov	r0, r3
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3210      	adds	r2, #16
 80061b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7a1b      	ldrb	r3, [r3, #8]
 80061c0:	4619      	mov	r1, r3
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	ea42 0103 	orr.w	r1, r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f100 0210 	add.w	r2, r0, #16
 80061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80061dc:	7afb      	ldrb	r3, [r7, #11]
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4618      	mov	r0, r3
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3204      	adds	r2, #4
 80061f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	ea42 0103 	orr.w	r1, r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1d02      	adds	r2, r0, #4
 800620e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	48028e00 	.word	0x48028e00
 8006224:	48028f00 	.word	0x48028f00

08006228 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
 8006234:	4613      	mov	r3, r2
 8006236:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	08db      	lsrs	r3, r3, #3
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4618      	mov	r0, r3
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3210      	adds	r2, #16
 800624c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	2107      	movs	r1, #7
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	ea02 0103 	and.w	r1, r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f100 0210 	add.w	r2, r0, #16
 800626a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4618      	mov	r0, r3
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	08db      	lsrs	r3, r3, #3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3210      	adds	r2, #16
 8006282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006286:	78b9      	ldrb	r1, [r7, #2]
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	ea42 0103 	orr.w	r1, r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f100 0210 	add.w	r2, r0, #16
 800629e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <XMC_CCU4_StartPrescaler>:
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <XMC_CCU4_SLICE_SetDitherCompareValue>:
 *
  * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint8_t comp_val)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->DITS = comp_val;
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <XMC_CCU4_lAssertReset>:
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a11      	ldr	r2, [pc, #68]	; (800633c <XMC_CCU4_lAssertReset+0x50>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <XMC_CCU4_lAssertReset+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80062fc:	2004      	movs	r0, #4
 80062fe:	f7fe fab1 	bl	8004864 <XMC_SCU_RESET_AssertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}
 8006302:	e016      	b.n	8006332 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU41)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <XMC_CCU4_lAssertReset+0x54>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d103      	bne.n	8006314 <XMC_CCU4_lAssertReset+0x28>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800630c:	2008      	movs	r0, #8
 800630e:	f7fe faa9 	bl	8004864 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8006312:	e00e      	b.n	8006332 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU42)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <XMC_CCU4_lAssertReset+0x58>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d103      	bne.n	8006324 <XMC_CCU4_lAssertReset+0x38>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800631c:	2010      	movs	r0, #16
 800631e:	f7fe faa1 	bl	8004864 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8006322:	e006      	b.n	8006332 <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU43)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <XMC_CCU4_lAssertReset+0x5c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d102      	bne.n	8006332 <XMC_CCU4_lAssertReset+0x46>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 800632c:	4807      	ldr	r0, [pc, #28]	; (800634c <XMC_CCU4_lAssertReset+0x60>)
 800632e:	f7fe fa99 	bl	8004864 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	4000c000 	.word	0x4000c000
 8006340:	40010000 	.word	0x40010000
 8006344:	40014000 	.word	0x40014000
 8006348:	48004000 	.word	0x48004000
 800634c:	10000001 	.word	0x10000001

08006350 <XMC_CCU4_lDeassertReset>:

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <XMC_CCU4_lDeassertReset+0x50>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d103      	bne.n	8006368 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8006360:	2004      	movs	r0, #4
 8006362:	f7fe fa9d 	bl	80048a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8006366:	e016      	b.n	8006396 <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU41)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a0e      	ldr	r2, [pc, #56]	; (80063a4 <XMC_CCU4_lDeassertReset+0x54>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <XMC_CCU4_lDeassertReset+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8006370:	2008      	movs	r0, #8
 8006372:	f7fe fa95 	bl	80048a0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8006376:	e00e      	b.n	8006396 <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU42)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <XMC_CCU4_lDeassertReset+0x58>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <XMC_CCU4_lDeassertReset+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8006380:	2010      	movs	r0, #16
 8006382:	f7fe fa8d 	bl	80048a0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8006386:	e006      	b.n	8006396 <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU43)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a08      	ldr	r2, [pc, #32]	; (80063ac <XMC_CCU4_lDeassertReset+0x5c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d102      	bne.n	8006396 <XMC_CCU4_lDeassertReset+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8006390:	4807      	ldr	r0, [pc, #28]	; (80063b0 <XMC_CCU4_lDeassertReset+0x60>)
 8006392:	f7fe fa85 	bl	80048a0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	4000c000 	.word	0x4000c000
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40014000 	.word	0x40014000
 80063ac:	48004000 	.word	0x48004000
 80063b0:	10000001 	.word	0x10000001

080063b4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80063bc:	2010      	movs	r0, #16
 80063be:	f7fe fd59 	bl	8004e74 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ffc4 	bl	8006350 <XMC_CCU4_lDeassertReset>
#endif
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff87 	bl	80062ec <XMC_CCU4_lAssertReset>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff ffde 	bl	80063b4 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff58 	bl	80062ae <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800640a:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	039b      	lsls	r3, r3, #14
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	601a      	str	r2, [r3, #0]
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800643c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <XMC_CCU4_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	43db      	mvns	r3, r3
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4013      	ands	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	795b      	ldrb	r3, [r3, #5]
 80064a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	051a      	lsls	r2, r3, #20
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	791b      	ldrb	r3, [r3, #4]
 80064b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	795b      	ldrb	r3, [r3, #5]
 80064c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	795b      	ldrb	r3, [r3, #5]
 80064d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	795b      	ldrb	r3, [r3, #5]
 8006516:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800651a:	b2db      	uxtb	r3, r3
 800651c:	051a      	lsls	r2, r3, #20
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	791b      	ldrb	r3, [r3, #4]
 8006536:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
 800655a:	4613      	mov	r3, r2
 800655c:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	60bb      	str	r3, [r7, #8]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8006580:	78bb      	ldrb	r3, [r7, #2]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d104      	bne.n	8006590 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	e003      	b.n	8006598 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006596:	60bb      	str	r3, [r7, #8]
  }
  
  slice->TC = tc;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	615a      	str	r2, [r3, #20]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
 80065b6:	4613      	mov	r3, r2
 80065b8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 030c 	bic.w	r3, r3, #12
 80065c6:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	60fb      	str	r3, [r7, #12]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 80065e6:	78bb      	ldrb	r3, [r7, #2]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800661a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	031b      	lsls	r3, r3, #12
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	70fb      	strb	r3, [r7, #3]
 800664a:	460b      	mov	r3, r1
 800664c:	70bb      	strb	r3, [r7, #2]
 800664e:	4613      	mov	r3, r2
 8006650:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	60bb      	str	r3, [r7, #8]
  cmc = slice->CMC;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006664:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	049b      	lsls	r3, r3, #18
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  slice->CMC = cmc;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8006676:	78bb      	ldrb	r3, [r7, #2]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d104      	bne.n	8006686 <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	e003      	b.n	800668e <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800668c:	60bb      	str	r3, [r7, #8]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 800668e:	787b      	ldrb	r3, [r7, #1]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	e003      	b.n	80066a6 <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80066a4:	60bb      	str	r3, [r7, #8]
  }
  
  slice->TC = tc;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	615a      	str	r2, [r3, #20]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80066d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	039b      	lsls	r3, r3, #14
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006706:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	605a      	str	r2, [r3, #4]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <XMC_CCU4_SLICE_Capture0Config>:

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800673c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	605a      	str	r2, [r3, #4]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006772:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	019b      	lsls	r3, r3, #6
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067a8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067da:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
 8006802:	4613      	mov	r3, r2
 8006804:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006812:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681a:	60fb      	str	r3, [r7, #12]
  slice->CMC = cmc;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	60bb      	str	r3, [r7, #8]

  if (synch_with_pwm == (bool) true)
 8006828:	78bb      	ldrb	r3, [r7, #2]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	e003      	b.n	8006840 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800683e:	60bb      	str	r3, [r7, #8]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d104      	bne.n	8006850 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	e003      	b.n	8006858 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006856:	60bb      	str	r3, [r7, #8]
  }
  
  slice->TC = tc;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	615a      	str	r2, [r3, #20]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006882:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	049b      	lsls	r3, r3, #18
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006896:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80068aa:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	05db      	lsls	r3, r3, #23
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068be:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	061b      	lsls	r3, r3, #24
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80068d2:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	06db      	lsls	r3, r3, #27
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068e6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	075b      	lsls	r3, r3, #29
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068fa:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800690e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	601a      	str	r2, [r3, #0]
#endif
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	460b      	mov	r3, r1
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	3b01      	subs	r3, #1
 8006940:	74bb      	strb	r3, [r7, #18]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8006948:	7cbb      	ldrb	r3, [r7, #18]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3310      	adds	r3, #16
 8006950:	74fb      	strb	r3, [r7, #19]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	2203      	movs	r2, #3
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43db      	mvns	r3, r3
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4013      	ands	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->edge) << pos;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	461a      	mov	r2, r3
 8006968:	7cfb      	ldrb	r3, [r7, #19]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8006974:	7cbb      	ldrb	r3, [r7, #18]
 8006976:	3316      	adds	r3, #22
 8006978:	74fb      	strb	r3, [r7, #19]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	2201      	movs	r2, #1
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4013      	ands	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->level) << pos;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	789b      	ldrb	r3, [r3, #2]
 800698e:	461a      	mov	r2, r3
 8006990:	7cfb      	ldrb	r3, [r7, #19]
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800699c:	7cbb      	ldrb	r3, [r7, #18]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	3319      	adds	r3, #25
 80069a4:	74fb      	strb	r3, [r7, #19]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	2203      	movs	r2, #3
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4013      	ands	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->duration) << pos;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	78db      	ldrb	r3, [r3, #3]
 80069ba:	461a      	mov	r2, r3
 80069bc:	7cfb      	ldrb	r3, [r7, #19]
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80069c8:	7cbb      	ldrb	r3, [r7, #18]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	74fb      	strb	r3, [r7, #19]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80069ce:	7cfb      	ldrb	r3, [r7, #19]
 80069d0:	220f      	movs	r2, #15
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43db      	mvns	r3, r3
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4013      	ands	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	601a      	str	r2, [r3, #0]
#endif
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	72bb      	strb	r3, [r7, #10]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 8006a18:	7abb      	ldrb	r3, [r7, #10]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	72fb      	strb	r3, [r7, #11]

  ins = slice->INS;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	220f      	movs	r2, #15
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4013      	ands	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  ins |= ((uint32_t) input) << pos;
 8006a34:	78ba      	ldrb	r2, [r7, #2]
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  slice->INS = ins;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	601a      	str	r2, [r3, #0]
#endif
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <XMC_CCU4_SLICE_SetTimerRepeatMode>:

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f023 0202 	bic.w	r2, r3, #2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 8006a72:	e005      	b.n	8006a80 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f043 0202 	orr.w	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	615a      	str	r2, [r3, #20]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <XMC_CCU4_SLICE_SetTimerCountingMode>:

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8006aaa:	e005      	b.n	8006ab8 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f043 0201 	orr.w	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	615a      	str	r2, [r3, #20]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <XMC_CCU4_SLICE_GetCaptureRegisterValue>:

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	331c      	adds	r3, #28
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	685b      	ldr	r3, [r3, #4]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	460b      	mov	r3, r1
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	72fb      	strb	r3, [r7, #11]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	753b      	strb	r3, [r7, #20]

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75bb      	strb	r3, [r7, #22]
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 8006b0a:	2304      	movs	r3, #4
 8006b0c:	75fb      	strb	r3, [r7, #23]
 8006b0e:	e00b      	b.n	8006b28 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d104      	bne.n	8006b20 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8006b16:	2302      	movs	r3, #2
 8006b18:	75bb      	strb	r3, [r7, #22]
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	75fb      	strb	r3, [r7, #23]
 8006b1e:	e003      	b.n	8006b28 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
    }
    else
    {
      start = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	75bb      	strb	r3, [r7, #22]
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8006b24:	2302      	movs	r3, #2
 8006b26:	75fb      	strb	r3, [r7, #23]
    }
  }

  for(i=start; i < end; i++)
 8006b28:	7dbb      	ldrb	r3, [r7, #22]
 8006b2a:	757b      	strb	r3, [r7, #21]
 8006b2c:	e017      	b.n	8006b5e <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 8006b2e:	7d7b      	ldrb	r3, [r7, #21]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	331c      	adds	r3, #28
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
    {
      *val_ptr = slice->CV[i];
 8006b42:	7d7b      	ldrb	r3, [r7, #21]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	331c      	adds	r3, #28
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
      retval = XMC_CCU4_STATUS_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	753b      	strb	r3, [r7, #20]
      break;
 8006b56:	e006      	b.n	8006b66 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
  for(i=start; i < end; i++)
 8006b58:	7d7b      	ldrb	r3, [r7, #21]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	757b      	strb	r3, [r7, #21]
 8006b5e:	7d7a      	ldrb	r2, [r7, #21]
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d3e3      	bcc.n	8006b2e <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
    }
  }

  return retval;
 8006b66:	7d3b      	ldrb	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <XMC_CCU4_GetCapturedValueFromFifo>:

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	60bb      	str	r3, [r7, #8]

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	0d1b      	lsrs	r3, r3, #20
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d002      	beq.n	8006b9e <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
  {
    cap = -1;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b9c:	60bb      	str	r3, [r7, #8]
  }

  return (cap);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	70fb      	strb	r3, [r7, #3]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70bb      	strb	r3, [r7, #2]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	707b      	strb	r3, [r7, #1]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8006bd2:	60fb      	str	r3, [r7, #12]

  if ((bool) true == period_dither)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <XMC_CCU4_SLICE_EnableDithering+0x36>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006be0:	60fb      	str	r3, [r7, #12]
  }
  if ((bool) true == duty_dither)
 8006be2:	78bb      	ldrb	r3, [r7, #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <XMC_CCU4_SLICE_EnableDithering+0x44>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bee:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	615a      	str	r2, [r3, #20]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 8006bf6:	787b      	ldrb	r3, [r7, #1]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fb67 	bl	80062ce <XMC_CCU4_SLICE_SetDitherCompareValue>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <XMC_CCU4_SLICE_SetPrescaler>:

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c20:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
 8006c50:	4613      	mov	r3, r2
 8006c52:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c5a:	617b      	str	r3, [r7, #20]
  
  switch(event)
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	2b09      	cmp	r3, #9
 8006c60:	d82c      	bhi.n	8006cbc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c9b 	.word	0x08006c9b
 8006c74:	08006c9b 	.word	0x08006c9b
 8006c78:	08006cbd 	.word	0x08006cbd
 8006c7c:	08006cbd 	.word	0x08006cbd
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cb1 	.word	0x08006cb1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8006c90:	2303      	movs	r3, #3
 8006c92:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
      break;
 8006c98:	e016      	b.n	8006cc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	60fb      	str	r3, [r7, #12]
      break;
 8006ca2:	e011      	b.n	8006cc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8006ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ca8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8006caa:	2308      	movs	r3, #8
 8006cac:	60fb      	str	r3, [r7, #12]
      break;
 8006cae:	e00b      	b.n	8006cc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8006cb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cb4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	60fb      	str	r3, [r7, #12]
      break;
 8006cba:	e005      	b.n	8006cc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8006cbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cc0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	60fb      	str	r3, [r7, #12]
      break;
 8006cc6:	bf00      	nop
  }
  
  srs &= ~mask; 
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
  srs |= (uint32_t)sr << pos;
 8006cd2:	78ba      	ldrb	r2, [r7, #2]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
  slice->SRS = srs;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <XMC_CCU4_SLICE_SetPassiveLevel>:

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	60fb      	str	r3, [r7, #12]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
  psl |= (uint32_t) level;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e003      	b.n	8006d3e <delay+0x16>
  {
    __NOP();
 8006d36:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3f7      	bcc.n	8006d36 <delay+0xe>
  }
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8006d54:	b598      	push	{r3, r4, r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8006d58:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <SystemInit+0x20>)
 8006d5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006d5e:	4614      	mov	r4, r2
 8006d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8006d66:	f000 f807 	bl	8006d78 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8006d6a:	f7f9 fdf7 	bl	800095c <SystemCoreClockSetup>
}
 8006d6e:	bf00      	nop
 8006d70:	bd98      	pop	{r3, r4, r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000ffc4 	.word	0x2000ffc4

08006d78 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006d7e:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <SystemCoreSetup+0x64>)
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <SystemCoreSetup+0x68>)
 8006d84:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8006d8a:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <SystemCoreSetup+0x64>)
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <SystemCoreSetup+0x64>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8006d9c:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <SystemCoreSetup+0x64>)
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <SystemCoreSetup+0x64>)
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f023 0308 	bic.w	r3, r3, #8
 8006da6:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <SystemCoreSetup+0x6c>)
 8006daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dae:	3314      	adds	r3, #20
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f023 030f 	bic.w	r3, r3, #15
 8006dba:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f043 0303 	orr.w	r3, r3, #3
 8006dc2:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <SystemCoreSetup+0x6c>)
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	3314      	adds	r3, #20
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000ed00 	.word	0xe000ed00
 8006de0:	08000000 	.word	0x08000000
 8006de4:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006dec:	4b75      	ldr	r3, [pc, #468]	; (8006fc4 <SystemCoreSetup+0x24c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10c      	bne.n	8006e12 <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8006df8:	4a72      	ldr	r2, [pc, #456]	; (8006fc4 <SystemCoreSetup+0x24c>)
 8006dfa:	4b72      	ldr	r3, [pc, #456]	; (8006fc4 <SystemCoreSetup+0x24c>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006e04:	bf00      	nop
 8006e06:	4b6f      	ldr	r3, [pc, #444]	; (8006fc4 <SystemCoreSetup+0x24c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f9      	beq.n	8006e06 <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006e12:	4b6d      	ldr	r3, [pc, #436]	; (8006fc8 <SystemCoreSetup+0x250>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8006e1e:	4a6a      	ldr	r2, [pc, #424]	; (8006fc8 <SystemCoreSetup+0x250>)
 8006e20:	4b69      	ldr	r3, [pc, #420]	; (8006fc8 <SystemCoreSetup+0x250>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e28:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8006e2a:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8006e2e:	f7ff ff7b 	bl	8006d28 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8006e32:	4a66      	ldr	r2, [pc, #408]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e34:	4b65      	ldr	r3, [pc, #404]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e3c:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8006e3e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006e42:	f7ff ff71 	bl	8006d28 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006e46:	4a61      	ldr	r2, [pc, #388]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e48:	4b60      	ldr	r3, [pc, #384]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e50:	f023 0302 	bic.w	r3, r3, #2
 8006e54:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8006e56:	4b5e      	ldr	r3, [pc, #376]	; (8006fd0 <SystemCoreSetup+0x258>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d029      	beq.n	8006eb6 <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8006e62:	4a5b      	ldr	r2, [pc, #364]	; (8006fd0 <SystemCoreSetup+0x258>)
 8006e64:	4b5a      	ldr	r3, [pc, #360]	; (8006fd0 <SystemCoreSetup+0x258>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006e6c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006e70:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8006e72:	f000 f927 	bl	80070c4 <OSCHP_GetFrequency>
 8006e76:	4602      	mov	r2, r0
 8006e78:	4b56      	ldr	r3, [pc, #344]	; (8006fd4 <SystemCoreSetup+0x25c>)
 8006e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7e:	0d1b      	lsrs	r3, r3, #20
 8006e80:	3b01      	subs	r3, #1
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	4952      	ldr	r1, [pc, #328]	; (8006fd0 <SystemCoreSetup+0x258>)
 8006e86:	4a52      	ldr	r2, [pc, #328]	; (8006fd0 <SystemCoreSetup+0x258>)
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8006e8e:	4a4f      	ldr	r2, [pc, #316]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e90:	4b4e      	ldr	r3, [pc, #312]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006e9a:	4a4c      	ldr	r2, [pc, #304]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e9c:	4b4b      	ldr	r3, [pc, #300]	; (8006fcc <SystemCoreSetup+0x254>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ea4:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8006ea6:	bf00      	nop
 8006ea8:	4b48      	ldr	r3, [pc, #288]	; (8006fcc <SystemCoreSetup+0x254>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006eb0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006eb4:	d1f8      	bne.n	8006ea8 <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006eb6:	4a45      	ldr	r2, [pc, #276]	; (8006fcc <SystemCoreSetup+0x254>)
 8006eb8:	4b44      	ldr	r3, [pc, #272]	; (8006fcc <SystemCoreSetup+0x254>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8006ec2:	4a42      	ldr	r2, [pc, #264]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ec4:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f043 0310 	orr.w	r3, r3, #16
 8006ecc:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006ece:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ed0:	4a41      	ldr	r2, [pc, #260]	; (8006fd8 <SystemCoreSetup+0x260>)
 8006ed2:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006ed4:	4a3d      	ldr	r2, [pc, #244]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ede:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006ee0:	4a3a      	ldr	r2, [pc, #232]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ee2:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f023 0310 	bic.w	r3, r3, #16
 8006eea:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <SystemCoreSetup+0x254>)
 8006eee:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <SystemCoreSetup+0x254>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ef6:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006ef8:	bf00      	nop
 8006efa:	4b34      	ldr	r3, [pc, #208]	; (8006fcc <SystemCoreSetup+0x254>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f9      	beq.n	8006efa <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006f06:	4a31      	ldr	r2, [pc, #196]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f08:	4b30      	ldr	r3, [pc, #192]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006f12:	bf00      	nop
 8006f14:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f9      	bne.n	8006f14 <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8006f20:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2a:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8006f2c:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8006f32:	4b2a      	ldr	r3, [pc, #168]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8006f3e:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <SystemCoreSetup+0x264>)
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006f50:	4a1e      	ldr	r2, [pc, #120]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f52:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5a:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f5e:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <SystemCoreSetup+0x268>)
 8006f60:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8006f62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006f66:	f7ff fedf 	bl	8006d28 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006f6a:	bf00      	nop
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f9      	beq.n	8006f6c <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006f78:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <SystemCoreSetup+0x26c>)
 8006f7c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8006f7e:	f241 1094 	movw	r0, #4500	; 0x1194
 8006f82:	f7ff fed1 	bl	8006d28 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006f86:	bf00      	nop
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f9      	beq.n	8006f88 <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006f94:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <SystemCoreSetup+0x254>)
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <SystemCoreSetup+0x270>)
 8006f98:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8006f9a:	f241 7070 	movw	r0, #6000	; 0x1770
 8006f9e:	f7ff fec3 	bl	8006d28 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006fa2:	bf00      	nop
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <SystemCoreSetup+0x254>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f9      	beq.n	8006fa4 <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <SystemCoreSetup+0x274>)
 8006fb2:	2205      	movs	r2, #5
 8006fb4:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <SystemCoreSetup+0x264>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006fbc:	f000 f818 	bl	8006ff0 <SystemCoreClockUpdate>
}
 8006fc0:	bf00      	nop
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	50004200 	.word	0x50004200
 8006fc8:	50004400 	.word	0x50004400
 8006fcc:	50004710 	.word	0x50004710
 8006fd0:	50004700 	.word	0x50004700
 8006fd4:	6b5fca6b 	.word	0x6b5fca6b
 8006fd8:	01134f00 	.word	0x01134f00
 8006fdc:	50004600 	.word	0x50004600
 8006fe0:	01074f00 	.word	0x01074f00
 8006fe4:	01044f00 	.word	0x01044f00
 8006fe8:	01034f00 	.word	0x01034f00
 8006fec:	50004160 	.word	0x50004160

08006ff0 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8006ff6:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <SystemCoreClockUpdate+0xc4>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d03e      	beq.n	8007080 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8007002:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800700e:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <SystemCoreClockUpdate+0xcc>)
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	e002      	b.n	800701a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8007014:	f000 f856 	bl	80070c4 <OSCHP_GetFrequency>
 8007018:	6038      	str	r0, [r7, #0]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800701a:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d020      	beq.n	8007068 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	0e1b      	lsrs	r3, r3, #24
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	3301      	adds	r3, #1
 8007032:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8007034:	4b20      	ldr	r3, [pc, #128]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	3301      	adds	r3, #1
 8007040:	60bb      	str	r3, [r7, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	fb02 f303 	mul.w	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	fb02 f303 	mul.w	r3, r2, r3
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	e00d      	b.n	8007084 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8007068:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <SystemCoreClockUpdate+0xc8>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	3301      	adds	r3, #1
 8007072:	60fb      	str	r3, [r7, #12]
      
      temp = (temp / kdiv);
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	e001      	b.n	8007084 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <SystemCoreClockUpdate+0xcc>)
 8007082:	603b      	str	r3, [r7, #0]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <SystemCoreClockUpdate+0xc4>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	3301      	adds	r3, #1
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	603b      	str	r3, [r7, #0]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <SystemCoreClockUpdate+0xc4>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	3301      	adds	r3, #1
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a4:	603b      	str	r3, [r7, #0]

  SystemCoreClock = temp;
 80070a6:	4a06      	ldr	r2, [pc, #24]	; (80070c0 <SystemCoreClockUpdate+0xd0>)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6013      	str	r3, [r2, #0]
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	50004600 	.word	0x50004600
 80070b8:	50004710 	.word	0x50004710
 80070bc:	016e3600 	.word	0x016e3600
 80070c0:	2000ffc0 	.word	0x2000ffc0

080070c4 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <OSCHP_GetFrequency+0x10>)
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	00b71b00 	.word	0x00b71b00

080070d8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80070e0:	4b14      	ldr	r3, [pc, #80]	; (8007134 <_sbrk+0x5c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80070e8:	4b12      	ldr	r3, [pc, #72]	; (8007134 <_sbrk+0x5c>)
 80070ea:	4a13      	ldr	r2, [pc, #76]	; (8007138 <_sbrk+0x60>)
 80070ec:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <_sbrk+0x5c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3303      	adds	r3, #3
 80070f8:	f023 0303 	bic.w	r3, r3, #3
 80070fc:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <_sbrk+0x5c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	4a0d      	ldr	r2, [pc, #52]	; (800713c <_sbrk+0x64>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d207      	bcs.n	800711c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <_sbrk+0x5c>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	4a07      	ldr	r2, [pc, #28]	; (8007134 <_sbrk+0x5c>)
 8007116:	6013      	str	r3, [r2, #0]
    return (base);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e006      	b.n	800712a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800711c:	f000 f850 	bl	80071c0 <__errno>
 8007120:	4602      	mov	r2, r0
 8007122:	230c      	movs	r3, #12
 8007124:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	200008b8 	.word	0x200008b8
 8007138:	20000fb0 	.word	0x20000fb0
 800713c:	2000ffc0 	.word	0x2000ffc0

08007140 <_init>:

/* Init */
void _init(void)
{}
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <calloc>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <calloc+0xc>)
 8007152:	460a      	mov	r2, r1
 8007154:	4601      	mov	r1, r0
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	f000 b802 	b.w	8007160 <_calloc_r>
 800715c:	20000038 	.word	0x20000038

08007160 <_calloc_r>:
 8007160:	b510      	push	{r4, lr}
 8007162:	fb02 f101 	mul.w	r1, r2, r1
 8007166:	f000 f869 	bl	800723c <_malloc_r>
 800716a:	4604      	mov	r4, r0
 800716c:	b1d8      	cbz	r0, 80071a6 <_calloc_r+0x46>
 800716e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007172:	f022 0203 	bic.w	r2, r2, #3
 8007176:	3a04      	subs	r2, #4
 8007178:	2a24      	cmp	r2, #36	; 0x24
 800717a:	d818      	bhi.n	80071ae <_calloc_r+0x4e>
 800717c:	2a13      	cmp	r2, #19
 800717e:	d914      	bls.n	80071aa <_calloc_r+0x4a>
 8007180:	2300      	movs	r3, #0
 8007182:	2a1b      	cmp	r2, #27
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	6043      	str	r3, [r0, #4]
 8007188:	d916      	bls.n	80071b8 <_calloc_r+0x58>
 800718a:	2a24      	cmp	r2, #36	; 0x24
 800718c:	6083      	str	r3, [r0, #8]
 800718e:	60c3      	str	r3, [r0, #12]
 8007190:	bf11      	iteee	ne
 8007192:	f100 0210 	addne.w	r2, r0, #16
 8007196:	6103      	streq	r3, [r0, #16]
 8007198:	6143      	streq	r3, [r0, #20]
 800719a:	f100 0218 	addeq.w	r2, r0, #24
 800719e:	2300      	movs	r3, #0
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	6053      	str	r3, [r2, #4]
 80071a4:	6093      	str	r3, [r2, #8]
 80071a6:	4620      	mov	r0, r4
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	4602      	mov	r2, r0
 80071ac:	e7f7      	b.n	800719e <_calloc_r+0x3e>
 80071ae:	2100      	movs	r1, #0
 80071b0:	f000 fc44 	bl	8007a3c <memset>
 80071b4:	4620      	mov	r0, r4
 80071b6:	bd10      	pop	{r4, pc}
 80071b8:	f100 0208 	add.w	r2, r0, #8
 80071bc:	e7ef      	b.n	800719e <_calloc_r+0x3e>
 80071be:	bf00      	nop

080071c0 <__errno>:
 80071c0:	4b01      	ldr	r3, [pc, #4]	; (80071c8 <__errno+0x8>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000038 	.word	0x20000038

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4e0f      	ldr	r6, [pc, #60]	; (800720c <__libc_init_array+0x40>)
 80071d0:	4d0f      	ldr	r5, [pc, #60]	; (8007210 <__libc_init_array+0x44>)
 80071d2:	1b76      	subs	r6, r6, r5
 80071d4:	10b6      	asrs	r6, r6, #2
 80071d6:	bf18      	it	ne
 80071d8:	2400      	movne	r4, #0
 80071da:	d005      	beq.n	80071e8 <__libc_init_array+0x1c>
 80071dc:	3401      	adds	r4, #1
 80071de:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e2:	4798      	blx	r3
 80071e4:	42a6      	cmp	r6, r4
 80071e6:	d1f9      	bne.n	80071dc <__libc_init_array+0x10>
 80071e8:	4e0a      	ldr	r6, [pc, #40]	; (8007214 <__libc_init_array+0x48>)
 80071ea:	4d0b      	ldr	r5, [pc, #44]	; (8007218 <__libc_init_array+0x4c>)
 80071ec:	1b76      	subs	r6, r6, r5
 80071ee:	f7ff ffa7 	bl	8007140 <_init>
 80071f2:	10b6      	asrs	r6, r6, #2
 80071f4:	bf18      	it	ne
 80071f6:	2400      	movne	r4, #0
 80071f8:	d006      	beq.n	8007208 <__libc_init_array+0x3c>
 80071fa:	3401      	adds	r4, #1
 80071fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007200:	4798      	blx	r3
 8007202:	42a6      	cmp	r6, r4
 8007204:	d1f9      	bne.n	80071fa <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	bd70      	pop	{r4, r5, r6, pc}
 800720a:	bf00      	nop
 800720c:	20000878 	.word	0x20000878
 8007210:	20000878 	.word	0x20000878
 8007214:	20000878 	.word	0x20000878
 8007218:	20000878 	.word	0x20000878

0800721c <malloc>:
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <malloc+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f000 b80b 	b.w	800723c <_malloc_r>
 8007226:	bf00      	nop
 8007228:	20000038 	.word	0x20000038

0800722c <free>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <free+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f000 bee3 	b.w	8007ffc <_free_r>
 8007236:	bf00      	nop
 8007238:	20000038 	.word	0x20000038

0800723c <_malloc_r>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	f101 060b 	add.w	r6, r1, #11
 8007244:	2e16      	cmp	r6, #22
 8007246:	b083      	sub	sp, #12
 8007248:	4605      	mov	r5, r0
 800724a:	f240 809e 	bls.w	800738a <_malloc_r+0x14e>
 800724e:	f036 0607 	bics.w	r6, r6, #7
 8007252:	f100 80bd 	bmi.w	80073d0 <_malloc_r+0x194>
 8007256:	42b1      	cmp	r1, r6
 8007258:	f200 80ba 	bhi.w	80073d0 <_malloc_r+0x194>
 800725c:	f000 fc3c 	bl	8007ad8 <__malloc_lock>
 8007260:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8007264:	f0c0 8293 	bcc.w	800778e <_malloc_r+0x552>
 8007268:	0a73      	lsrs	r3, r6, #9
 800726a:	f000 80b8 	beq.w	80073de <_malloc_r+0x1a2>
 800726e:	2b04      	cmp	r3, #4
 8007270:	f200 8179 	bhi.w	8007566 <_malloc_r+0x32a>
 8007274:	09b3      	lsrs	r3, r6, #6
 8007276:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800727a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 800727e:	00c3      	lsls	r3, r0, #3
 8007280:	4fbf      	ldr	r7, [pc, #764]	; (8007580 <_malloc_r+0x344>)
 8007282:	443b      	add	r3, r7
 8007284:	f1a3 0108 	sub.w	r1, r3, #8
 8007288:	685c      	ldr	r4, [r3, #4]
 800728a:	42a1      	cmp	r1, r4
 800728c:	d106      	bne.n	800729c <_malloc_r+0x60>
 800728e:	e00c      	b.n	80072aa <_malloc_r+0x6e>
 8007290:	2a00      	cmp	r2, #0
 8007292:	f280 80aa 	bge.w	80073ea <_malloc_r+0x1ae>
 8007296:	68e4      	ldr	r4, [r4, #12]
 8007298:	42a1      	cmp	r1, r4
 800729a:	d006      	beq.n	80072aa <_malloc_r+0x6e>
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	1b9a      	subs	r2, r3, r6
 80072a4:	2a0f      	cmp	r2, #15
 80072a6:	ddf3      	ble.n	8007290 <_malloc_r+0x54>
 80072a8:	4670      	mov	r0, lr
 80072aa:	693c      	ldr	r4, [r7, #16]
 80072ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8007594 <_malloc_r+0x358>
 80072b0:	4574      	cmp	r4, lr
 80072b2:	f000 81ab 	beq.w	800760c <_malloc_r+0x3d0>
 80072b6:	6863      	ldr	r3, [r4, #4]
 80072b8:	f023 0303 	bic.w	r3, r3, #3
 80072bc:	1b9a      	subs	r2, r3, r6
 80072be:	2a0f      	cmp	r2, #15
 80072c0:	f300 8190 	bgt.w	80075e4 <_malloc_r+0x3a8>
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	f8c7 e014 	str.w	lr, [r7, #20]
 80072ca:	f8c7 e010 	str.w	lr, [r7, #16]
 80072ce:	f280 809d 	bge.w	800740c <_malloc_r+0x1d0>
 80072d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d6:	f080 8161 	bcs.w	800759c <_malloc_r+0x360>
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f103 0c01 	add.w	ip, r3, #1
 80072e0:	1099      	asrs	r1, r3, #2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 80072e8:	f8c4 8008 	str.w	r8, [r4, #8]
 80072ec:	2301      	movs	r3, #1
 80072ee:	408b      	lsls	r3, r1
 80072f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	3908      	subs	r1, #8
 80072f8:	60e1      	str	r1, [r4, #12]
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8007300:	f8c8 400c 	str.w	r4, [r8, #12]
 8007304:	1082      	asrs	r2, r0, #2
 8007306:	2401      	movs	r4, #1
 8007308:	4094      	lsls	r4, r2
 800730a:	429c      	cmp	r4, r3
 800730c:	f200 808b 	bhi.w	8007426 <_malloc_r+0x1ea>
 8007310:	421c      	tst	r4, r3
 8007312:	d106      	bne.n	8007322 <_malloc_r+0xe6>
 8007314:	f020 0003 	bic.w	r0, r0, #3
 8007318:	0064      	lsls	r4, r4, #1
 800731a:	421c      	tst	r4, r3
 800731c:	f100 0004 	add.w	r0, r0, #4
 8007320:	d0fa      	beq.n	8007318 <_malloc_r+0xdc>
 8007322:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8007326:	46cc      	mov	ip, r9
 8007328:	4680      	mov	r8, r0
 800732a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800732e:	459c      	cmp	ip, r3
 8007330:	d107      	bne.n	8007342 <_malloc_r+0x106>
 8007332:	e16d      	b.n	8007610 <_malloc_r+0x3d4>
 8007334:	2a00      	cmp	r2, #0
 8007336:	f280 817b 	bge.w	8007630 <_malloc_r+0x3f4>
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	459c      	cmp	ip, r3
 800733e:	f000 8167 	beq.w	8007610 <_malloc_r+0x3d4>
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	f021 0103 	bic.w	r1, r1, #3
 8007348:	1b8a      	subs	r2, r1, r6
 800734a:	2a0f      	cmp	r2, #15
 800734c:	ddf2      	ble.n	8007334 <_malloc_r+0xf8>
 800734e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007352:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	199c      	adds	r4, r3, r6
 800735a:	4628      	mov	r0, r5
 800735c:	f046 0601 	orr.w	r6, r6, #1
 8007360:	f042 0501 	orr.w	r5, r2, #1
 8007364:	605e      	str	r6, [r3, #4]
 8007366:	f8c8 c00c 	str.w	ip, [r8, #12]
 800736a:	f8cc 8008 	str.w	r8, [ip, #8]
 800736e:	617c      	str	r4, [r7, #20]
 8007370:	613c      	str	r4, [r7, #16]
 8007372:	f8c4 e00c 	str.w	lr, [r4, #12]
 8007376:	f8c4 e008 	str.w	lr, [r4, #8]
 800737a:	6065      	str	r5, [r4, #4]
 800737c:	505a      	str	r2, [r3, r1]
 800737e:	f000 fbb1 	bl	8007ae4 <__malloc_unlock>
 8007382:	9b00      	ldr	r3, [sp, #0]
 8007384:	f103 0408 	add.w	r4, r3, #8
 8007388:	e01e      	b.n	80073c8 <_malloc_r+0x18c>
 800738a:	2910      	cmp	r1, #16
 800738c:	d820      	bhi.n	80073d0 <_malloc_r+0x194>
 800738e:	f000 fba3 	bl	8007ad8 <__malloc_lock>
 8007392:	2610      	movs	r6, #16
 8007394:	2318      	movs	r3, #24
 8007396:	2002      	movs	r0, #2
 8007398:	4f79      	ldr	r7, [pc, #484]	; (8007580 <_malloc_r+0x344>)
 800739a:	443b      	add	r3, r7
 800739c:	f1a3 0208 	sub.w	r2, r3, #8
 80073a0:	685c      	ldr	r4, [r3, #4]
 80073a2:	4294      	cmp	r4, r2
 80073a4:	f000 813d 	beq.w	8007622 <_malloc_r+0x3e6>
 80073a8:	6863      	ldr	r3, [r4, #4]
 80073aa:	68e1      	ldr	r1, [r4, #12]
 80073ac:	68a6      	ldr	r6, [r4, #8]
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	4423      	add	r3, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	60f1      	str	r1, [r6, #12]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	608e      	str	r6, [r1, #8]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	f000 fb8f 	bl	8007ae4 <__malloc_unlock>
 80073c6:	3408      	adds	r4, #8
 80073c8:	4620      	mov	r0, r4
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	2400      	movs	r4, #0
 80073d2:	230c      	movs	r3, #12
 80073d4:	4620      	mov	r0, r4
 80073d6:	602b      	str	r3, [r5, #0]
 80073d8:	b003      	add	sp, #12
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	2040      	movs	r0, #64	; 0x40
 80073e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80073e8:	e74a      	b.n	8007280 <_malloc_r+0x44>
 80073ea:	4423      	add	r3, r4
 80073ec:	68e1      	ldr	r1, [r4, #12]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68a6      	ldr	r6, [r4, #8]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	60f1      	str	r1, [r6, #12]
 80073f8:	4628      	mov	r0, r5
 80073fa:	608e      	str	r6, [r1, #8]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	f000 fb71 	bl	8007ae4 <__malloc_unlock>
 8007402:	3408      	adds	r4, #8
 8007404:	4620      	mov	r0, r4
 8007406:	b003      	add	sp, #12
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	4423      	add	r3, r4
 800740e:	4628      	mov	r0, r5
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	605a      	str	r2, [r3, #4]
 8007418:	f000 fb64 	bl	8007ae4 <__malloc_unlock>
 800741c:	3408      	adds	r4, #8
 800741e:	4620      	mov	r0, r4
 8007420:	b003      	add	sp, #12
 8007422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	68bc      	ldr	r4, [r7, #8]
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	f023 0803 	bic.w	r8, r3, #3
 800742e:	45b0      	cmp	r8, r6
 8007430:	d304      	bcc.n	800743c <_malloc_r+0x200>
 8007432:	eba8 0306 	sub.w	r3, r8, r6
 8007436:	2b0f      	cmp	r3, #15
 8007438:	f300 8085 	bgt.w	8007546 <_malloc_r+0x30a>
 800743c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007598 <_malloc_r+0x35c>
 8007440:	4b50      	ldr	r3, [pc, #320]	; (8007584 <_malloc_r+0x348>)
 8007442:	f8d9 2000 	ldr.w	r2, [r9]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3201      	adds	r2, #1
 800744a:	4433      	add	r3, r6
 800744c:	eb04 0a08 	add.w	sl, r4, r8
 8007450:	f000 8155 	beq.w	80076fe <_malloc_r+0x4c2>
 8007454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007458:	330f      	adds	r3, #15
 800745a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800745e:	f02b 0b0f 	bic.w	fp, fp, #15
 8007462:	4659      	mov	r1, fp
 8007464:	4628      	mov	r0, r5
 8007466:	f000 fcf1 	bl	8007e4c <_sbrk_r>
 800746a:	1c41      	adds	r1, r0, #1
 800746c:	4602      	mov	r2, r0
 800746e:	f000 80fc 	beq.w	800766a <_malloc_r+0x42e>
 8007472:	4582      	cmp	sl, r0
 8007474:	f200 80f7 	bhi.w	8007666 <_malloc_r+0x42a>
 8007478:	4b43      	ldr	r3, [pc, #268]	; (8007588 <_malloc_r+0x34c>)
 800747a:	6819      	ldr	r1, [r3, #0]
 800747c:	4459      	add	r1, fp
 800747e:	6019      	str	r1, [r3, #0]
 8007480:	f000 814d 	beq.w	800771e <_malloc_r+0x4e2>
 8007484:	f8d9 0000 	ldr.w	r0, [r9]
 8007488:	3001      	adds	r0, #1
 800748a:	bf1b      	ittet	ne
 800748c:	eba2 0a0a 	subne.w	sl, r2, sl
 8007490:	4451      	addne	r1, sl
 8007492:	f8c9 2000 	streq.w	r2, [r9]
 8007496:	6019      	strne	r1, [r3, #0]
 8007498:	f012 0107 	ands.w	r1, r2, #7
 800749c:	f000 8115 	beq.w	80076ca <_malloc_r+0x48e>
 80074a0:	f1c1 0008 	rsb	r0, r1, #8
 80074a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80074a8:	4402      	add	r2, r0
 80074aa:	3108      	adds	r1, #8
 80074ac:	eb02 090b 	add.w	r9, r2, fp
 80074b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
 80074b4:	eba1 0909 	sub.w	r9, r1, r9
 80074b8:	4649      	mov	r1, r9
 80074ba:	4628      	mov	r0, r5
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	9200      	str	r2, [sp, #0]
 80074c0:	f000 fcc4 	bl	8007e4c <_sbrk_r>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80074ca:	f000 8143 	beq.w	8007754 <_malloc_r+0x518>
 80074ce:	1a80      	subs	r0, r0, r2
 80074d0:	4448      	add	r0, r9
 80074d2:	f040 0001 	orr.w	r0, r0, #1
 80074d6:	6819      	ldr	r1, [r3, #0]
 80074d8:	60ba      	str	r2, [r7, #8]
 80074da:	4449      	add	r1, r9
 80074dc:	42bc      	cmp	r4, r7
 80074de:	6050      	str	r0, [r2, #4]
 80074e0:	6019      	str	r1, [r3, #0]
 80074e2:	d017      	beq.n	8007514 <_malloc_r+0x2d8>
 80074e4:	f1b8 0f0f 	cmp.w	r8, #15
 80074e8:	f240 80fb 	bls.w	80076e2 <_malloc_r+0x4a6>
 80074ec:	6860      	ldr	r0, [r4, #4]
 80074ee:	f1a8 020c 	sub.w	r2, r8, #12
 80074f2:	f022 0207 	bic.w	r2, r2, #7
 80074f6:	eb04 0e02 	add.w	lr, r4, r2
 80074fa:	f000 0001 	and.w	r0, r0, #1
 80074fe:	f04f 0c05 	mov.w	ip, #5
 8007502:	4310      	orrs	r0, r2
 8007504:	2a0f      	cmp	r2, #15
 8007506:	6060      	str	r0, [r4, #4]
 8007508:	f8ce c004 	str.w	ip, [lr, #4]
 800750c:	f8ce c008 	str.w	ip, [lr, #8]
 8007510:	f200 8117 	bhi.w	8007742 <_malloc_r+0x506>
 8007514:	4b1d      	ldr	r3, [pc, #116]	; (800758c <_malloc_r+0x350>)
 8007516:	68bc      	ldr	r4, [r7, #8]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4291      	cmp	r1, r2
 800751c:	bf88      	it	hi
 800751e:	6019      	strhi	r1, [r3, #0]
 8007520:	4b1b      	ldr	r3, [pc, #108]	; (8007590 <_malloc_r+0x354>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4291      	cmp	r1, r2
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	bf88      	it	hi
 800752a:	6019      	strhi	r1, [r3, #0]
 800752c:	f022 0203 	bic.w	r2, r2, #3
 8007530:	4296      	cmp	r6, r2
 8007532:	eba2 0306 	sub.w	r3, r2, r6
 8007536:	d801      	bhi.n	800753c <_malloc_r+0x300>
 8007538:	2b0f      	cmp	r3, #15
 800753a:	dc04      	bgt.n	8007546 <_malloc_r+0x30a>
 800753c:	4628      	mov	r0, r5
 800753e:	f000 fad1 	bl	8007ae4 <__malloc_unlock>
 8007542:	2400      	movs	r4, #0
 8007544:	e740      	b.n	80073c8 <_malloc_r+0x18c>
 8007546:	19a2      	adds	r2, r4, r6
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	f046 0601 	orr.w	r6, r6, #1
 8007550:	6066      	str	r6, [r4, #4]
 8007552:	4628      	mov	r0, r5
 8007554:	60ba      	str	r2, [r7, #8]
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	f000 fac4 	bl	8007ae4 <__malloc_unlock>
 800755c:	3408      	adds	r4, #8
 800755e:	4620      	mov	r0, r4
 8007560:	b003      	add	sp, #12
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	2b14      	cmp	r3, #20
 8007568:	d971      	bls.n	800764e <_malloc_r+0x412>
 800756a:	2b54      	cmp	r3, #84	; 0x54
 800756c:	f200 80a3 	bhi.w	80076b6 <_malloc_r+0x47a>
 8007570:	0b33      	lsrs	r3, r6, #12
 8007572:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8007576:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 800757a:	00c3      	lsls	r3, r0, #3
 800757c:	e680      	b.n	8007280 <_malloc_r+0x44>
 800757e:	bf00      	nop
 8007580:	20000468 	.word	0x20000468
 8007584:	200008ec 	.word	0x200008ec
 8007588:	200008bc 	.word	0x200008bc
 800758c:	200008e4 	.word	0x200008e4
 8007590:	200008e8 	.word	0x200008e8
 8007594:	20000470 	.word	0x20000470
 8007598:	20000870 	.word	0x20000870
 800759c:	0a5a      	lsrs	r2, r3, #9
 800759e:	2a04      	cmp	r2, #4
 80075a0:	d95b      	bls.n	800765a <_malloc_r+0x41e>
 80075a2:	2a14      	cmp	r2, #20
 80075a4:	f200 80ae 	bhi.w	8007704 <_malloc_r+0x4c8>
 80075a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80075ac:	00c9      	lsls	r1, r1, #3
 80075ae:	325b      	adds	r2, #91	; 0x5b
 80075b0:	eb07 0c01 	add.w	ip, r7, r1
 80075b4:	5879      	ldr	r1, [r7, r1]
 80075b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80075ba:	458c      	cmp	ip, r1
 80075bc:	f000 8088 	beq.w	80076d0 <_malloc_r+0x494>
 80075c0:	684a      	ldr	r2, [r1, #4]
 80075c2:	f022 0203 	bic.w	r2, r2, #3
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d273      	bcs.n	80076b2 <_malloc_r+0x476>
 80075ca:	6889      	ldr	r1, [r1, #8]
 80075cc:	458c      	cmp	ip, r1
 80075ce:	d1f7      	bne.n	80075c0 <_malloc_r+0x384>
 80075d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60e2      	str	r2, [r4, #12]
 80075d8:	f8c4 c008 	str.w	ip, [r4, #8]
 80075dc:	6094      	str	r4, [r2, #8]
 80075de:	f8cc 400c 	str.w	r4, [ip, #12]
 80075e2:	e68f      	b.n	8007304 <_malloc_r+0xc8>
 80075e4:	19a1      	adds	r1, r4, r6
 80075e6:	f046 0c01 	orr.w	ip, r6, #1
 80075ea:	f042 0601 	orr.w	r6, r2, #1
 80075ee:	f8c4 c004 	str.w	ip, [r4, #4]
 80075f2:	4628      	mov	r0, r5
 80075f4:	6179      	str	r1, [r7, #20]
 80075f6:	6139      	str	r1, [r7, #16]
 80075f8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80075fc:	f8c1 e008 	str.w	lr, [r1, #8]
 8007600:	604e      	str	r6, [r1, #4]
 8007602:	50e2      	str	r2, [r4, r3]
 8007604:	f000 fa6e 	bl	8007ae4 <__malloc_unlock>
 8007608:	3408      	adds	r4, #8
 800760a:	e6dd      	b.n	80073c8 <_malloc_r+0x18c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	e679      	b.n	8007304 <_malloc_r+0xc8>
 8007610:	f108 0801 	add.w	r8, r8, #1
 8007614:	f018 0f03 	tst.w	r8, #3
 8007618:	f10c 0c08 	add.w	ip, ip, #8
 800761c:	f47f ae85 	bne.w	800732a <_malloc_r+0xee>
 8007620:	e02d      	b.n	800767e <_malloc_r+0x442>
 8007622:	68dc      	ldr	r4, [r3, #12]
 8007624:	42a3      	cmp	r3, r4
 8007626:	bf08      	it	eq
 8007628:	3002      	addeq	r0, #2
 800762a:	f43f ae3e 	beq.w	80072aa <_malloc_r+0x6e>
 800762e:	e6bb      	b.n	80073a8 <_malloc_r+0x16c>
 8007630:	4419      	add	r1, r3
 8007632:	461c      	mov	r4, r3
 8007634:	684a      	ldr	r2, [r1, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f854 6f08 	ldr.w	r6, [r4, #8]!
 800763c:	f042 0201 	orr.w	r2, r2, #1
 8007640:	604a      	str	r2, [r1, #4]
 8007642:	4628      	mov	r0, r5
 8007644:	60f3      	str	r3, [r6, #12]
 8007646:	609e      	str	r6, [r3, #8]
 8007648:	f000 fa4c 	bl	8007ae4 <__malloc_unlock>
 800764c:	e6bc      	b.n	80073c8 <_malloc_r+0x18c>
 800764e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8007652:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 8007656:	00c3      	lsls	r3, r0, #3
 8007658:	e612      	b.n	8007280 <_malloc_r+0x44>
 800765a:	099a      	lsrs	r2, r3, #6
 800765c:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8007660:	00c9      	lsls	r1, r1, #3
 8007662:	3238      	adds	r2, #56	; 0x38
 8007664:	e7a4      	b.n	80075b0 <_malloc_r+0x374>
 8007666:	42bc      	cmp	r4, r7
 8007668:	d054      	beq.n	8007714 <_malloc_r+0x4d8>
 800766a:	68bc      	ldr	r4, [r7, #8]
 800766c:	6862      	ldr	r2, [r4, #4]
 800766e:	f022 0203 	bic.w	r2, r2, #3
 8007672:	e75d      	b.n	8007530 <_malloc_r+0x2f4>
 8007674:	f859 3908 	ldr.w	r3, [r9], #-8
 8007678:	4599      	cmp	r9, r3
 800767a:	f040 8086 	bne.w	800778a <_malloc_r+0x54e>
 800767e:	f010 0f03 	tst.w	r0, #3
 8007682:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007686:	d1f5      	bne.n	8007674 <_malloc_r+0x438>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	ea23 0304 	bic.w	r3, r3, r4
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	0064      	lsls	r4, r4, #1
 8007692:	429c      	cmp	r4, r3
 8007694:	f63f aec7 	bhi.w	8007426 <_malloc_r+0x1ea>
 8007698:	2c00      	cmp	r4, #0
 800769a:	f43f aec4 	beq.w	8007426 <_malloc_r+0x1ea>
 800769e:	421c      	tst	r4, r3
 80076a0:	4640      	mov	r0, r8
 80076a2:	f47f ae3e 	bne.w	8007322 <_malloc_r+0xe6>
 80076a6:	0064      	lsls	r4, r4, #1
 80076a8:	421c      	tst	r4, r3
 80076aa:	f100 0004 	add.w	r0, r0, #4
 80076ae:	d0fa      	beq.n	80076a6 <_malloc_r+0x46a>
 80076b0:	e637      	b.n	8007322 <_malloc_r+0xe6>
 80076b2:	468c      	mov	ip, r1
 80076b4:	e78c      	b.n	80075d0 <_malloc_r+0x394>
 80076b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80076ba:	d815      	bhi.n	80076e8 <_malloc_r+0x4ac>
 80076bc:	0bf3      	lsrs	r3, r6, #15
 80076be:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80076c2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 80076c6:	00c3      	lsls	r3, r0, #3
 80076c8:	e5da      	b.n	8007280 <_malloc_r+0x44>
 80076ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076ce:	e6ed      	b.n	80074ac <_malloc_r+0x270>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	1092      	asrs	r2, r2, #2
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f202 	lsl.w	r2, r1, r2
 80076da:	4313      	orrs	r3, r2
 80076dc:	607b      	str	r3, [r7, #4]
 80076de:	4662      	mov	r2, ip
 80076e0:	e779      	b.n	80075d6 <_malloc_r+0x39a>
 80076e2:	2301      	movs	r3, #1
 80076e4:	6053      	str	r3, [r2, #4]
 80076e6:	e729      	b.n	800753c <_malloc_r+0x300>
 80076e8:	f240 5254 	movw	r2, #1364	; 0x554
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d822      	bhi.n	8007736 <_malloc_r+0x4fa>
 80076f0:	0cb3      	lsrs	r3, r6, #18
 80076f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80076f6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 80076fa:	00c3      	lsls	r3, r0, #3
 80076fc:	e5c0      	b.n	8007280 <_malloc_r+0x44>
 80076fe:	f103 0b10 	add.w	fp, r3, #16
 8007702:	e6ae      	b.n	8007462 <_malloc_r+0x226>
 8007704:	2a54      	cmp	r2, #84	; 0x54
 8007706:	d829      	bhi.n	800775c <_malloc_r+0x520>
 8007708:	0b1a      	lsrs	r2, r3, #12
 800770a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800770e:	00c9      	lsls	r1, r1, #3
 8007710:	326e      	adds	r2, #110	; 0x6e
 8007712:	e74d      	b.n	80075b0 <_malloc_r+0x374>
 8007714:	4b20      	ldr	r3, [pc, #128]	; (8007798 <_malloc_r+0x55c>)
 8007716:	6819      	ldr	r1, [r3, #0]
 8007718:	4459      	add	r1, fp
 800771a:	6019      	str	r1, [r3, #0]
 800771c:	e6b2      	b.n	8007484 <_malloc_r+0x248>
 800771e:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8007722:	2800      	cmp	r0, #0
 8007724:	f47f aeae 	bne.w	8007484 <_malloc_r+0x248>
 8007728:	eb08 030b 	add.w	r3, r8, fp
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	6053      	str	r3, [r2, #4]
 8007734:	e6ee      	b.n	8007514 <_malloc_r+0x2d8>
 8007736:	207f      	movs	r0, #127	; 0x7f
 8007738:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800773c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8007740:	e59e      	b.n	8007280 <_malloc_r+0x44>
 8007742:	f104 0108 	add.w	r1, r4, #8
 8007746:	4628      	mov	r0, r5
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	f000 fc57 	bl	8007ffc <_free_r>
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	e6df      	b.n	8007514 <_malloc_r+0x2d8>
 8007754:	2001      	movs	r0, #1
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	e6bc      	b.n	80074d6 <_malloc_r+0x29a>
 800775c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007760:	d805      	bhi.n	800776e <_malloc_r+0x532>
 8007762:	0bda      	lsrs	r2, r3, #15
 8007764:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8007768:	00c9      	lsls	r1, r1, #3
 800776a:	3277      	adds	r2, #119	; 0x77
 800776c:	e720      	b.n	80075b0 <_malloc_r+0x374>
 800776e:	f240 5154 	movw	r1, #1364	; 0x554
 8007772:	428a      	cmp	r2, r1
 8007774:	d805      	bhi.n	8007782 <_malloc_r+0x546>
 8007776:	0c9a      	lsrs	r2, r3, #18
 8007778:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800777c:	00c9      	lsls	r1, r1, #3
 800777e:	327c      	adds	r2, #124	; 0x7c
 8007780:	e716      	b.n	80075b0 <_malloc_r+0x374>
 8007782:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007786:	227e      	movs	r2, #126	; 0x7e
 8007788:	e712      	b.n	80075b0 <_malloc_r+0x374>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	e780      	b.n	8007690 <_malloc_r+0x454>
 800778e:	08f0      	lsrs	r0, r6, #3
 8007790:	f106 0308 	add.w	r3, r6, #8
 8007794:	e600      	b.n	8007398 <_malloc_r+0x15c>
 8007796:	bf00      	nop
 8007798:	200008bc 	.word	0x200008bc
 800779c:	00000000 	.word	0x00000000

080077a0 <memchr>:
 80077a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80077a4:	2a10      	cmp	r2, #16
 80077a6:	db2b      	blt.n	8007800 <memchr+0x60>
 80077a8:	f010 0f07 	tst.w	r0, #7
 80077ac:	d008      	beq.n	80077c0 <memchr+0x20>
 80077ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80077b2:	3a01      	subs	r2, #1
 80077b4:	428b      	cmp	r3, r1
 80077b6:	d02d      	beq.n	8007814 <memchr+0x74>
 80077b8:	f010 0f07 	tst.w	r0, #7
 80077bc:	b342      	cbz	r2, 8007810 <memchr+0x70>
 80077be:	d1f6      	bne.n	80077ae <memchr+0xe>
 80077c0:	b4f0      	push	{r4, r5, r6, r7}
 80077c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80077c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80077ca:	f022 0407 	bic.w	r4, r2, #7
 80077ce:	f07f 0700 	mvns.w	r7, #0
 80077d2:	2300      	movs	r3, #0
 80077d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80077d8:	3c08      	subs	r4, #8
 80077da:	ea85 0501 	eor.w	r5, r5, r1
 80077de:	ea86 0601 	eor.w	r6, r6, r1
 80077e2:	fa85 f547 	uadd8	r5, r5, r7
 80077e6:	faa3 f587 	sel	r5, r3, r7
 80077ea:	fa86 f647 	uadd8	r6, r6, r7
 80077ee:	faa5 f687 	sel	r6, r5, r7
 80077f2:	b98e      	cbnz	r6, 8007818 <memchr+0x78>
 80077f4:	d1ee      	bne.n	80077d4 <memchr+0x34>
 80077f6:	bcf0      	pop	{r4, r5, r6, r7}
 80077f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80077fc:	f002 0207 	and.w	r2, r2, #7
 8007800:	b132      	cbz	r2, 8007810 <memchr+0x70>
 8007802:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007806:	3a01      	subs	r2, #1
 8007808:	ea83 0301 	eor.w	r3, r3, r1
 800780c:	b113      	cbz	r3, 8007814 <memchr+0x74>
 800780e:	d1f8      	bne.n	8007802 <memchr+0x62>
 8007810:	2000      	movs	r0, #0
 8007812:	4770      	bx	lr
 8007814:	3801      	subs	r0, #1
 8007816:	4770      	bx	lr
 8007818:	2d00      	cmp	r5, #0
 800781a:	bf06      	itte	eq
 800781c:	4635      	moveq	r5, r6
 800781e:	3803      	subeq	r0, #3
 8007820:	3807      	subne	r0, #7
 8007822:	f015 0f01 	tst.w	r5, #1
 8007826:	d107      	bne.n	8007838 <memchr+0x98>
 8007828:	3001      	adds	r0, #1
 800782a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800782e:	bf02      	ittt	eq
 8007830:	3001      	addeq	r0, #1
 8007832:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007836:	3001      	addeq	r0, #1
 8007838:	bcf0      	pop	{r4, r5, r6, r7}
 800783a:	3801      	subs	r0, #1
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop

08007840 <memcpy>:
 8007840:	4684      	mov	ip, r0
 8007842:	ea41 0300 	orr.w	r3, r1, r0
 8007846:	f013 0303 	ands.w	r3, r3, #3
 800784a:	d16d      	bne.n	8007928 <memcpy+0xe8>
 800784c:	3a40      	subs	r2, #64	; 0x40
 800784e:	d341      	bcc.n	80078d4 <memcpy+0x94>
 8007850:	f851 3b04 	ldr.w	r3, [r1], #4
 8007854:	f840 3b04 	str.w	r3, [r0], #4
 8007858:	f851 3b04 	ldr.w	r3, [r1], #4
 800785c:	f840 3b04 	str.w	r3, [r0], #4
 8007860:	f851 3b04 	ldr.w	r3, [r1], #4
 8007864:	f840 3b04 	str.w	r3, [r0], #4
 8007868:	f851 3b04 	ldr.w	r3, [r1], #4
 800786c:	f840 3b04 	str.w	r3, [r0], #4
 8007870:	f851 3b04 	ldr.w	r3, [r1], #4
 8007874:	f840 3b04 	str.w	r3, [r0], #4
 8007878:	f851 3b04 	ldr.w	r3, [r1], #4
 800787c:	f840 3b04 	str.w	r3, [r0], #4
 8007880:	f851 3b04 	ldr.w	r3, [r1], #4
 8007884:	f840 3b04 	str.w	r3, [r0], #4
 8007888:	f851 3b04 	ldr.w	r3, [r1], #4
 800788c:	f840 3b04 	str.w	r3, [r0], #4
 8007890:	f851 3b04 	ldr.w	r3, [r1], #4
 8007894:	f840 3b04 	str.w	r3, [r0], #4
 8007898:	f851 3b04 	ldr.w	r3, [r1], #4
 800789c:	f840 3b04 	str.w	r3, [r0], #4
 80078a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80078a4:	f840 3b04 	str.w	r3, [r0], #4
 80078a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80078ac:	f840 3b04 	str.w	r3, [r0], #4
 80078b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80078b4:	f840 3b04 	str.w	r3, [r0], #4
 80078b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80078bc:	f840 3b04 	str.w	r3, [r0], #4
 80078c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80078c4:	f840 3b04 	str.w	r3, [r0], #4
 80078c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80078cc:	f840 3b04 	str.w	r3, [r0], #4
 80078d0:	3a40      	subs	r2, #64	; 0x40
 80078d2:	d2bd      	bcs.n	8007850 <memcpy+0x10>
 80078d4:	3230      	adds	r2, #48	; 0x30
 80078d6:	d311      	bcc.n	80078fc <memcpy+0xbc>
 80078d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80078dc:	f840 3b04 	str.w	r3, [r0], #4
 80078e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80078e4:	f840 3b04 	str.w	r3, [r0], #4
 80078e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80078ec:	f840 3b04 	str.w	r3, [r0], #4
 80078f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80078f4:	f840 3b04 	str.w	r3, [r0], #4
 80078f8:	3a10      	subs	r2, #16
 80078fa:	d2ed      	bcs.n	80078d8 <memcpy+0x98>
 80078fc:	320c      	adds	r2, #12
 80078fe:	d305      	bcc.n	800790c <memcpy+0xcc>
 8007900:	f851 3b04 	ldr.w	r3, [r1], #4
 8007904:	f840 3b04 	str.w	r3, [r0], #4
 8007908:	3a04      	subs	r2, #4
 800790a:	d2f9      	bcs.n	8007900 <memcpy+0xc0>
 800790c:	3204      	adds	r2, #4
 800790e:	d008      	beq.n	8007922 <memcpy+0xe2>
 8007910:	07d2      	lsls	r2, r2, #31
 8007912:	bf1c      	itt	ne
 8007914:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8007918:	f800 3b01 	strbne.w	r3, [r0], #1
 800791c:	d301      	bcc.n	8007922 <memcpy+0xe2>
 800791e:	880b      	ldrh	r3, [r1, #0]
 8007920:	8003      	strh	r3, [r0, #0]
 8007922:	4660      	mov	r0, ip
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	2a08      	cmp	r2, #8
 800792a:	d313      	bcc.n	8007954 <memcpy+0x114>
 800792c:	078b      	lsls	r3, r1, #30
 800792e:	d08d      	beq.n	800784c <memcpy+0xc>
 8007930:	f010 0303 	ands.w	r3, r0, #3
 8007934:	d08a      	beq.n	800784c <memcpy+0xc>
 8007936:	f1c3 0304 	rsb	r3, r3, #4
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	07db      	lsls	r3, r3, #31
 800793e:	bf1c      	itt	ne
 8007940:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8007944:	f800 3b01 	strbne.w	r3, [r0], #1
 8007948:	d380      	bcc.n	800784c <memcpy+0xc>
 800794a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800794e:	f820 3b02 	strh.w	r3, [r0], #2
 8007952:	e77b      	b.n	800784c <memcpy+0xc>
 8007954:	3a04      	subs	r2, #4
 8007956:	d3d9      	bcc.n	800790c <memcpy+0xcc>
 8007958:	3a01      	subs	r2, #1
 800795a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795e:	f800 3b01 	strb.w	r3, [r0], #1
 8007962:	d2f9      	bcs.n	8007958 <memcpy+0x118>
 8007964:	780b      	ldrb	r3, [r1, #0]
 8007966:	7003      	strb	r3, [r0, #0]
 8007968:	784b      	ldrb	r3, [r1, #1]
 800796a:	7043      	strb	r3, [r0, #1]
 800796c:	788b      	ldrb	r3, [r1, #2]
 800796e:	7083      	strb	r3, [r0, #2]
 8007970:	4660      	mov	r0, ip
 8007972:	4770      	bx	lr

08007974 <memmove>:
 8007974:	4288      	cmp	r0, r1
 8007976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007978:	d90d      	bls.n	8007996 <memmove+0x22>
 800797a:	188b      	adds	r3, r1, r2
 800797c:	4298      	cmp	r0, r3
 800797e:	d20a      	bcs.n	8007996 <memmove+0x22>
 8007980:	1884      	adds	r4, r0, r2
 8007982:	2a00      	cmp	r2, #0
 8007984:	d051      	beq.n	8007a2a <memmove+0xb6>
 8007986:	4622      	mov	r2, r4
 8007988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800798c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007990:	4299      	cmp	r1, r3
 8007992:	d1f9      	bne.n	8007988 <memmove+0x14>
 8007994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007996:	2a0f      	cmp	r2, #15
 8007998:	d948      	bls.n	8007a2c <memmove+0xb8>
 800799a:	ea41 0300 	orr.w	r3, r1, r0
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d146      	bne.n	8007a30 <memmove+0xbc>
 80079a2:	f100 0410 	add.w	r4, r0, #16
 80079a6:	f101 0310 	add.w	r3, r1, #16
 80079aa:	4615      	mov	r5, r2
 80079ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80079b0:	f844 6c10 	str.w	r6, [r4, #-16]
 80079b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80079b8:	f844 6c0c 	str.w	r6, [r4, #-12]
 80079bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80079c0:	f844 6c08 	str.w	r6, [r4, #-8]
 80079c4:	3d10      	subs	r5, #16
 80079c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80079ca:	f844 6c04 	str.w	r6, [r4, #-4]
 80079ce:	2d0f      	cmp	r5, #15
 80079d0:	f103 0310 	add.w	r3, r3, #16
 80079d4:	f104 0410 	add.w	r4, r4, #16
 80079d8:	d8e8      	bhi.n	80079ac <memmove+0x38>
 80079da:	f1a2 0310 	sub.w	r3, r2, #16
 80079de:	f023 030f 	bic.w	r3, r3, #15
 80079e2:	f002 0e0f 	and.w	lr, r2, #15
 80079e6:	3310      	adds	r3, #16
 80079e8:	f1be 0f03 	cmp.w	lr, #3
 80079ec:	4419      	add	r1, r3
 80079ee:	4403      	add	r3, r0
 80079f0:	d921      	bls.n	8007a36 <memmove+0xc2>
 80079f2:	1f1e      	subs	r6, r3, #4
 80079f4:	460d      	mov	r5, r1
 80079f6:	4674      	mov	r4, lr
 80079f8:	3c04      	subs	r4, #4
 80079fa:	f855 7b04 	ldr.w	r7, [r5], #4
 80079fe:	f846 7f04 	str.w	r7, [r6, #4]!
 8007a02:	2c03      	cmp	r4, #3
 8007a04:	d8f8      	bhi.n	80079f8 <memmove+0x84>
 8007a06:	f1ae 0404 	sub.w	r4, lr, #4
 8007a0a:	f024 0403 	bic.w	r4, r4, #3
 8007a0e:	3404      	adds	r4, #4
 8007a10:	4421      	add	r1, r4
 8007a12:	4423      	add	r3, r4
 8007a14:	f002 0203 	and.w	r2, r2, #3
 8007a18:	b162      	cbz	r2, 8007a34 <memmove+0xc0>
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a26:	428a      	cmp	r2, r1
 8007a28:	d1f9      	bne.n	8007a1e <memmove+0xaa>
 8007a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	e7f3      	b.n	8007a18 <memmove+0xa4>
 8007a30:	4603      	mov	r3, r0
 8007a32:	e7f2      	b.n	8007a1a <memmove+0xa6>
 8007a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a36:	4672      	mov	r2, lr
 8007a38:	e7ee      	b.n	8007a18 <memmove+0xa4>
 8007a3a:	bf00      	nop

08007a3c <memset>:
 8007a3c:	b470      	push	{r4, r5, r6}
 8007a3e:	0786      	lsls	r6, r0, #30
 8007a40:	d046      	beq.n	8007ad0 <memset+0x94>
 8007a42:	1e54      	subs	r4, r2, #1
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d041      	beq.n	8007acc <memset+0x90>
 8007a48:	b2ca      	uxtb	r2, r1
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	e002      	b.n	8007a54 <memset+0x18>
 8007a4e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8007a52:	d33b      	bcc.n	8007acc <memset+0x90>
 8007a54:	f803 2b01 	strb.w	r2, [r3], #1
 8007a58:	079d      	lsls	r5, r3, #30
 8007a5a:	d1f8      	bne.n	8007a4e <memset+0x12>
 8007a5c:	2c03      	cmp	r4, #3
 8007a5e:	d92e      	bls.n	8007abe <memset+0x82>
 8007a60:	b2cd      	uxtb	r5, r1
 8007a62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007a66:	2c0f      	cmp	r4, #15
 8007a68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007a6c:	d919      	bls.n	8007aa2 <memset+0x66>
 8007a6e:	f103 0210 	add.w	r2, r3, #16
 8007a72:	4626      	mov	r6, r4
 8007a74:	3e10      	subs	r6, #16
 8007a76:	2e0f      	cmp	r6, #15
 8007a78:	f842 5c10 	str.w	r5, [r2, #-16]
 8007a7c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8007a80:	f842 5c08 	str.w	r5, [r2, #-8]
 8007a84:	f842 5c04 	str.w	r5, [r2, #-4]
 8007a88:	f102 0210 	add.w	r2, r2, #16
 8007a8c:	d8f2      	bhi.n	8007a74 <memset+0x38>
 8007a8e:	f1a4 0210 	sub.w	r2, r4, #16
 8007a92:	f022 020f 	bic.w	r2, r2, #15
 8007a96:	f004 040f 	and.w	r4, r4, #15
 8007a9a:	3210      	adds	r2, #16
 8007a9c:	2c03      	cmp	r4, #3
 8007a9e:	4413      	add	r3, r2
 8007aa0:	d90d      	bls.n	8007abe <memset+0x82>
 8007aa2:	461e      	mov	r6, r3
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	3a04      	subs	r2, #4
 8007aa8:	2a03      	cmp	r2, #3
 8007aaa:	f846 5b04 	str.w	r5, [r6], #4
 8007aae:	d8fa      	bhi.n	8007aa6 <memset+0x6a>
 8007ab0:	1f22      	subs	r2, r4, #4
 8007ab2:	f022 0203 	bic.w	r2, r2, #3
 8007ab6:	3204      	adds	r2, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	f004 0403 	and.w	r4, r4, #3
 8007abe:	b12c      	cbz	r4, 8007acc <memset+0x90>
 8007ac0:	b2c9      	uxtb	r1, r1
 8007ac2:	441c      	add	r4, r3
 8007ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d1fb      	bne.n	8007ac4 <memset+0x88>
 8007acc:	bc70      	pop	{r4, r5, r6}
 8007ace:	4770      	bx	lr
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	e7c2      	b.n	8007a5c <memset+0x20>
 8007ad6:	bf00      	nop

08007ad8 <__malloc_lock>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__malloc_lock+0x8>)
 8007ada:	f000 bb7f 	b.w	80081dc <__retarget_lock_acquire_recursive>
 8007ade:	bf00      	nop
 8007ae0:	20000f98 	.word	0x20000f98

08007ae4 <__malloc_unlock>:
 8007ae4:	4801      	ldr	r0, [pc, #4]	; (8007aec <__malloc_unlock+0x8>)
 8007ae6:	f000 bb81 	b.w	80081ec <__retarget_lock_release_recursive>
 8007aea:	bf00      	nop
 8007aec:	20000f98 	.word	0x20000f98

08007af0 <realloc>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <realloc+0xc>)
 8007af2:	460a      	mov	r2, r1
 8007af4:	4601      	mov	r1, r0
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	f000 b802 	b.w	8007b00 <_realloc_r>
 8007afc:	20000038 	.word	0x20000038

08007b00 <_realloc_r>:
 8007b00:	2900      	cmp	r1, #0
 8007b02:	f000 8095 	beq.w	8007c30 <_realloc_r+0x130>
 8007b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	b083      	sub	sp, #12
 8007b10:	4680      	mov	r8, r0
 8007b12:	f106 070b 	add.w	r7, r6, #11
 8007b16:	f7ff ffdf 	bl	8007ad8 <__malloc_lock>
 8007b1a:	f855 ec04 	ldr.w	lr, [r5, #-4]
 8007b1e:	2f16      	cmp	r7, #22
 8007b20:	f02e 0403 	bic.w	r4, lr, #3
 8007b24:	f1a5 0908 	sub.w	r9, r5, #8
 8007b28:	d83c      	bhi.n	8007ba4 <_realloc_r+0xa4>
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	4617      	mov	r7, r2
 8007b2e:	42be      	cmp	r6, r7
 8007b30:	d83d      	bhi.n	8007bae <_realloc_r+0xae>
 8007b32:	4294      	cmp	r4, r2
 8007b34:	da43      	bge.n	8007bbe <_realloc_r+0xbe>
 8007b36:	4bc4      	ldr	r3, [pc, #784]	; (8007e48 <_realloc_r+0x348>)
 8007b38:	6899      	ldr	r1, [r3, #8]
 8007b3a:	eb09 0004 	add.w	r0, r9, r4
 8007b3e:	4288      	cmp	r0, r1
 8007b40:	f000 80b4 	beq.w	8007cac <_realloc_r+0x1ac>
 8007b44:	6843      	ldr	r3, [r0, #4]
 8007b46:	f023 0101 	bic.w	r1, r3, #1
 8007b4a:	4401      	add	r1, r0
 8007b4c:	6849      	ldr	r1, [r1, #4]
 8007b4e:	07c9      	lsls	r1, r1, #31
 8007b50:	d54c      	bpl.n	8007bec <_realloc_r+0xec>
 8007b52:	f01e 0f01 	tst.w	lr, #1
 8007b56:	f000 809b 	beq.w	8007c90 <_realloc_r+0x190>
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	f7ff fb6d 	bl	800723c <_malloc_r>
 8007b62:	4606      	mov	r6, r0
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d03a      	beq.n	8007bde <_realloc_r+0xde>
 8007b68:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	444b      	add	r3, r9
 8007b72:	f1a0 0208 	sub.w	r2, r0, #8
 8007b76:	429a      	cmp	r2, r3
 8007b78:	f000 8121 	beq.w	8007dbe <_realloc_r+0x2be>
 8007b7c:	1f22      	subs	r2, r4, #4
 8007b7e:	2a24      	cmp	r2, #36	; 0x24
 8007b80:	f200 8107 	bhi.w	8007d92 <_realloc_r+0x292>
 8007b84:	2a13      	cmp	r2, #19
 8007b86:	f200 80db 	bhi.w	8007d40 <_realloc_r+0x240>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	6811      	ldr	r1, [r2, #0]
 8007b90:	6019      	str	r1, [r3, #0]
 8007b92:	6851      	ldr	r1, [r2, #4]
 8007b94:	6059      	str	r1, [r3, #4]
 8007b96:	6892      	ldr	r2, [r2, #8]
 8007b98:	609a      	str	r2, [r3, #8]
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	f000 fa2d 	bl	8007ffc <_free_r>
 8007ba2:	e01c      	b.n	8007bde <_realloc_r+0xde>
 8007ba4:	f027 0707 	bic.w	r7, r7, #7
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	463a      	mov	r2, r7
 8007bac:	dabf      	bge.n	8007b2e <_realloc_r+0x2e>
 8007bae:	2600      	movs	r6, #0
 8007bb0:	230c      	movs	r3, #12
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f8c8 3000 	str.w	r3, [r8]
 8007bb8:	b003      	add	sp, #12
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	462e      	mov	r6, r5
 8007bc0:	1be3      	subs	r3, r4, r7
 8007bc2:	2b0f      	cmp	r3, #15
 8007bc4:	d81e      	bhi.n	8007c04 <_realloc_r+0x104>
 8007bc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	4323      	orrs	r3, r4
 8007bd0:	444c      	add	r4, r9
 8007bd2:	f8c9 3004 	str.w	r3, [r9, #4]
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	6063      	str	r3, [r4, #4]
 8007bde:	4640      	mov	r0, r8
 8007be0:	f7ff ff80 	bl	8007ae4 <__malloc_unlock>
 8007be4:	4630      	mov	r0, r6
 8007be6:	b003      	add	sp, #12
 8007be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	18e1      	adds	r1, r4, r3
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	db1f      	blt.n	8007c36 <_realloc_r+0x136>
 8007bf6:	68c3      	ldr	r3, [r0, #12]
 8007bf8:	6882      	ldr	r2, [r0, #8]
 8007bfa:	462e      	mov	r6, r5
 8007bfc:	60d3      	str	r3, [r2, #12]
 8007bfe:	460c      	mov	r4, r1
 8007c00:	609a      	str	r2, [r3, #8]
 8007c02:	e7dd      	b.n	8007bc0 <_realloc_r+0xc0>
 8007c04:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007c08:	eb09 0107 	add.w	r1, r9, r7
 8007c0c:	f002 0201 	and.w	r2, r2, #1
 8007c10:	444c      	add	r4, r9
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	4317      	orrs	r7, r2
 8007c18:	f8c9 7004 	str.w	r7, [r9, #4]
 8007c1c:	604b      	str	r3, [r1, #4]
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	3108      	adds	r1, #8
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	4640      	mov	r0, r8
 8007c2a:	f000 f9e7 	bl	8007ffc <_free_r>
 8007c2e:	e7d6      	b.n	8007bde <_realloc_r+0xde>
 8007c30:	4611      	mov	r1, r2
 8007c32:	f7ff bb03 	b.w	800723c <_malloc_r>
 8007c36:	f01e 0f01 	tst.w	lr, #1
 8007c3a:	d18e      	bne.n	8007b5a <_realloc_r+0x5a>
 8007c3c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8007c40:	eba9 0a01 	sub.w	sl, r9, r1
 8007c44:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007c48:	f021 0103 	bic.w	r1, r1, #3
 8007c4c:	440b      	add	r3, r1
 8007c4e:	4423      	add	r3, r4
 8007c50:	4293      	cmp	r3, r2
 8007c52:	db25      	blt.n	8007ca0 <_realloc_r+0x1a0>
 8007c54:	68c2      	ldr	r2, [r0, #12]
 8007c56:	6881      	ldr	r1, [r0, #8]
 8007c58:	4656      	mov	r6, sl
 8007c5a:	60ca      	str	r2, [r1, #12]
 8007c5c:	6091      	str	r1, [r2, #8]
 8007c5e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007c62:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8007c66:	1f22      	subs	r2, r4, #4
 8007c68:	2a24      	cmp	r2, #36	; 0x24
 8007c6a:	60c1      	str	r1, [r0, #12]
 8007c6c:	6088      	str	r0, [r1, #8]
 8007c6e:	f200 8094 	bhi.w	8007d9a <_realloc_r+0x29a>
 8007c72:	2a13      	cmp	r2, #19
 8007c74:	d96f      	bls.n	8007d56 <_realloc_r+0x256>
 8007c76:	6829      	ldr	r1, [r5, #0]
 8007c78:	f8ca 1008 	str.w	r1, [sl, #8]
 8007c7c:	6869      	ldr	r1, [r5, #4]
 8007c7e:	f8ca 100c 	str.w	r1, [sl, #12]
 8007c82:	2a1b      	cmp	r2, #27
 8007c84:	f200 80a2 	bhi.w	8007dcc <_realloc_r+0x2cc>
 8007c88:	3508      	adds	r5, #8
 8007c8a:	f10a 0210 	add.w	r2, sl, #16
 8007c8e:	e063      	b.n	8007d58 <_realloc_r+0x258>
 8007c90:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007c94:	eba9 0a03 	sub.w	sl, r9, r3
 8007c98:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007c9c:	f021 0103 	bic.w	r1, r1, #3
 8007ca0:	1863      	adds	r3, r4, r1
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	f6ff af59 	blt.w	8007b5a <_realloc_r+0x5a>
 8007ca8:	4656      	mov	r6, sl
 8007caa:	e7d8      	b.n	8007c5e <_realloc_r+0x15e>
 8007cac:	6841      	ldr	r1, [r0, #4]
 8007cae:	f021 0b03 	bic.w	fp, r1, #3
 8007cb2:	44a3      	add	fp, r4
 8007cb4:	f107 0010 	add.w	r0, r7, #16
 8007cb8:	4583      	cmp	fp, r0
 8007cba:	da56      	bge.n	8007d6a <_realloc_r+0x26a>
 8007cbc:	f01e 0f01 	tst.w	lr, #1
 8007cc0:	f47f af4b 	bne.w	8007b5a <_realloc_r+0x5a>
 8007cc4:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8007cc8:	eba9 0a01 	sub.w	sl, r9, r1
 8007ccc:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007cd0:	f021 0103 	bic.w	r1, r1, #3
 8007cd4:	448b      	add	fp, r1
 8007cd6:	4558      	cmp	r0, fp
 8007cd8:	dce2      	bgt.n	8007ca0 <_realloc_r+0x1a0>
 8007cda:	4656      	mov	r6, sl
 8007cdc:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007ce0:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8007ce4:	1f22      	subs	r2, r4, #4
 8007ce6:	2a24      	cmp	r2, #36	; 0x24
 8007ce8:	60c1      	str	r1, [r0, #12]
 8007cea:	6088      	str	r0, [r1, #8]
 8007cec:	f200 808f 	bhi.w	8007e0e <_realloc_r+0x30e>
 8007cf0:	2a13      	cmp	r2, #19
 8007cf2:	f240 808a 	bls.w	8007e0a <_realloc_r+0x30a>
 8007cf6:	6829      	ldr	r1, [r5, #0]
 8007cf8:	f8ca 1008 	str.w	r1, [sl, #8]
 8007cfc:	6869      	ldr	r1, [r5, #4]
 8007cfe:	f8ca 100c 	str.w	r1, [sl, #12]
 8007d02:	2a1b      	cmp	r2, #27
 8007d04:	f200 808a 	bhi.w	8007e1c <_realloc_r+0x31c>
 8007d08:	3508      	adds	r5, #8
 8007d0a:	f10a 0210 	add.w	r2, sl, #16
 8007d0e:	6829      	ldr	r1, [r5, #0]
 8007d10:	6011      	str	r1, [r2, #0]
 8007d12:	6869      	ldr	r1, [r5, #4]
 8007d14:	6051      	str	r1, [r2, #4]
 8007d16:	68a9      	ldr	r1, [r5, #8]
 8007d18:	6091      	str	r1, [r2, #8]
 8007d1a:	eb0a 0107 	add.w	r1, sl, r7
 8007d1e:	ebab 0207 	sub.w	r2, fp, r7
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	6099      	str	r1, [r3, #8]
 8007d28:	604a      	str	r2, [r1, #4]
 8007d2a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	431f      	orrs	r7, r3
 8007d34:	4640      	mov	r0, r8
 8007d36:	f8ca 7004 	str.w	r7, [sl, #4]
 8007d3a:	f7ff fed3 	bl	8007ae4 <__malloc_unlock>
 8007d3e:	e751      	b.n	8007be4 <_realloc_r+0xe4>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	6003      	str	r3, [r0, #0]
 8007d44:	686b      	ldr	r3, [r5, #4]
 8007d46:	6043      	str	r3, [r0, #4]
 8007d48:	2a1b      	cmp	r2, #27
 8007d4a:	d82d      	bhi.n	8007da8 <_realloc_r+0x2a8>
 8007d4c:	f100 0308 	add.w	r3, r0, #8
 8007d50:	f105 0208 	add.w	r2, r5, #8
 8007d54:	e71b      	b.n	8007b8e <_realloc_r+0x8e>
 8007d56:	4632      	mov	r2, r6
 8007d58:	6829      	ldr	r1, [r5, #0]
 8007d5a:	6011      	str	r1, [r2, #0]
 8007d5c:	6869      	ldr	r1, [r5, #4]
 8007d5e:	6051      	str	r1, [r2, #4]
 8007d60:	68a9      	ldr	r1, [r5, #8]
 8007d62:	6091      	str	r1, [r2, #8]
 8007d64:	461c      	mov	r4, r3
 8007d66:	46d1      	mov	r9, sl
 8007d68:	e72a      	b.n	8007bc0 <_realloc_r+0xc0>
 8007d6a:	eb09 0107 	add.w	r1, r9, r7
 8007d6e:	ebab 0b07 	sub.w	fp, fp, r7
 8007d72:	f04b 0201 	orr.w	r2, fp, #1
 8007d76:	6099      	str	r1, [r3, #8]
 8007d78:	604a      	str	r2, [r1, #4]
 8007d7a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	431f      	orrs	r7, r3
 8007d84:	4640      	mov	r0, r8
 8007d86:	f845 7c04 	str.w	r7, [r5, #-4]
 8007d8a:	f7ff feab 	bl	8007ae4 <__malloc_unlock>
 8007d8e:	462e      	mov	r6, r5
 8007d90:	e728      	b.n	8007be4 <_realloc_r+0xe4>
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7ff fdee 	bl	8007974 <memmove>
 8007d98:	e6ff      	b.n	8007b9a <_realloc_r+0x9a>
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	461c      	mov	r4, r3
 8007da0:	46d1      	mov	r9, sl
 8007da2:	f7ff fde7 	bl	8007974 <memmove>
 8007da6:	e70b      	b.n	8007bc0 <_realloc_r+0xc0>
 8007da8:	68ab      	ldr	r3, [r5, #8]
 8007daa:	6083      	str	r3, [r0, #8]
 8007dac:	68eb      	ldr	r3, [r5, #12]
 8007dae:	60c3      	str	r3, [r0, #12]
 8007db0:	2a24      	cmp	r2, #36	; 0x24
 8007db2:	d017      	beq.n	8007de4 <_realloc_r+0x2e4>
 8007db4:	f100 0310 	add.w	r3, r0, #16
 8007db8:	f105 0210 	add.w	r2, r5, #16
 8007dbc:	e6e7      	b.n	8007b8e <_realloc_r+0x8e>
 8007dbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	441c      	add	r4, r3
 8007dc8:	462e      	mov	r6, r5
 8007dca:	e6f9      	b.n	8007bc0 <_realloc_r+0xc0>
 8007dcc:	68a9      	ldr	r1, [r5, #8]
 8007dce:	f8ca 1010 	str.w	r1, [sl, #16]
 8007dd2:	68e9      	ldr	r1, [r5, #12]
 8007dd4:	f8ca 1014 	str.w	r1, [sl, #20]
 8007dd8:	2a24      	cmp	r2, #36	; 0x24
 8007dda:	d00c      	beq.n	8007df6 <_realloc_r+0x2f6>
 8007ddc:	3510      	adds	r5, #16
 8007dde:	f10a 0218 	add.w	r2, sl, #24
 8007de2:	e7b9      	b.n	8007d58 <_realloc_r+0x258>
 8007de4:	692b      	ldr	r3, [r5, #16]
 8007de6:	6103      	str	r3, [r0, #16]
 8007de8:	696b      	ldr	r3, [r5, #20]
 8007dea:	6143      	str	r3, [r0, #20]
 8007dec:	f105 0218 	add.w	r2, r5, #24
 8007df0:	f100 0318 	add.w	r3, r0, #24
 8007df4:	e6cb      	b.n	8007b8e <_realloc_r+0x8e>
 8007df6:	692a      	ldr	r2, [r5, #16]
 8007df8:	f8ca 2018 	str.w	r2, [sl, #24]
 8007dfc:	696a      	ldr	r2, [r5, #20]
 8007dfe:	f8ca 201c 	str.w	r2, [sl, #28]
 8007e02:	3518      	adds	r5, #24
 8007e04:	f10a 0220 	add.w	r2, sl, #32
 8007e08:	e7a6      	b.n	8007d58 <_realloc_r+0x258>
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	e77f      	b.n	8007d0e <_realloc_r+0x20e>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	f7ff fdae 	bl	8007974 <memmove>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	e77e      	b.n	8007d1a <_realloc_r+0x21a>
 8007e1c:	68a9      	ldr	r1, [r5, #8]
 8007e1e:	f8ca 1010 	str.w	r1, [sl, #16]
 8007e22:	68e9      	ldr	r1, [r5, #12]
 8007e24:	f8ca 1014 	str.w	r1, [sl, #20]
 8007e28:	2a24      	cmp	r2, #36	; 0x24
 8007e2a:	d003      	beq.n	8007e34 <_realloc_r+0x334>
 8007e2c:	3510      	adds	r5, #16
 8007e2e:	f10a 0218 	add.w	r2, sl, #24
 8007e32:	e76c      	b.n	8007d0e <_realloc_r+0x20e>
 8007e34:	692a      	ldr	r2, [r5, #16]
 8007e36:	f8ca 2018 	str.w	r2, [sl, #24]
 8007e3a:	696a      	ldr	r2, [r5, #20]
 8007e3c:	f8ca 201c 	str.w	r2, [sl, #28]
 8007e40:	3518      	adds	r5, #24
 8007e42:	f10a 0220 	add.w	r2, sl, #32
 8007e46:	e762      	b.n	8007d0e <_realloc_r+0x20e>
 8007e48:	20000468 	.word	0x20000468

08007e4c <_sbrk_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4c07      	ldr	r4, [pc, #28]	; (8007e6c <_sbrk_r+0x20>)
 8007e50:	2300      	movs	r3, #0
 8007e52:	4605      	mov	r5, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	f7ff f93e 	bl	80070d8 <_sbrk>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d000      	beq.n	8007e62 <_sbrk_r+0x16>
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0fb      	beq.n	8007e60 <_sbrk_r+0x14>
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20000fac 	.word	0x20000fac
	...

08007e80 <strlen>:
 8007e80:	f890 f000 	pld	[r0]
 8007e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8007e88:	f020 0107 	bic.w	r1, r0, #7
 8007e8c:	f06f 0c00 	mvn.w	ip, #0
 8007e90:	f010 0407 	ands.w	r4, r0, #7
 8007e94:	f891 f020 	pld	[r1, #32]
 8007e98:	f040 8049 	bne.w	8007f2e <strlen+0xae>
 8007e9c:	f04f 0400 	mov.w	r4, #0
 8007ea0:	f06f 0007 	mvn.w	r0, #7
 8007ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007ea8:	f891 f040 	pld	[r1, #64]	; 0x40
 8007eac:	f100 0008 	add.w	r0, r0, #8
 8007eb0:	fa82 f24c 	uadd8	r2, r2, ip
 8007eb4:	faa4 f28c 	sel	r2, r4, ip
 8007eb8:	fa83 f34c 	uadd8	r3, r3, ip
 8007ebc:	faa2 f38c 	sel	r3, r2, ip
 8007ec0:	bb4b      	cbnz	r3, 8007f16 <strlen+0x96>
 8007ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8007ec6:	fa82 f24c 	uadd8	r2, r2, ip
 8007eca:	f100 0008 	add.w	r0, r0, #8
 8007ece:	faa4 f28c 	sel	r2, r4, ip
 8007ed2:	fa83 f34c 	uadd8	r3, r3, ip
 8007ed6:	faa2 f38c 	sel	r3, r2, ip
 8007eda:	b9e3      	cbnz	r3, 8007f16 <strlen+0x96>
 8007edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8007ee0:	fa82 f24c 	uadd8	r2, r2, ip
 8007ee4:	f100 0008 	add.w	r0, r0, #8
 8007ee8:	faa4 f28c 	sel	r2, r4, ip
 8007eec:	fa83 f34c 	uadd8	r3, r3, ip
 8007ef0:	faa2 f38c 	sel	r3, r2, ip
 8007ef4:	b97b      	cbnz	r3, 8007f16 <strlen+0x96>
 8007ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8007efa:	f101 0120 	add.w	r1, r1, #32
 8007efe:	fa82 f24c 	uadd8	r2, r2, ip
 8007f02:	f100 0008 	add.w	r0, r0, #8
 8007f06:	faa4 f28c 	sel	r2, r4, ip
 8007f0a:	fa83 f34c 	uadd8	r3, r3, ip
 8007f0e:	faa2 f38c 	sel	r3, r2, ip
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c6      	beq.n	8007ea4 <strlen+0x24>
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	bf04      	itt	eq
 8007f1a:	3004      	addeq	r0, #4
 8007f1c:	461a      	moveq	r2, r3
 8007f1e:	ba12      	rev	r2, r2
 8007f20:	fab2 f282 	clz	r2, r2
 8007f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8007f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8007f2c:	4770      	bx	lr
 8007f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007f32:	f004 0503 	and.w	r5, r4, #3
 8007f36:	f1c4 0000 	rsb	r0, r4, #0
 8007f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8007f3e:	f014 0f04 	tst.w	r4, #4
 8007f42:	f891 f040 	pld	[r1, #64]	; 0x40
 8007f46:	fa0c f505 	lsl.w	r5, ip, r5
 8007f4a:	ea62 0205 	orn	r2, r2, r5
 8007f4e:	bf1c      	itt	ne
 8007f50:	ea63 0305 	ornne	r3, r3, r5
 8007f54:	4662      	movne	r2, ip
 8007f56:	f04f 0400 	mov.w	r4, #0
 8007f5a:	e7a9      	b.n	8007eb0 <strlen+0x30>

08007f5c <_malloc_trim_r>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	4f24      	ldr	r7, [pc, #144]	; (8007ff0 <_malloc_trim_r+0x94>)
 8007f60:	460c      	mov	r4, r1
 8007f62:	4606      	mov	r6, r0
 8007f64:	f7ff fdb8 	bl	8007ad8 <__malloc_lock>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	685d      	ldr	r5, [r3, #4]
 8007f6c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8007f70:	310f      	adds	r1, #15
 8007f72:	f025 0503 	bic.w	r5, r5, #3
 8007f76:	4429      	add	r1, r5
 8007f78:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007f7c:	f021 010f 	bic.w	r1, r1, #15
 8007f80:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8007f84:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007f88:	db07      	blt.n	8007f9a <_malloc_trim_r+0x3e>
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7ff ff5d 	bl	8007e4c <_sbrk_r>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	442b      	add	r3, r5
 8007f96:	4298      	cmp	r0, r3
 8007f98:	d004      	beq.n	8007fa4 <_malloc_trim_r+0x48>
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff fda2 	bl	8007ae4 <__malloc_unlock>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa4:	4261      	negs	r1, r4
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff ff50 	bl	8007e4c <_sbrk_r>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d00d      	beq.n	8007fcc <_malloc_trim_r+0x70>
 8007fb0:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <_malloc_trim_r+0x98>)
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	6819      	ldr	r1, [r3, #0]
 8007fb6:	1b2d      	subs	r5, r5, r4
 8007fb8:	f045 0501 	orr.w	r5, r5, #1
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	1b09      	subs	r1, r1, r4
 8007fc0:	6055      	str	r5, [r2, #4]
 8007fc2:	6019      	str	r1, [r3, #0]
 8007fc4:	f7ff fd8e 	bl	8007ae4 <__malloc_unlock>
 8007fc8:	2001      	movs	r0, #1
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ff3c 	bl	8007e4c <_sbrk_r>
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	1a83      	subs	r3, r0, r2
 8007fd8:	2b0f      	cmp	r3, #15
 8007fda:	ddde      	ble.n	8007f9a <_malloc_trim_r+0x3e>
 8007fdc:	4c06      	ldr	r4, [pc, #24]	; (8007ff8 <_malloc_trim_r+0x9c>)
 8007fde:	4905      	ldr	r1, [pc, #20]	; (8007ff4 <_malloc_trim_r+0x98>)
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	1b00      	subs	r0, r0, r4
 8007fe8:	6053      	str	r3, [r2, #4]
 8007fea:	6008      	str	r0, [r1, #0]
 8007fec:	e7d5      	b.n	8007f9a <_malloc_trim_r+0x3e>
 8007fee:	bf00      	nop
 8007ff0:	20000468 	.word	0x20000468
 8007ff4:	200008bc 	.word	0x200008bc
 8007ff8:	20000870 	.word	0x20000870

08007ffc <_free_r>:
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d044      	beq.n	800808a <_free_r+0x8e>
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	4680      	mov	r8, r0
 8008008:	f7ff fd66 	bl	8007ad8 <__malloc_lock>
 800800c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008010:	4969      	ldr	r1, [pc, #420]	; (80081b8 <_free_r+0x1bc>)
 8008012:	f027 0301 	bic.w	r3, r7, #1
 8008016:	f1a5 0408 	sub.w	r4, r5, #8
 800801a:	18e2      	adds	r2, r4, r3
 800801c:	688e      	ldr	r6, [r1, #8]
 800801e:	6850      	ldr	r0, [r2, #4]
 8008020:	42b2      	cmp	r2, r6
 8008022:	f020 0003 	bic.w	r0, r0, #3
 8008026:	d05e      	beq.n	80080e6 <_free_r+0xea>
 8008028:	07fe      	lsls	r6, r7, #31
 800802a:	6050      	str	r0, [r2, #4]
 800802c:	d40b      	bmi.n	8008046 <_free_r+0x4a>
 800802e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8008032:	1be4      	subs	r4, r4, r7
 8008034:	f101 0e08 	add.w	lr, r1, #8
 8008038:	68a5      	ldr	r5, [r4, #8]
 800803a:	4575      	cmp	r5, lr
 800803c:	443b      	add	r3, r7
 800803e:	d06d      	beq.n	800811c <_free_r+0x120>
 8008040:	68e7      	ldr	r7, [r4, #12]
 8008042:	60ef      	str	r7, [r5, #12]
 8008044:	60bd      	str	r5, [r7, #8]
 8008046:	1815      	adds	r5, r2, r0
 8008048:	686d      	ldr	r5, [r5, #4]
 800804a:	07ed      	lsls	r5, r5, #31
 800804c:	d53e      	bpl.n	80080cc <_free_r+0xd0>
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	6062      	str	r2, [r4, #4]
 8008054:	50e3      	str	r3, [r4, r3]
 8008056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805a:	d217      	bcs.n	800808c <_free_r+0x90>
 800805c:	08db      	lsrs	r3, r3, #3
 800805e:	1c58      	adds	r0, r3, #1
 8008060:	109a      	asrs	r2, r3, #2
 8008062:	684d      	ldr	r5, [r1, #4]
 8008064:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 8008068:	60a7      	str	r7, [r4, #8]
 800806a:	2301      	movs	r3, #1
 800806c:	4093      	lsls	r3, r2
 800806e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8008072:	432b      	orrs	r3, r5
 8008074:	3a08      	subs	r2, #8
 8008076:	60e2      	str	r2, [r4, #12]
 8008078:	604b      	str	r3, [r1, #4]
 800807a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 800807e:	60fc      	str	r4, [r7, #12]
 8008080:	4640      	mov	r0, r8
 8008082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008086:	f7ff bd2d 	b.w	8007ae4 <__malloc_unlock>
 800808a:	4770      	bx	lr
 800808c:	0a5a      	lsrs	r2, r3, #9
 800808e:	2a04      	cmp	r2, #4
 8008090:	d852      	bhi.n	8008138 <_free_r+0x13c>
 8008092:	099a      	lsrs	r2, r3, #6
 8008094:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008098:	00ff      	lsls	r7, r7, #3
 800809a:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800809e:	19c8      	adds	r0, r1, r7
 80080a0:	59ca      	ldr	r2, [r1, r7]
 80080a2:	3808      	subs	r0, #8
 80080a4:	4290      	cmp	r0, r2
 80080a6:	d04f      	beq.n	8008148 <_free_r+0x14c>
 80080a8:	6851      	ldr	r1, [r2, #4]
 80080aa:	f021 0103 	bic.w	r1, r1, #3
 80080ae:	428b      	cmp	r3, r1
 80080b0:	d232      	bcs.n	8008118 <_free_r+0x11c>
 80080b2:	6892      	ldr	r2, [r2, #8]
 80080b4:	4290      	cmp	r0, r2
 80080b6:	d1f7      	bne.n	80080a8 <_free_r+0xac>
 80080b8:	68c3      	ldr	r3, [r0, #12]
 80080ba:	60a0      	str	r0, [r4, #8]
 80080bc:	60e3      	str	r3, [r4, #12]
 80080be:	609c      	str	r4, [r3, #8]
 80080c0:	60c4      	str	r4, [r0, #12]
 80080c2:	4640      	mov	r0, r8
 80080c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	f7ff bd0c 	b.w	8007ae4 <__malloc_unlock>
 80080cc:	6895      	ldr	r5, [r2, #8]
 80080ce:	4f3b      	ldr	r7, [pc, #236]	; (80081bc <_free_r+0x1c0>)
 80080d0:	42bd      	cmp	r5, r7
 80080d2:	4403      	add	r3, r0
 80080d4:	d040      	beq.n	8008158 <_free_r+0x15c>
 80080d6:	68d0      	ldr	r0, [r2, #12]
 80080d8:	60e8      	str	r0, [r5, #12]
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	6085      	str	r5, [r0, #8]
 80080e0:	6062      	str	r2, [r4, #4]
 80080e2:	50e3      	str	r3, [r4, r3]
 80080e4:	e7b7      	b.n	8008056 <_free_r+0x5a>
 80080e6:	07ff      	lsls	r7, r7, #31
 80080e8:	4403      	add	r3, r0
 80080ea:	d407      	bmi.n	80080fc <_free_r+0x100>
 80080ec:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80080f0:	1aa4      	subs	r4, r4, r2
 80080f2:	4413      	add	r3, r2
 80080f4:	68a0      	ldr	r0, [r4, #8]
 80080f6:	68e2      	ldr	r2, [r4, #12]
 80080f8:	60c2      	str	r2, [r0, #12]
 80080fa:	6090      	str	r0, [r2, #8]
 80080fc:	4a30      	ldr	r2, [pc, #192]	; (80081c0 <_free_r+0x1c4>)
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	f043 0001 	orr.w	r0, r3, #1
 8008104:	4293      	cmp	r3, r2
 8008106:	6060      	str	r0, [r4, #4]
 8008108:	608c      	str	r4, [r1, #8]
 800810a:	d3b9      	bcc.n	8008080 <_free_r+0x84>
 800810c:	4b2d      	ldr	r3, [pc, #180]	; (80081c4 <_free_r+0x1c8>)
 800810e:	4640      	mov	r0, r8
 8008110:	6819      	ldr	r1, [r3, #0]
 8008112:	f7ff ff23 	bl	8007f5c <_malloc_trim_r>
 8008116:	e7b3      	b.n	8008080 <_free_r+0x84>
 8008118:	4610      	mov	r0, r2
 800811a:	e7cd      	b.n	80080b8 <_free_r+0xbc>
 800811c:	1811      	adds	r1, r2, r0
 800811e:	6849      	ldr	r1, [r1, #4]
 8008120:	07c9      	lsls	r1, r1, #31
 8008122:	d444      	bmi.n	80081ae <_free_r+0x1b2>
 8008124:	6891      	ldr	r1, [r2, #8]
 8008126:	68d2      	ldr	r2, [r2, #12]
 8008128:	60ca      	str	r2, [r1, #12]
 800812a:	4403      	add	r3, r0
 800812c:	f043 0001 	orr.w	r0, r3, #1
 8008130:	6091      	str	r1, [r2, #8]
 8008132:	6060      	str	r0, [r4, #4]
 8008134:	50e3      	str	r3, [r4, r3]
 8008136:	e7a3      	b.n	8008080 <_free_r+0x84>
 8008138:	2a14      	cmp	r2, #20
 800813a:	d816      	bhi.n	800816a <_free_r+0x16e>
 800813c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8008140:	00ff      	lsls	r7, r7, #3
 8008142:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8008146:	e7aa      	b.n	800809e <_free_r+0xa2>
 8008148:	10aa      	asrs	r2, r5, #2
 800814a:	2301      	movs	r3, #1
 800814c:	684d      	ldr	r5, [r1, #4]
 800814e:	4093      	lsls	r3, r2
 8008150:	432b      	orrs	r3, r5
 8008152:	604b      	str	r3, [r1, #4]
 8008154:	4603      	mov	r3, r0
 8008156:	e7b0      	b.n	80080ba <_free_r+0xbe>
 8008158:	f043 0201 	orr.w	r2, r3, #1
 800815c:	614c      	str	r4, [r1, #20]
 800815e:	610c      	str	r4, [r1, #16]
 8008160:	60e5      	str	r5, [r4, #12]
 8008162:	60a5      	str	r5, [r4, #8]
 8008164:	6062      	str	r2, [r4, #4]
 8008166:	50e3      	str	r3, [r4, r3]
 8008168:	e78a      	b.n	8008080 <_free_r+0x84>
 800816a:	2a54      	cmp	r2, #84	; 0x54
 800816c:	d806      	bhi.n	800817c <_free_r+0x180>
 800816e:	0b1a      	lsrs	r2, r3, #12
 8008170:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8008174:	00ff      	lsls	r7, r7, #3
 8008176:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800817a:	e790      	b.n	800809e <_free_r+0xa2>
 800817c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008180:	d806      	bhi.n	8008190 <_free_r+0x194>
 8008182:	0bda      	lsrs	r2, r3, #15
 8008184:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8008188:	00ff      	lsls	r7, r7, #3
 800818a:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800818e:	e786      	b.n	800809e <_free_r+0xa2>
 8008190:	f240 5054 	movw	r0, #1364	; 0x554
 8008194:	4282      	cmp	r2, r0
 8008196:	d806      	bhi.n	80081a6 <_free_r+0x1aa>
 8008198:	0c9a      	lsrs	r2, r3, #18
 800819a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800819e:	00ff      	lsls	r7, r7, #3
 80081a0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80081a4:	e77b      	b.n	800809e <_free_r+0xa2>
 80081a6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 80081aa:	257e      	movs	r5, #126	; 0x7e
 80081ac:	e777      	b.n	800809e <_free_r+0xa2>
 80081ae:	f043 0101 	orr.w	r1, r3, #1
 80081b2:	6061      	str	r1, [r4, #4]
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	e763      	b.n	8008080 <_free_r+0x84>
 80081b8:	20000468 	.word	0x20000468
 80081bc:	20000470 	.word	0x20000470
 80081c0:	20000874 	.word	0x20000874
 80081c4:	200008ec 	.word	0x200008ec

080081c8 <__retarget_lock_init>:
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop

080081cc <__retarget_lock_init_recursive>:
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <__retarget_lock_close>:
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <__retarget_lock_close_recursive>:
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop

080081d8 <__retarget_lock_acquire>:
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop

080081dc <__retarget_lock_acquire_recursive>:
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <__retarget_lock_try_acquire>:
 80081e0:	2001      	movs	r0, #1
 80081e2:	4770      	bx	lr

080081e4 <__retarget_lock_try_acquire_recursive>:
 80081e4:	2001      	movs	r0, #1
 80081e6:	4770      	bx	lr

080081e8 <__retarget_lock_release>:
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <__retarget_lock_release_recursive>:
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <cleanup_glue>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	460c      	mov	r4, r1
 80081f4:	6809      	ldr	r1, [r1, #0]
 80081f6:	4605      	mov	r5, r0
 80081f8:	b109      	cbz	r1, 80081fe <cleanup_glue+0xe>
 80081fa:	f7ff fff9 	bl	80081f0 <cleanup_glue>
 80081fe:	4621      	mov	r1, r4
 8008200:	4628      	mov	r0, r5
 8008202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008206:	f7ff bef9 	b.w	8007ffc <_free_r>
 800820a:	bf00      	nop

0800820c <_reclaim_reent>:
 800820c:	4b20      	ldr	r3, [pc, #128]	; (8008290 <_reclaim_reent+0x84>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4283      	cmp	r3, r0
 8008212:	d03c      	beq.n	800828e <_reclaim_reent+0x82>
 8008214:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	4605      	mov	r5, r0
 800821a:	b18b      	cbz	r3, 8008240 <_reclaim_reent+0x34>
 800821c:	2600      	movs	r6, #0
 800821e:	5999      	ldr	r1, [r3, r6]
 8008220:	b139      	cbz	r1, 8008232 <_reclaim_reent+0x26>
 8008222:	680c      	ldr	r4, [r1, #0]
 8008224:	4628      	mov	r0, r5
 8008226:	f7ff fee9 	bl	8007ffc <_free_r>
 800822a:	4621      	mov	r1, r4
 800822c:	2c00      	cmp	r4, #0
 800822e:	d1f8      	bne.n	8008222 <_reclaim_reent+0x16>
 8008230:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008232:	3604      	adds	r6, #4
 8008234:	2e80      	cmp	r6, #128	; 0x80
 8008236:	d1f2      	bne.n	800821e <_reclaim_reent+0x12>
 8008238:	4619      	mov	r1, r3
 800823a:	4628      	mov	r0, r5
 800823c:	f7ff fede 	bl	8007ffc <_free_r>
 8008240:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8008242:	b111      	cbz	r1, 800824a <_reclaim_reent+0x3e>
 8008244:	4628      	mov	r0, r5
 8008246:	f7ff fed9 	bl	8007ffc <_free_r>
 800824a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800824e:	b151      	cbz	r1, 8008266 <_reclaim_reent+0x5a>
 8008250:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8008254:	42b1      	cmp	r1, r6
 8008256:	d006      	beq.n	8008266 <_reclaim_reent+0x5a>
 8008258:	680c      	ldr	r4, [r1, #0]
 800825a:	4628      	mov	r0, r5
 800825c:	f7ff fece 	bl	8007ffc <_free_r>
 8008260:	42a6      	cmp	r6, r4
 8008262:	4621      	mov	r1, r4
 8008264:	d1f8      	bne.n	8008258 <_reclaim_reent+0x4c>
 8008266:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008268:	b111      	cbz	r1, 8008270 <_reclaim_reent+0x64>
 800826a:	4628      	mov	r0, r5
 800826c:	f7ff fec6 	bl	8007ffc <_free_r>
 8008270:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008272:	b903      	cbnz	r3, 8008276 <_reclaim_reent+0x6a>
 8008274:	bd70      	pop	{r4, r5, r6, pc}
 8008276:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008278:	4628      	mov	r0, r5
 800827a:	4798      	blx	r3
 800827c:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8008280:	2900      	cmp	r1, #0
 8008282:	d0f7      	beq.n	8008274 <_reclaim_reent+0x68>
 8008284:	4628      	mov	r0, r5
 8008286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800828a:	f7ff bfb1 	b.w	80081f0 <cleanup_glue>
 800828e:	4770      	bx	lr
 8008290:	20000038 	.word	0x20000038

08008294 <LED_config>:
 8008294:	00000098 00010000 00000000 6c6c6548     ............Hell
 80082a4:	6f57206f 21646c72 00000000              o World!....

080082b0 <DeviceDescriptor>:
 80082b0:	01100112 40000002 0058058b 02010010     .......@..X.....
 80082c0:	00000100                                ....

080082c4 <ConfigurationDescriptor>:
 80082c4:	003e0209 80000102 00040932 02020100     ..>.....2.......
 80082d4:	24050001 04011000 05060224 01000624     ...$....$...$...
 80082e4:	03810507 09ff0008 02000104 0000000a     ................
 80082f4:	02030507 07050040 40028205 00000500     ....@......@....

08008304 <LanguageString>:
 8008304:	04090304 00000000                       ........

0800830c <ManufacturerString>:
 800830c:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 800831c:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 800832c:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 800833c:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 800834c:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 800835c:	00730000 00000000 00000000              ..s.........

08008368 <ProductString>:
 8008368:	00490320 00460000 00580000 00200000      .I...F...X... .
 8008378:	00430000 00440000 00430000 00000000     ..C...D...C.....
 8008388:	00000000                                ....

0800838c <clock_config>:
 800838c:	01040250 00010000 00000000 00010000     P...............
 800839c:	01010101 10000000 00000093 00000110     ................

080083ac <__stack_chk_guard>:
 80083ac:	deadbeef                                ....

080083b0 <Driver_USBD0>:
 80083b0:	080025cd 08002635 08002871 080028ad     .%..5&..q(...(..
 80083c0:	080028e1 08002915 08002b1d 08002d3d     .(...)...+..=-..
 80083d0:	0800302d 08002b69 08002979 08002a01     -0..i+..y)...*..
 80083e0:	08002a79 08002cb5 0800319d 080031c9     y*...,...1...1..
 80083f0:	000020a1 00020000                       . ......

080083f8 <_global_impure_ptr>:
 80083f8:	20000040                                @.. 
